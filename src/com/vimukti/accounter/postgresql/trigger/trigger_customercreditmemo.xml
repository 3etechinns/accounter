<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field">

<!-- Trigger Cash Sale for After Insert -->
	<database-object>
		<create> 
		CREATE OR REPLACE FUNCTION function_customer_credit_memo() RETURNS TRIGGER as	
	$trigger_customer_credit_memo$

		DECLARE 



		newCustomerCreditMemoId BIGINT;
		oldCustomerCreditMemoId BIGINT;
		newCustomerId BIGINT;
		oldCustomerId BIGINT;
		newTaxGroupId BIGINT;
		oldTaxGroupId BIGINT;	 	
		newTotal DOUBLE PRECISION;
		oldTotal DOUBLE PRECISION;
		newAllLineTotal DOUBLE PRECISION;
		oldAllLineTotal DOUBLE PRECISION;
		newAllTaxableLineTotal DOUBLE PRECISION;
		oldAllTaxableLineTotal DOUBLE PRECISION;
		newIsVoid BOOLEAN;
		oldIsVoid BOOLEAN;
		newAccountsReceivableId BIGINT;
		oldAccountsReceivableId BIGINT;

		countNo INTEGER;

		transactionNumber BIGINT;
		transactionDate DATE;
		companyId BIGINT;
	
		BEGIN
		
			<!--  Condition for checking whether this Trigger call is for new Row Insertion -->
			IF TG_OP='INSERT' THEN	
		
				newCustomerCreditMemoId := NEW.ID_CUSTOMER_CREDIT_MEMO;
				newCustomerId := NEW.CUSTOMER_ID;
				newTaxGroupId := NEW.TAXGROUP_ID;
				newTotal := NEW.TOTAL;
				newAllLineTotal := NEW.ALL_LINE_TOTAL;
				newAllTaxableLineTotal := NEW.ALL_TAXABLE_LINE_TOTAL;
				newIsVoid := NEW.IS_VOID;
				newAccountsReceivableId := NEW.ACCOUNTS_RECEIVABLE_ID;

				<!-- Adding this Credit Memo to CREDITS_AND_PAYMENTS table. -->
				SELECT T.NUMBER INTO transactionNumber FROM TRANSACTION T WHERE T.ID_TRANSACTION =newCustomerCreditMemoId;
				SELECT T.T_DATE INTO transactionDate FROM TRANSACTION T WHERE T.ID_TRANSACTION =newCustomerCreditMemoId;
				SELECT T.COMPANY_ID INTO companyId FROM TRANSACTION T WHERE T.ID_TRANSACTION =newCustomerCreditMemoId;

				IF newTotal>0.0 THEN

					INSERT INTO CREDITS_AND_PAYMENTS (ID_CREDITS_AND_PAYMENTS,DATE,COMPANY_ID,TYPE,MEMO,CREDIT_AMOUNT,BALANCE,TRANSACTION_ID,CUSTOMER_OR_VENDOR_ID) VALUES((SELECT NEXTVAL('sequence_credits_and_payments')),transactionDate,companyId,2,textcat(cast(transactionNumber AS varchar),'Customer Credit') ,newTotal,newTotal,newCustomerCreditMemoId,newCustomerId);

				END IF;


				<!-- Updating the AccountsReceivableAccount -->
				UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - newTotal, TOTAL_BALANCE = TOTAL_BALANCE - newTotal WHERE ID_ACCOUNT = newAccountsReceivableId;


				<!--  inserting the corresponding rows into Account Transaction table -->

				INSERT INTO ACCOUNT_TRANSACTION (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT NEXTVAL('sequence_account_transaction')),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),1,newAccountsReceivableId,newCustomerCreditMemoId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),-1*newTotal);


				<!-- update the corresponding customer balances -->

				UPDATE CUSTOMER SET BALANCE = BALANCE - newTotal WHERE ID_CUSTOMER = newCustomerId;

				<!--  inserting the corresponding rows into Account Transaction table -->

				INSERT INTO ACCOUNT_TRANSACTION (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT NEXTVAL('sequence_account_transaction')),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),2, newCustomerId ,newCustomerCreditMemoId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),-1*newTotal);

				IF newTaxGroupId IS NOT NULL AND newAllTaxableLineTotal != 0.0 THEN 

					<!-- Inserting the Corresponding TaxGroup details in to TAX_RATE_CALCULATION -->
					INSERT INTO TAX_RATE_CALCULATION  (ID_TAX_RATE_CALCULATION,TAXAGENCY_ACCOUNT_ID,RATE,TRANSACTION_ID,TRANSACTION_TYPE,TAX_CODE_ID,TOTAL,TAXABLE_AMOUNT,NON_TAXABLE_AMOUNT,TAX_COLLECTED,TAXAGENCY_ID)(SELECT NEXTVAL('sequence_taxrate_calculation'), TA.ACCOUNT_ID,TR.RATE,newCustomerCreditMemoId, 4 , TC.ID_TAXCODE , newTotal , newAllTaxableLineTotal , newAllLineTotal - newAllTaxableLineTotal , -1 * newAllTaxableLineTotal * (TR.RATE /100),TA.ID_TAXAGENCY  FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG  ON TGTC.TAXGROUP_ID = TG.ID_TAXGROUP JOIN TAXCODE TC ON TC.ID_TAXCODE=TR.TAXCODE_ID JOIN TAXAGENCY TA ON TA.ID_TAXAGENCY = TC.TAXAGENCY_ID WHERE  TG.ID_TAXGROUP = newTaxGroupId AND TR.AS_OF IN (SELECT MAX(TR1.AS_OF) FROM TAXRATES TR1 WHERE TR1.ID_TAXRATES IN (SELECT (TR.ID_TAXRATES) FROM TAXRATES TR JOIN  TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID_TAXGROUP) AND  TR1.AS_OF &lt;= (SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId) GROUP BY TR1.TAXCODE_ID));


					<!-- Updating the TaxAgency Accounts with the Sales Tax amount. -->
					UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newCustomerCreditMemoId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , TOTAL_BALANCE = TOTAL_BALANCE - newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newCustomerCreditMemoId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE ID_ACCOUNT IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =newCustomerCreditMemoId);



					<!--  inserting the corresponding rows into Account Transaction table -->
					INSERT INTO ACCOUNT_TRANSACTION  (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT)(SELECT NEXTVAL('sequence_account_transaction'),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),1,TT.ACCOUNT_ID,newCustomerCreditMemoId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),(-1*newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId AND TRC.TAXAGENCY_ACCOUNT_ID = TT.ACCOUNT_ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100) FROM TAXAGENCY TT WHERE TT.ACCOUNT_ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId) GROUP BY TT.ACCOUNT_ID);

					<!-- updating the balance of corresponding tax agencies -->
					UPDATE TAXAGENCY SET BALANCE = BALANCE - newAllTaxableLineTotal* (SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId AND TRC.TAXAGENCY_ID = ID_TAXAGENCY GROUP BY TRC.TAXAGENCY_ID)/100 WHERE ID_TAXAGENCY IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId);


					<!--  inserting the corresponding rows into Account Transaction table -->
					INSERT INTO ACCOUNT_TRANSACTION  (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT)(SELECT NEXTVAL('sequence_account_transaction'), (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),4,TT.ID_TAXAGENCY,newCustomerCreditMemoId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),(-1*newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId AND TRC.TAXAGENCY_ID = TT.ID_TAXAGENCY)/100) FROM TAXAGENCY TT WHERE TT.ID_TAXAGENCY IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId));


					<!--  Inserting the corresponding rows into PaySalesTaxEntries table. -->

					INSERT INTO PAY_SALES_TAX_ENTRIES (ID_PAY_SALES_TAX_ENTRIES,T_ID,T_DATE,TAXCODE_ID,TAXAGENCY_ID,AMOUNT,BALANCE)(SELECT NEXTVAL('sequence_paysalestax_entries'), newCustomerCreditMemoId,(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newCustomerCreditMemoId),TRC.TAX_CODE_ID,TRC.TAXAGENCY_ID,TRC.TAXABLE_AMOUNT,TRC.TAXABLE_AMOUNT FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId);


				END IF;



			RETURN NEW;
			END IF;

			<!--  Condition for checking whether this Trigger call is for Row Updation -->
			IF TG_OP='UPDATE' THEN	

				newCustomerCreditMemoId := NEW.ID_CUSTOMER_CREDIT_MEMO;
				oldCustomerCreditMemoId := OLD.ID_CUSTOMER_CREDIT_MEMO;
				newCustomerId := NEW.CUSTOMER_ID;
				oldCustomerId := OLD.CUSTOMER_ID;
				newTaxGroupId := NEW.TAXGROUP_ID;
				oldTaxGroupId := OLD.TAXGROUP_ID;	 	
				newTotal := NEW.TOTAL;
				oldTotal := OLD.TOTAL;
				newAllLineTotal := NEW.ALL_LINE_TOTAL;
				oldAllLineTotal := OLD.ALL_LINE_TOTAL;
				newAllTaxableLineTotal := NEW.ALL_TAXABLE_LINE_TOTAL;
				oldAllTaxableLineTotal := OLD.ALL_TAXABLE_LINE_TOTAL;
				newIsVoid := NEW.IS_VOID;
				oldIsVoid := OLD.IS_VOID;
				newAccountsReceivableId := NEW.ACCOUNTS_RECEIVABLE_ID;
				oldAccountsReceivableId := OLD.ACCOUNTS_RECEIVABLE_ID;


				IF oldIsVoid != newIsVoid THEN

					DELETE FROM ACCOUNT_TRANSACTION WHERE T_ID =newCustomerCreditMemoId;

					<!--Reverse Updating the AccountsReceivableAccount -->
					UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + newTotal, TOTAL_BALANCE = TOTAL_BALANCE + newTotal WHERE ID_ACCOUNT = newAccountsReceivableId;


					<!--Reverse update the corresponding customer balances -->

					UPDATE CUSTOMER SET BALANCE = BALANCE + newTotal WHERE ID_CUSTOMER = newCustomerId;

					IF oldTaxGroupId IS NOT NULL AND oldAllTaxableLineTotal != 0.0 THEN

						<!-- Updating the TaxAgency Accounts with the Sales Tax amount. -->
						UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newCustomerCreditMemoId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , TOTAL_BALANCE = TOTAL_BALANCE + newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newCustomerCreditMemoId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE ID_ACCOUNT IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =newCustomerCreditMemoId);



						<!-- updating the balance of corresponding tax agencies -->
						UPDATE TAXAGENCY SET BALANCE = BALANCE + newAllTaxableLineTotal* (SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId AND TRC.TAXAGENCY_ID = ID_TAXAGENCY )/100 WHERE ID_TAXAGENCY IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newCustomerCreditMemoId);


						<!-- Deleting corresponding transaction rows from TaxRate Calculation table -->
						DELETE FROM TAX_RATE_CALCULATION WHERE TRANSACTION_ID =newCustomerCreditMemoId;

					END IF;

					<!-- Query to retrieve the number of places it's being used. -->

					countNo :=0;
					SELECT COUNT(*) INTO countNo FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP WHERE TCP.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId) AND TCP.AMOUNT_TO_USE > 0.0;

					IF countNo >0 THEN

						<!-- Increase the Balance of the Invoices which are being paid with this Customer Credit Memo -->
						UPDATE INVOICE SET BALANCE_DUE = BALANCE_DUE + (SELECT SUM(TCP1.AMOUNT_TO_USE) FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP1 JOIN TRANSACTION_RECEIVE_PAYMENT TRP1 ON TCP1.TRANSACTION_RECEIVE_PAYMENT_ID = TRP1.ID_TRANSACTION_RECEIVE_PAYMENT JOIN INVOICE I1 ON TRP1.INVOICE_ID = I1.ID_INVOICE WHERE I1.ID_INVOICE = ID_INVOICE AND TCP1.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId)),PAYMENTS = PAYMENTS - (SELECT SUM(TCP1.AMOUNT_TO_USE) FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP1 JOIN TRANSACTION_RECEIVE_PAYMENT TRP1 ON TCP1.TRANSACTION_RECEIVE_PAYMENT_ID = TRP1.ID_TRANSACTION_RECEIVE_PAYMENT JOIN INVOICE I1 ON TRP1.INVOICE_ID = I1.ID_INVOICE WHERE I1.ID_INVOICE = ID_INVOICE AND TCP1.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId)) WHERE ID_INVOICE IN (SELECT ID_INVOICE FROM INVOICE I JOIN TRANSACTION_RECEIVE_PAYMENT TRP ON ID_INVOICE = TRP.INVOICE_ID JOIN TRANSACTION_CREDITS_AND_PAYMENTS TCP ON TRP.ID_TRANSACTION_RECEIVE_PAYMENT = TCP.TRANSACTION_RECEIVE_PAYMENT_ID WHERE TCP.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId));


						<!--  Increase the Balance of the Customer Refunds which are being paid with this Customer Credit Memo -->
						UPDATE CUSTOMER_REFUND SET BALANCE_DUE = BALANCE_DUE + (SELECT SUM(TCP1.AMOUNT_TO_USE) FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP1 JOIN TRANSACTION_RECEIVE_PAYMENT TRP1 ON TCP1.TRANSACTION_RECEIVE_PAYMENT_ID = TRP1.ID_TRANSACTION_RECEIVE_PAYMENT JOIN CUSTOMER_REFUND CR1 ON TRP1.CUSTOMER_REFUND_ID = CR1.ID_CUSTOMER_REFUND WHERE CR1.ID_CUSTOMER_REFUND = ID_CUSTOMER_REFUND AND TCP1.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId)),PAYMENTS = PAYMENTS - (SELECT SUM(TCP1.AMOUNT_TO_USE) FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP1 JOIN TRANSACTION_RECEIVE_PAYMENT TRP1 ON TCP1.TRANSACTION_RECEIVE_PAYMENT_ID = TRP1.ID_TRANSACTION_RECEIVE_PAYMENT JOIN CUSTOMER_REFUND CR1 ON TRP1.CUSTOMER_REFUND_ID = CR1.ID_CUSTOMER_REFUND WHERE CR1.ID_CUSTOMER_REFUND = ID_CUSTOMER_REFUND AND TCP1.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId)) WHERE ID_CUSTOMER_REFUND IN (SELECT ID_CUSTOMER_REFUND FROM CUSTOMER_REFUND CR JOIN TRANSACTION_RECEIVE_PAYMENT TRP ON ID_CUSTOMER_REFUND = TRP.CUSTOMER_REFUND_ID JOIN TRANSACTION_CREDITS_AND_PAYMENTS TCP ON TRP.ID_TRANSACTION_RECEIVE_PAYMENT = TCP.TRANSACTION_RECEIVE_PAYMENT_ID WHERE TCP.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId));


						<!-- Reduce the applied credits amount of the Transaction Receive Payment by the amount used from this Customer Credit Memo as Credit and Payment -->
						UPDATE TRANSACTION_RECEIVE_PAYMENT  SET APPLIED_CREDITS = APPLIED_CREDITS - (SELECT TCP1.AMOUNT_TO_USE FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP1 JOIN TRANSACTION_RECEIVE_PAYMENT TRP1 ON TCP1.TRANSACTION_RECEIVE_PAYMENT_ID  = TRP1.ID_TRANSACTION_RECEIVE_PAYMENT WHERE TRP1.ID_TRANSACTION_RECEIVE_PAYMENT = ID_TRANSACTION_RECEIVE_PAYMENT  AND TCP1.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId)) WHERE ID_TRANSACTION_RECEIVE_PAYMENT IN (SELECT ID_TRANSACTION_RECEIVE_PAYMENT FROM TRANSACTION_RECEIVE_PAYMENT TRP JOIN TRANSACTION_CREDITS_AND_PAYMENTS TCP ON ID_TRANSACTION_RECEIVE_PAYMENT = TCP.TRANSACTION_RECEIVE_PAYMENT_ID WHERE TCP.CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId));

						<!-- Updating the amount to use as zero for the Transaction Credits and payments created for this Customer Credit Memo.  -->
						UPDATE TRANSACTION_CREDITS_AND_PAYMENTS  SET AMOUNT_TO_USE = 0.0 WHERE CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId);

						
					END IF;

				<!-- Deleting this Credit Memo from CREDITS_AND_PAYMENTS table. -->
						DELETE FROM CREDITS_AND_PAYMENTS WHERE CREDITS_AND_PAYMENTS_ID = (SELECT CP.ID_CREDTIS_AND_PAYMENTS FROM CREDTIS_AND_PAYMENTS CP WHERE CP.TRANSACTION_ID = newCustomerCreditMemoId);



				END IF;

			RETURN NEW;
			END IF;
		RETURN NULL;
		END;
	$trigger_customer_credit_memo$ LANGUAGE plpgsql;
	
		
		</create>
		<drop>DROP FUNCTION IF EXIST function_customer_credit_memo</drop>
	</database-object>
	
	
	<database-object>
		<create> 
		CREATE TRIGGER trigger_customer_credit_memo AFTER INSERT OR UPDATE OR DELETE ON CUSTOMER_CREDIT_MEMO FOR EACH ROW
		EXECUTE PROCEDURE function_customer_credit_memo();
		
		</create>
		<drop>DROP TRIGGER trigger_customer_credit_memo</drop>
	</database-object>
	
	
</hibernate-mapping>