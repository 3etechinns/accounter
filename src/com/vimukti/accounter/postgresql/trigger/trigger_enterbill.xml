<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field">

<!-- Trigger Enter Bill for After Insert -->

<database-object>
        <create>
        CREATE OR REPLACE FUNCTION function_enterbill() RETURNS TRIGGER as   
        $trigger_enterbill$
       
            DECLARE
       
            newAccountsPayableId BIGINT;
            oldAccountsPayableId BIGINT;
	     	countNo INTEGER;
                 
            BEGIN
               

             
                IF TG_OP='INSERT' THEN   
               
                    newAccountsPayableId := NEW.ACCOUNTS_PAYABLE_ID;
                                   

                    UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + NEW.TOTAL, TOTAL_BALANCE = TOTAL_BALANCE + NEW.TOTAL WHERE ID_ACCOUNT = newAccountsPayableId;
               

                    INSERT INTO ACCOUNT_TRANSACTION (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT NEXTVAL('sequence_account_transaction')),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_ENTER_BILL),1,newAccountsPayableId,NEW.ID_ENTER_BILL,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_ENTER_BILL),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_ENTER_BILL),NEW.TOTAL);
                   

                    UPDATE VENDOR SET BALANCE = BALANCE + NEW.TOTAL WHERE ID_VENDOR = NEW.VENDOR_ID;
                   

                    INSERT INTO ACCOUNT_TRANSACTION (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT NEXTVAL('sequence_account_transaction')),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_ENTER_BILL),3,NEW.VENDOR_ID,NEW.ID_ENTER_BILL,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_ENTER_BILL),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_ENTER_BILL),NEW.TOTAL);
                           
                RETURN NEW;
               
                END IF;
               

           
                IF TG_OP='UPDATE' THEN   
               
                    newAccountsPayableId := NEW.ACCOUNTS_PAYABLE_ID;
                    oldAccountsPayableId := OLD.ACCOUNTS_PAYABLE_ID;
                   

                   
                    IF OLD.IS_VOID != NEW.IS_VOID THEN
                   
                        DELETE FROM ACCOUNT_TRANSACTION WHERE T_ID = NEW.ID_ENTER_BILL;
           

                        UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - OLD.TOTAL, TOTAL_BALANCE = TOTAL_BALANCE - OLD.TOTAL WHERE ID_ACCOUNT = newAccountsPayableId;
                       

                        UPDATE VENDOR SET BALANCE = BALANCE - OLD.TOTAL WHERE ID_VENDOR = OLD.VENDOR_ID;
                       
                
               
                    countNo := 0;
                   

                    SELECT COUNT(*) INTO countNo FROM TRANSACTION_PAYBILL TP WHERE TP.ENTER_BILL_ID = OLD.ID_ENTER_BILL;
                   
                IF count >0 THEN
               

                 
                         UPDATE PAY_BILL SET UNUSED_AMOUNT = UNUSED_AMOUNT + (SELECT TRP.PAYMENT FROM TRANSACTION_PAYBILL TRP  WHERE TRP.TRANSACTION_ID = PB.ID AND TRP.ENTER_BILL_ID= OLD.ID_ENTER_BILL) WHERE ID_PAYBILL IN (SELECT TRP1.TRANSACTION_ID FROM TRANSACTION_PAYBILL TRP1 WHERE TRP1.ENTER_BILL_ID = OLD.ID_ENTER_BILL);


                   
                        UPDATE CREDITS_AND_PAYMENTS SET BALANCE = BALANCE + (CASE WHEN (SELECT TRP1.APPLIED_CREDITS FROM TRANSACTION_PAYBILL TRP1 JOIN TRANSACTION_CREDITS_AND_PAYMENTS TCP1 ON TCP1.TRANSACTION_PAYBILL_ID = TRP1.ID JOIN CREDITS_AND_PAYMENTS CP1 ON TCP1.CREDITS_AND_PAYMENTS_ID= CP1.ID WHERE CP1.ID = CP.ID AND TRP1.ENTER_BILL_ID = OLD.ID_ENTER_BILL) > 0 THEN (SELECT TCP2.AMOUNT_TO_USE  FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP2  JOIN CREDITS_AND_PAYMENTS CP2 ON TCP2.CREDITS_AND_PAYMENTS_ID = CP2.ID JOIN TRANSACTION_PAYBILL TRP2 ON TRP2.ID = TCP2.TRANSACTION_PAYBILL_ID WHERE CP2.ID = CP.ID AND TRP2.ENTER_BILL_ID =OLD.ID_ENTER_BILL) ELSE 0 END) WHERE ID_CREDITS_AND_PAYMENTS IN (SELECT CP1.ID FROM CREDITS_AND_PAYMENTS CP1 JOIN TRANSACTION_CREDITS_AND_PAYMENTS TCP ON CP1.ID = TCP.CREDITS_AND_PAYMENTS_ID JOIN TRANSACTION_PAYBILL TRP1 ON TCP.TRANSACTION_PAYBILL_ID = TRP1.ID WHERE TRP1.ENTER_BILL_ID = OLD.ID_ENTER_BILL);


                   
                        UPDATE TRANSACTION_PAYBILL SET PAYMENT = 0.0,APPLIED_CREDITS = 0.0 WHERE ENTER_BILL_ID = OLD.ID_ENTER_BILL ;


                   
                        UPDATE TRANSACTION_CREDITS_AND_PAYMENTS SET AMOUNT_TO_USE = 0.0 WHERE ID_TRANSACTION_CREDITS_AND_PAYMENTS IN (SELECT TCP.ID FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP JOIN TRANSACTION_PAYBILL TRP ON TCP.TRANSACTION_PAYBILL_ID = TRP.ID WHERE TRP.ENTER_BILL_ID = OLD.ID_ENTER_BILL);
   
                END IF;
               

               
                        UPDATE ENTER_BILL SET PAYMENTS = TOTAL,BALANCE_DUE = 0.0 WHERE ID_ENTER_BILL = OLD.ID_ENTER_BILL;
               
            END IF;
                RETURN NEW;
                END IF;
            RETURN NULL;
            END;          
        $trigger_enterbill$ LANGUAGE plpgsql;
        </create>
        <drop>DROP FUNCTION IF EXIST function_enterbill</drop>
    </database-object>
    <database-object>
        <create>
        CREATE TRIGGER trigger_enterbill AFTER INSERT OR UPDATE OR DELETE ON ENTER_BILL FOR EACH ROW
        EXECUTE PROCEDURE function_enterbill();
        </create>
        <drop>DROP TRIGGER trigger_enterbill</drop>
    </database-object>
</hibernate-mapping>