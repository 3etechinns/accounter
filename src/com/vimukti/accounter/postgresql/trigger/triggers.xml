<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.vimukti.accounter.web.client.core"
	default-access="field">
	
	<!--  @author Devesh Satwani--><!--
	
	<database-object>
		<create> CREATE TRIGGER INSERT_INVOICE AFTER INSERT,UPDATE,DELETE ON
			INVOICE FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerInvoice" </create>
		<drop>DROP TRIGGER INSERT_INVOICE</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_CASHSALES AFTER INSERT,UPDATE,DELETE ON
			CASH_SALES FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerCashSales" </create>
		<drop>DROP TRIGGER INSERT_CASHSALES</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_ENTERBILL AFTER INSERT,UPDATE,DELETE ON
			ENTER_BILL FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerEnterBill" </create>
		<drop>DROP TRIGGER INSERT_ENTERBILL</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_CASHPURCHASE AFTER INSERT,UPDATE,DELETE
			ON CASH_PURCHASE FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerCashPurchase" </create>
		<drop>DROP TRIGGER INSERT_CASHPURCHASE</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_RECEIVE_PAYMENT AFTER
			INSERT,UPDATE,DELETE ON RECEIVE_PAYMENT FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerReceivePayment" </create>
		<drop>DROP TRIGGER INSERT_RECEIVE_PAYMENT</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_TRANSACTION_RECEIVE_PAYMENT AFTER
			INSERT,UPDATE,DELETE ON TRANSACTION_RECEIVE_PAYMENT FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerTransactionReceivePayment" 
		</create>
		<drop>DROP TRIGGER INSERT_TRANSACTION_RECEIVE_PAYMENT</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_TRANSACTION_CREDITS_AND_PAYMENTS AFTER
			INSERT,UPDATE,DELETE ON TRANSACTION_CREDITS_AND_PAYMENTS FOR EACH ROW
			CALL
			"com.vimukti.accounter.core.trigger.TriggerTransactionCreditsAndPayments" 
		</create>
		<drop>DROP TRIGGER INSERT_TRANSACTION_CREDITS_AND_PAYMENTS</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_PAY_BILL AFTER INSERT,UPDATE,DELETE ON
			PAY_BILL FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerPayBill" </create>
		<drop>DROP TRIGGER INSERT_PAY_BILL</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_CREDIT_CARD_CHARGES AFTER
			INSERT,UPDATE,DELETE ON CREDIT_CARD_CHARGES FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerCreditCardCharge" 
		</create>
		<drop>DROP TRIGGER INSERT_CREDIT_CARD_CHARGES</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_CUSTOMER_CREDIT_MEMO AFTER
			INSERT,UPDATE,DELETE ON CUSTOMER_CREDIT_MEMO FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerCustomerCreditMemo" 
		</create>
		<drop>DROP TRIGGER INSERT_CUSTOMER_CREDIT_MEMO</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_VENDOR_CREDIT_MEMO AFTER
			INSERT,UPDATE,DELETE ON VENDOR_CREDIT_MEMO FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerVendorCreditMemo" 
		</create>
		<drop>DROP TRIGGER INSERT_VENDOR_CREDIT_MEMO</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_TRANSFER_FUND AFTER
			INSERT,UPDATE,DELETE ON TRANSFER_FUND FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerTransferFund" </create>
		<drop>DROP TRIGGER INSERT_TRANSFER_FUND</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_TRANSACTION_ITEM AFTER
			INSERT,UPDATE,DELETE ON TRANSACTION_ITEM FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerTransactionItem" </create>
		<drop>DROP TRIGGER INSERT_TRANSACTION_ITEM</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_TRANSACTION_PAYBILL AFTER
			INSERT,UPDATE,DELETE ON TRANSACTION_PAYBILL FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerTransactionPayBill" 
		</create>
		<drop>DROP TRIGGER INSERT_TRANSACTION_PAYBILL</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_MAKE_DEPOSIT AFTER INSERT,UPDATE,DELETE
			ON MAKE_DEPOSIT FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerMakeDeposit" </create>
		<drop>DROP TRIGGER INSERT_MAKE_DEPOSIT</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_TRANSACTION_MAKE_DEPOSIT AFTER
			INSERT,UPDATE,DELETE ON TRANSACTION_MAKE_DEPOSIT FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerTransactionMakeDeposit" 
		</create>
		<drop>DROP TRIGGER INSERT_TRANSACTION_MAKE_DEPOSIT</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_WRITE_CHECKS AFTER INSERT,UPDATE,DELETE
			ON WRITE_CHECKS FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerWriteCheck" </create>
		<drop>DROP TRIGGER INSERT_WRITE_CHECKS</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_ACCOUNT AFTER INSERT,UPDATE,DELETE ON
			ACCOUNT FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerAccount" </create>
		<drop>DROP TRIGGER INSERT_ACCOUNT</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_CUSTOMER_REFUND AFTER
			INSERT,UPDATE,DELETE ON CUSTOMER_REFUND FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerCustomerRefund" </create>
		<drop>DROP TRIGGER INSERT_CUSTOMER_REFUND</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_ISSUE_PAYMENT AFTER
			INSERT,UPDATE,DELETE ON ISSUEPAYMENT FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerIssuePayment" </create>
		<drop>DROP TRIGGER INSERT_ISSUE_PAYMENT</drop>
	</database-object>
	-->
	
	<database-object>
		<create> CREATE TRIGGER INSERT_CUSTOMER AFTER
			INSERT ON CUSTOMER FOR EACH ROW
			BEGIN
			UPDATE ACCOUNT A SET A.OPENING_BALANCE = A.OPENING_BALANCE + NEW.BALANCE,A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.BALANCE,A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.BALANCE WHERE A.ID = NEW.ACCOUNTS_RECEIVABLE_ID;
			END
		 </create>
		<drop>DROP TRIGGER INSERT_CUSTOMER</drop>
	</database-object>
	
	<database-object>
		<create> CREATE TRIGGER INSERT_VENDOR AFTER
			INSERT ON VENDOR FOR EACH ROW
			BEGIN
			UPDATE ACCOUNT A SET A.OPENING_BALANCE = A.OPENING_BALANCE + NEW.BALANCE,A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.BALANCE,A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.BALANCE WHERE A.ID = NEW.ACCOUNTS_PAYABLE_ID;
			END
		 </create>
		<drop>DROP TRIGGER INSERT_VENDOR</drop>
	</database-object>
	
	<database-object>
		<create> 
		
		CREATE TRIGGER INSERT_CASH_SALES AFTER INSERT ON CASH_SALES FOR EACH ROW
		BEGIN
		
		DECLARE accountType INT;
		DECLARE newDepositInAccountId BIGINT;
		SET newDepositInAccountId = NEW.DEPOSIT_IN_ACCOUNT_ID; 
		CALL getAccountType(@newDepositInAccountId,@accountType);
		
		
		
		IF (select @accountType) = 12 THEN
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE - NEW.TOTAL WHERE A.ID = newDepositInAccountId;
		
		ELSE 
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.TOTAL WHERE A.ID = newDepositInAccountId;
		END IF;
		
		
		
		INSERT INTO ACCOUNT_TRANSACTION (T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID= NEW.ID),1,newDepositInAccountId,NEW.ID,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID= NEW.ID),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID= NEW.ID),(CASE WHEN (SELECT A.A_TYPE FROM ACCOUNT A WHERE A.ID = newDepositInAccountId)= 12 THEN -1* NEW.TOTAL ELSE NEW.TOTAL END ));
		
		
		
		IF NEW.TAXGROUP_ID  IS NOT NULL AND NEW.ALL_TAXABLE_LINE_TOTAL != 0.0 THEN
		
		
			INSERT INTO TAX_RATE_CALCULATION  (TAXAGENCY_ACCOUNT_ID,RATE,TRANSACTION_ID,TRANSACTION_TYPE,TAX_CODE_ID,TOTAL,TAXABLE_AMOUNT,NON_TAXABLE_AMOUNT,TAX_COLLECTED,TAXAGENCY_ID)(SELECT TA.ACCOUNT_ID,TR.RATE,NEW.ID, 1 , TC.ID , NEW.TOTAL , NEW.ALL_TAXABLE_LINE_TOTAL , (NEW.ALL_LINE_TOTAL - NEW.ALL_TAXABLE_LINE_TOTAL) , NEW.ALL_TAXABLE_LINE_TOTAL * (TR.RATE /100),TA.ID  FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID JOIN TAXCODE TC ON TC.ID=TR.TAXCODE_ID JOIN TAXAGENCY TA ON TA.ID = TC.TAXAGENCY_ID WHERE TG.ID = NEW.TAXGROUP_ID AND TR.AS_OF IN (SELECT MAX(TR1.AS_OF) FROM TAXRATES TR1 WHERE TR1.ID IN (SELECT (TR.ID) FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID) AND TR1.AS_OF &lt;= (SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID= NEW.ID) GROUP BY TR1.TAXCODE_ID));
			
			
			UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , A.TOTAL_BALANCE = A.TOTAL_BALANCE  + NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =NEW.ID);
			
			
			INSERT INTO ACCOUNT_TRANSACTION  (T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) (SELECT (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID=NEW.ID),1,TT.ACCOUNT_ID,NEW.ID,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID=NEW.ID),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID=NEW.ID),(NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = TT.ACCOUNT_ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100) FROM TAXAGENCY TT WHERE TT.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID));
			
			UPDATE TAXAGENCY A SET A.BALANCE = A.BALANCE + NEW.ALL_TAXABLE_LINE_TOTAL * (SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ID = A.ID )/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID);
			
			
			INSERT INTO ACCOUNT_TRANSACTION  (T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) (SELECT (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID= NEW.ID ), 4,TT.ID,NEW.ID,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID=NEW.ID),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID=NEW.ID),(NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID AND TRC.TAXAGENCY_ID = TT.ID)/100) FROM TAXAGENCY TT WHERE TT.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID));
			
		
		
		
		END IF;
		
		
		END

		 </create>
		<drop>DROP TRIGGER INSERT_CASH_SALES</drop>
	</database-object>
	
	
	<database-object>
		<create>
		CREATE TRIGGER UPDATE_CASH_SALES AFTER UPDATE ON CASH_SALES FOR EACH ROW
		BEGIN
		
		DECLARE accountType INT;
		DECLARE oldDepositInAccountId BIGINT;
		
		
		IF OLD.IS_VOID != NEW.IS_VOID THEN
		
		DELETE FROM ACCOUNT_TRANSACTION WHERE T_ID = NEW.ID;
		
		SET oldDepositInAccountId = OLD.DEPOSIT_IN_ACCOUNT_ID ;
		CALL getAccountType(@oldDepositInAccountId,@accountType);
		
			
		IF (select @accountType) = 12 THEN
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.TOTAL WHERE A.ID = oldDepositInAccountId;
		
		ELSE 
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE - NEW.TOTAL WHERE A.ID = oldDepositInAccountId;
		END IF;
		
		
		IF NEW.TAXGROUP_ID  IS NOT NULL AND NEW.ALL_TAXABLE_LINE_TOTAL != 0.0 THEN
		
		
		INSERT INTO TAX_RATE_CALCULATION  (TAXAGENCY_ACCOUNT_ID,RATE,TRANSACTION_ID,TRANSACTION_TYPE,TAX_CODE_ID,TOTAL,TAXABLE_AMOUNT,NON_TAXABLE_AMOUNT,TAX_COLLECTED,TAXAGENCY_ID)(SELECT TA.ACCOUNT_ID,TR.RATE,NEW.ID, 1 , TC.ID , NEW.TOTAL , NEW.ALL_TAXABLE_LINE_TOTAL , (NEW.ALL_LINE_TOTAL - NEW.ALL_TAXABLE_LINE_TOTAL) , NEW.ALL_TAXABLE_LINE_TOTAL * (TR.RATE /100),TA.ID  FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID JOIN TAXCODE TC ON TC.ID=TR.TAXCODE_ID JOIN TAXAGENCY TA ON TA.ID = TC.TAXAGENCY_ID WHERE TG.ID = NEW.TAXGROUP_ID AND TR.AS_OF IN (SELECT MAX(TR1.AS_OF) FROM TAXRATES TR1 WHERE TR1.ID IN (SELECT (TR.ID) FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID) AND TR1.AS_OF &lt;= (SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID= NEW.ID) GROUP BY TR1.TAXCODE_ID));
		
		
		
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , A.TOTAL_BALANCE = A.TOTAL_BALANCE  - NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =NEW.ID);
		
		
		
		UPDATE TAXAGENCY A SET A.BALANCE = A.BALANCE - NEW.ALL_TAXABLE_LINE_TOTAL * (SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ID = A.ID )/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID);
		
		
		DELETE FROM TAX_RATE_CALCULATION WHERE TRANSACTION_ID =NEW.ID;
		
		END IF;
		
		
		END IF;
		
		
		END
		
		</create>
		<drop>DROP TRIGGER UPDATE_CASH_SALES</drop>
	</database-object>
	
	
	
	<!--<database-object>
		<create> CREATE TRIGGER INSERT_VENDOR AFTER
			INSERT,UPDATE,DELETE ON VENDOR FOR EACH ROW CALL
			"com.vimukti.accounter.core.trigger.TriggerVendor" </create>
		<drop>DROP TRIGGER INSERT_VENDOR</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_ENTRY AFTER
			INSERT,UPDATE,DELETE ON ENTRY FOR EACH ROW
			CALL
			"com.vimukti.accounter.core.trigger.TriggerEntry" 
		</create>
		<drop>DROP TRIGGER INSERT_ENTRY</drop>
	</database-object>
	<database-object>
		<create> CREATE TRIGGER INSERT_FISCAL_YEAR AFTER
			INSERT,UPDATE,DELETE ON FISCAL_YEAR FOR EACH ROW
			CALL
			"com.vimukti.accounter.core.trigger.TriggerFiscalYear" 
		</create>
		<drop>DROP TRIGGER INSERT_FISCAL_YEAR</drop>
	</database-object>
--></hibernate-mapping>