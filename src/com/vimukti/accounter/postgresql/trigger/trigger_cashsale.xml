<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field">

<!-- Trigger Cash Sale for After Insert -->

	
	<database-object>
		<create>
		CREATE OR REPLACE FUNCTION function_cashsale() RETURNS TRIGGER as	
		$trigger_cashsale$
		
			DECLARE 
		
			accountType INTEGER;
			newDepositInAccountId BIGINT; 
			oldDepositInAccountId BIGINT;
			
			
			BEGIN
				
			
				IF TG_OP='INSERT' THEN	
				
					newDepositInAccountId :=NEW.DEPOSIT_IN_ACCOUNT_ID;
					accountType := getAccountType(newDepositInAccountId);
					
					
					IF accountType = 12 THEN
					
						UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - NEW.TOTAL, TOTAL_BALANCE = TOTAL_BALANCE - NEW.TOTAL WHERE ID_ACCOUNT = newDepositInAccountId;
			
					ELSE 
			
						UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + NEW.TOTAL, TOTAL_BALANCE = TOTAL_BALANCE + NEW.TOTAL WHERE ID_ACCOUNT = newDepositInAccountId;
					END IF;
			
			
					 
					INSERT INTO ACCOUNT_TRANSACTION (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT NEXTVAL('sequence_account_transaction')),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_CASH_SALES),1,newDepositInAccountId,NEW.ID_CASH_SALES,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_CASH_SALES),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_CASH_SALES),(CASE WHEN (SELECT A.A_TYPE FROM ACCOUNT A WHERE A.ID_ACCOUNT = newDepositInAccountId)= 12 THEN -1* NEW.TOTAL ELSE NEW.TOTAL END ));
		
		
		
					IF NEW.TAXGROUP_ID  IS NOT NULL AND NEW.ALL_TAXABLE_LINE_TOTAL != 0.0 THEN
						
						INSERT INTO TAX_RATE_CALCULATION  (ID_TAX_RATE_CALCULATION,TAXAGENCY_ACCOUNT_ID,RATE,TRANSACTION_ID,TRANSACTION_TYPE,TAX_CODE_ID,TOTAL,TAXABLE_AMOUNT,NON_TAXABLE_AMOUNT,TAX_COLLECTED,TAXAGENCY_ID)(SELECT NEXTVAL('sequence_taxrate_calculation'), TA.ACCOUNT_ID,TR.RATE,NEW.ID_CASH_SALES, 1 , TC.ID_TAXCODE , NEW.TOTAL , NEW.ALL_TAXABLE_LINE_TOTAL , (NEW.ALL_LINE_TOTAL - NEW.ALL_TAXABLE_LINE_TOTAL) , NEW.ALL_TAXABLE_LINE_TOTAL * (TR.RATE /100),TA.ID_TAXAGENCY FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID_TAXGROUP JOIN TAXCODE TC ON TC.ID_TAXCODE=TR.TAXCODE_ID JOIN TAXAGENCY TA ON TA.ID_TAXAGENCY = TC.TAXAGENCY_ID WHERE TG.ID_TAXGROUP = NEW.TAXGROUP_ID AND TR.AS_OF IN (SELECT MAX(TR1.AS_OF) FROM TAXRATES TR1 WHERE TR1.ID_TAXRATES IN (SELECT (TR.ID_TAXRATES) FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID_TAXGROUP) AND TR1.AS_OF &lt;= (SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_CASH_SALES) GROUP BY TR1.TAXCODE_ID));
					
					 	UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , TOTAL_BALANCE = TOTAL_BALANCE  + NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE ID_ACCOUNT IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =NEW.ID_CASH_SALES);
						 
						INSERT INTO ACCOUNT_TRANSACTION  (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) (SELECT NEXTVAL('sequence_account_transaction'),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_CASH_SALES),1,TT.ACCOUNT_ID,NEW.ID_CASH_SALES,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_CASH_SALES),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_CASH_SALES),(NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ACCOUNT_ID = TT.ACCOUNT_ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100) FROM TAXAGENCY TT WHERE TT.ACCOUNT_ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID_CASH_SALES) GROUP BY TT.ACCOUNT_ID);
						
						UPDATE TAXAGENCY SET BALANCE = BALANCE + NEW.ALL_TAXABLE_LINE_TOTAL * (SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ID = ID_TAXAGENCY GROUP BY TRC.TAXAGENCY_ID)/100 WHERE ID_TAXAGENCY IN (SELECT TRC.TAXAGENCY_ID FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID_CASH_SALES);
									
						INSERT INTO ACCOUNT_TRANSACTION  (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) (SELECT NEXTVAL('sequence_account_transaction'), (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION= NEW.ID_CASH_SALES), 4,TT.ID_TAXAGENCY,NEW.ID_CASH_SALES,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_CASH_SALES),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_CASH_SALES),(NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ID = TT.ID_TAXAGENCY)/100) FROM TAXAGENCY TT WHERE TT.ID_TAXAGENCY IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID_CASH_SALES));
					
						INSERT INTO PAY_SALES_TAX_ENTRIES (ID_PAY_SALES_TAX_ENTRIES,T_ID,T_DATE,TAXCODE_ID,TAXAGENCY_ID,AMOUNT,BALANCE)(SELECT NEXTVAL('sequence_paysalestax_entries'), NEW.ID_CASH_SALES,(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=NEW.ID_CASH_SALES),TRC.TAX_CODE_ID,TRC.TAXAGENCY_ID,TRC.TAXABLE_AMOUNT,TRC.TAXABLE_AMOUNT FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID_CASH_SALES);
						 
						
					END IF;
			
				RETURN NEW;
				END IF;
			
				IF TG_OP='UPDATE' THEN	
				
					newDepositInAccountId :=NEW.DEPOSIT_IN_ACCOUNT_ID;
					oldDepositInAccountId :=OLD.DEPOSIT_IN_ACCOUNT_ID;
					IF OLD.IS_VOID != NEW.IS_VOID THEN
					
						DELETE FROM ACCOUNT_TRANSACTION WHERE T_ID = NEW.ID;
					
						accountType := getAccountType(oldDepositInAccountId);
						
						IF accountType = 12 THEN
						
							UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + NEW.TOTAL, TOTAL_BALANCE = TOTAL_BALANCE + NEW.TOTAL WHERE ID = oldDepositInAccountId;
			
						ELSE 
			
							UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - NEW.TOTAL, TOTAL_BALANCE = TOTAL_BALANCE - NEW.TOTAL WHERE ID = oldDepositInAccountId;
						END IF;
			
			
						IF NEW.TAXGROUP_ID  IS NOT NULL AND NEW.ALL_TAXABLE_LINE_TOTAL != 0.0 THEN
			
							
							UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ACCOUNT_ID = ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , TOTAL_BALANCE = TOTAL_BALANCE  - NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ACCOUNT_ID = ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =NEW.ID);
			
							UPDATE TAXAGENCY SET BALANCE = BALANCE - NEW.ALL_TAXABLE_LINE_TOTAL * (SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID_CASH_SALES AND TRC.TAXAGENCY_ID = ID )/100 WHERE ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID);
					
			
							DELETE FROM TAX_RATE_CALCULATION WHERE TRANSACTION_ID =NEW.ID;
			
					
						END IF;
					
					
					END IF;
				RETURN NEW;
				END IF;
			RETURN NULL;
			END;	
		
		$trigger_cashsale$ LANGUAGE plpgsql;
		</create>
		<drop>DROP FUNCTION IF EXIST function_cashsale</drop>
	</database-object>
	
	
	<database-object>
		<create> 
		CREATE TRIGGER trigger_cashsale AFTER INSERT OR UPDATE OR DELETE ON CASH_SALES FOR EACH ROW
		EXECUTE PROCEDURE function_cashsale();
		
		</create>
		<drop>DROP TRIGGER trigger_cashsale</drop>
	</database-object>
	
	
</hibernate-mapping>