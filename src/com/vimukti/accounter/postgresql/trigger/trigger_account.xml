<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field">


	<database-object>
		<create> 
		CREATE OR REPLACE FUNCTION function_account() RETURNS TRIGGER as	
		$trigger_account$
		
		DECLARE 
		
			accountName VARCHAR;
			accountType INTEGER;
			companyId BIGINT;
			status BOOLEAN;
			openingBalance VARCHAR := 'Opening Balances';
			
		BEGIN
				
			
			IF TG_OP='INSERT' THEN		<!-- Trigger Account for After Insert -->
					
					<!-- // Making this account opening balance as un editable if the account fall under following type -->		
					
					 
					IF NEW.OPENING_BALANCE != 0.0 OR NEW.A_TYPE = 9 THEN 
						UPDATE ACCOUNT SET IS_OPENING_BALANCE_EDITABLE = FALSE WHERE ID_ACCOUNT = NEW.ID_ACCOUNT;
					END IF;
					
					
					SELECT NAME INTO accountName FROM ACCOUNT WHERE ID_ACCOUNT =NEW.ID_ACCOUNT;
					
					IF NEW.OPENING_BALANCE != 0.0 AND accountName != openingBalance THEN
									
						accountType := NEW.A_TYPE;
						companyId := NEW.COMPANY_ID;
						
						<!-- 
						// To check whether the new Account is one of the following
						// types or not. If yes then we need to Increase the opening
						// balance amount, current balance amount and the total balance
						// amount of the Opening Balances Account with the opening
						// balance amount of the new Account
						 -->
						
						IF (accountType = 3) OR (accountType = 4) OR (accountType = 5) OR (accountType = 6) OR (accountType = 7) OR (accountType = 8) OR (accountType = 9) OR (accountType = 10) OR (accountType = 11) OR (accountType = 17) THEN
								
								
							<!--
							// Query to Increase the opening balance amount, current
							// balance amount and the total balance amount of the
							// Opening Balances Account with the opening balance amount
							// of the Opening Balances Account
							-->
								
								
							UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + NEW.OPENING_BALANCE, TOTAL_BALANCE = TOTAL_BALANCE + NEW.OPENING_BALANCE WHERE NAME = openingBalance AND COMPANY_ID = NEW.COMPANY_ID;
									
							<!-- 
							// To check whether the new Account is one of the following
							// types or not. If yes then we need to Decrease the opening
							// balance amount, current balance amount and the total balance
							// amount of the Opening Balances Account with the opening
							// balance amount of the New Account
							// If the new Account is of Equity type and it's parent is not
							// null then we will follow different approach
							 -->
							
						
						ELSEIF accountType = 1 OR accountType = 2 OR accountType = 12 OR accountType = 13 OR accountType = 14 OR accountType = 15 OR accountType = 16 OR accountType = 18  THEN
									
							<!-- 
							// To check the type of new Account is Equity and the parent is not null or not
							 -->
							IF NEW.PARENT_ID IS NOT NULL AND accountType = 16 THEN
						
								<!-- 
								// To check whether the Parent of the new Account is
								// Opening Balances Account or one of the sub level of
								// the Opening Balances Account
								-->
							
								status := isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID);
						
								IF NEW.PARENT_ID = 1 OR status = TRUE THEN 
						
									<!-- 
										// then we will change the opening balance amount
										// and current balance amount of Opening Balances
										// account.
									
									 -->
								
									UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - NEW.OPENING_BALANCE WHERE NAME = openingBalance AND COMPANY_ID = companyId;
						
									<!-- 
										// Here we will change the total balance amount of
										// this new Account if it's parent is not Opening
										// Balances Account but one of the sub account of
										// the Opening Banaces Account
									 -->
									status := isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID);
						
									IF NEW.PARENT_ID != 1 AND status = TRUE THEN
						
										UPDATE ACCOUNT SET TOTAL_BALANCE = TOTAL_BALANCE - NEW.OPENING_BALANCE WHERE NAME = openingBalance AND COMPANY_ID = companyId;
					
					
									END IF;
									
								ELSE 
				
								<!-- 
								// Query to Decrease the opening balance amount, current
								// balance amount and the total balance amount of the
								// Opening Balances Account with the opening balance
								// amount of the New Account
								-->
				
								UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - NEW.OPENING_BALANCE, TOTAL_BALANCE = TOTAL_BALANCE - NEW.OPENING_BALANCE WHERE NAME = openingBalance AND COMPANY_ID = companyId;
								
								
								END IF;
					
							ELSE 
				
								<!-- 
								// Query to Decrease the opening balance amount, current
								// balance amount and the total balance amount of the
								// Opening Balances Account with the opening balance
								// amount of the New Account
								-->
				
								UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - NEW.OPENING_BALANCE, TOTAL_BALANCE = TOTAL_BALANCE - NEW.OPENING_BALANCE WHERE NAME = openingBalance AND COMPANY_ID = companyId;
								
							END IF;
						END IF;
					END IF	;
					
						<!-- 
						// To check if the Parent of the new Account is not null and not the Opening Balances Account or not
						 -->
					
						IF NEW.PARENT_ID IS NOT NULL AND NEW.PARENT_ID != 1 THEN
					
							<!-- 
								// Query to Increase the total balance amount of the parent
								// Account with the total balance amount of the new Account
							 -->
						
							UPDATE ACCOUNT SET TOTAL_BALANCE = TOTAL_BALANCE + NEW.TOTAL_BALANCE WHERE ID_ACCOUNT = NEW.PARENT_ID;
						END IF;
				RETURN NEW;
			END IF;
					
			IF TG_OP='UPDATE' THEN <!-- Trigger Account for After Update -->
			
			
				IF OLD.IS_OPENING_BALANCE_EDITABLE = NEW.IS_OPENING_BALANCE_EDITABLE THEN
				
				<!-- // Making this account opening balance as un editable if the account fall under following type  -->
					
					IF OLD.OPENING_BALANCE != NEW.OPENING_BALANCE AND OLD.IS_OPENING_BALANCE_EDITABLE = TRUE THEN
					
						
							UPDATE ACCOUNT SET IS_OPENING_BALANCE_EDITABLE = FALSE WHERE ID_ACCOUNT = OLD.ID_ACCOUNT;
						
						
					END IF;
					
					
					SELECT NAME INTO accountName FROM ACCOUNT WHERE ID_ACCOUNT =OLD.ID_ACCOUNT;
					
					<!-- 
					// To check whether this Account is Opening Balances account or not
					// and opening balance amount of old Account and new account are
					// equal or not
					 -->
					IF OLD.OPENING_BALANCE != NEW.OPENING_BALANCE AND accountName != openingBalance THEN
					
									
						accountType := NEW.A_TYPE;
						companyId := NEW.COMPANY_ID;
						
						<!-- 
						// To check whether the updated Account is one of the following
						// types or not. If yes then we need to Increase the opening
						// balance amount, current balance amount and the total balance
						// amount of the Opening Balances Account with the difference
						// amount of the old and new opening balances amount of the
						// updated Account
						 -->
						
						IF accountType = 3 OR accountType = 4 OR accountType = 5 OR accountType = 6 OR accountType = 7 OR accountType = 8 OR accountType = 9 OR accountType = 10 OR accountType = 11 OR accountType = 17 THEN
								
							<!--
							// Query to Increase the opening balance amount, current
							// balance amount and the total balance amount of the
							// Opening Balances Account with the difference amount of
							// the old and new opening balances amount of the updated
							// Account
							-->
								
								
							UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + (NEW.OPENING_BALANCE - OLD.OPENING_BALANCE), TOTAL_BALANCE = TOTAL_BALANCE + (NEW.OPENING_BALANCE - OLD.OPENING_BALANCE) WHERE NAME = openingBalance AND COMPANY_ID = NEW.COMPANY_ID;
									
							<!-- 
								// To check whether the updated Account is one of the following
								// types or not. If yes then we need to Decrease the opening
								// balance amount, current balance amount and the total balance
								// amount of the Opening Balances Account with the difference
								// amount of new and old opening balances amounts of the updated
								// Account
								// If the updated Account is of Equity type and it's parent is
								// not null then we will follow different approach
							 -->
							
						
						ELSEIF accountType = 1 OR accountType = 2 OR accountType = 12 OR accountType = 13 OR accountType = 14 OR accountType = 15 OR accountType = 16 OR accountType = 18  THEN
									
							<!-- 
								// To check the type of updated Account is Equity and the
								// parent is not null or not
							 -->
							IF NEW.PARENT_ID IS NOT NULL AND accountType = 16 THEN
						
								<!-- 
								// To check whether the Parent of the new Account is
								// Opening Balances Account or one of the sub level of
								// the Opening Balances Account
								-->
							
								status := isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID);
						
								IF NEW.PARENT_ID = 1 OR status = TRUE THEN 
						
									<!-- 
										// then we will change the opening balance amount
										// and current balance amount of Opening Balances
										// account.
									
									 -->
								
									UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - NEW.OPENING_BALANCE WHERE NAME = openingBalance AND COMPANY_ID = companyId;
						
									<!-- 
									// Here we will change the total balance amount of
									// this updated Account if it's parent is not
									// Opening Balances Account but one of the sub
									// account of the Opening Banaces Account
									
									 
									CALL isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID, @status);
									 -->
									IF NEW.PARENT_ID != 1 AND status = TRUE THEN
						
										UPDATE ACCOUNT SET TOTAL_BALANCE = TOTAL_BALANCE - NEW.OPENING_BALANCE WHERE NAME = openingBalance AND COMPANY_ID = companyId;
					
					
									END IF;
									
								ELSE 
				
								<!-- 
								// Query to Decrease the opening balance amount, current
								// balance amount and the total balance amount of the
								// Opening Balances Account with the opening balance
								// amount of the updated Account
								-->
				
								UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - (NEW.OPENING_BALANCE + OLD.OPENING_BALANCE), TOTAL_BALANCE = TOTAL_BALANCE - (NEW.OPENING_BALANCE + OLD.OPENING_BALANCE) WHERE NAME = openingBalance AND COMPANY_ID = companyId;
									
									
								
								END IF;
							ELSE 
				
								<!-- 
								// Query to Decrease the opening balance amount, current
								// balance amount and the total balance amount of the
								// Opening Balances Account with the opening balance
								// amount of the updated Account
								-->
				
								UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - (NEW.OPENING_BALANCE - OLD.OPENING_BALANCE), TOTAL_BALANCE = TOTAL_BALANCE - (NEW.OPENING_BALANCE - OLD.OPENING_BALANCE) WHERE NAME = openingBalance AND COMPANY_ID = companyId;
								
							END IF;
						END IF;
					END IF	;
					
						<!-- 
						// To check if the Parent of the Updated Account is not null and not
						// the Opening Balances Account or not
						 -->
					
						IF OLD.PARENT_ID NOTNULL AND (OLD.PARENT_ID != 1 OR OLD.OPENING_BALANCE != NEW.OPENING_BALANCE) THEN
							<!-- 
								// Query to Increase the total balance amount of the parent
								// Account with the difference of old and new total balance amount of the updated Account
							-->
						
							UPDATE ACCOUNT SET TOTAL_BALANCE = TOTAL_BALANCE + (NEW.TOTAL_BALANCE - OLD.TOTAL_BALANCE) WHERE ID_ACCOUNT = OLD.PARENT_ID;
						END IF;
				END IF;
				RETURN NEW;
			END IF;
			RETURN NULL;
		END;
			
		$trigger_account$ LANGUAGE plpgsql;
	
	
	
		 </create>
		<drop>DROP FUNCTION IF EXIST function_account</drop>
	</database-object>
	
	
	
	
	<database-object>
		<create> 
			
		CREATE TRIGGER trigger_account AFTER INSERT OR UPDATE OR DELETE ON ACCOUNT FOR EACH ROW
		EXECUTE PROCEDURE function_account();
		
	
		 </create>
		<drop>DROP TRIGGER trigger_account</drop>
	</database-object>
	
	
</hibernate-mapping>