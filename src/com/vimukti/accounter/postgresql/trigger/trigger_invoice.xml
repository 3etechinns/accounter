<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field">

<!-- Trigger Cash Sale for After Insert -->
	<database-object>
		<create> 
		CREATE OR REPLACE FUNCTION function_invoice() RETURNS TRIGGER as	
	$trigger_invoice$

		DECLARE 

		newInvoiceId BIGINT;
		oldInvoiceId BIGINT;
		newCustomerId BIGINT;
		oldCustomerId BIGINT;
		newAllLineTotal DOUBLE PRECISION;
		oldAllLineTotal DOUBLE PRECISION;
		newAllTaxableLineTotal DOUBLE PRECISION;
		oldAllTaxableLineTotal DOUBLE PRECISION;
		newTaxGroupId BIGINT;
		oldTaxGroupId BIGINT;
		newTotal DOUBLE PRECISION;
		oldTotal DOUBLE PRECISION;
		newIsVoid BOOLEAN;
		oldIsVoid BOOLEAN;
		newAccountsReceivableId BIGINT;
		oldAccountsReceivableId BIGINT;
		newEstimateId BIGINT;
		oldEstimateId BIGINT;

		countNo INTEGER;
	
		BEGIN
		
			<!--  Condition for checking whether this Trigger call is for new Row Insertion -->
			IF TG_OP='INSERT' THEN	
		
				newInvoiceId := NEW.ID_INVOICE;
				newCustomerId := NEW.CUSTOMER_ID;
				newAllLineTotal := NEW.ALL_LINE_TOTAL;
				newAllTaxableLineTotal := NEW.ALL_TAXABLE_LINE_TOTAL;
				newTaxGroupId := NEW.TAXGROUP_ID;
				newTotal := NEW.TOTAL;
				newIsVoid := NEW.IS_VOID;
				newAccountsReceivableId := NEW.ACCOUNTS_RECEIVABLE_ID;
				newEstimateId := NEW.ESTIMATE_ID;

				<!--  Updating the AccountsReceivable account with Invoice amount. -->
				UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + newTotal, TOTAL_BALANCE = TOTAL_BALANCE + newTotal WHERE ID_ACCOUNT = newAccountsReceivableId;
				<!--  inserting the corresponding rows into Account Transaction table -->
				
				INSERT INTO ACCOUNT_TRANSACTION (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT NEXTVAL('sequence_account_transaction')),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),1,newAccountsReceivableId,newInvoiceId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),newTotal);



				<!-- Updating the Corresponding Customer Balance with Invoice amount -->
				UPDATE CUSTOMER SET BALANCE = BALANCE + newTotal WHERE ID_CUSTOMER = newCustomerId;				
				

				<!--  inserting the corresponding rows into Account Transaction table -->

				INSERT INTO ACCOUNT_TRANSACTION (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT NEXTVAL('sequence_account_transaction')),(SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),2, newCustomerId ,newInvoiceId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),newTotal);


				<!-- Updating the Corresponding TaxGroup's TaxCode's TaxAgency Account Balance with allTaxable Line total if we select any TaxGroup. -->
				
				
				IF (newTaxGroupId IS NOT NULL) AND (newAllTaxableLineTotal != 0.0) THEN

					<!-- Insert the TaxGroup Information in to TAX_RATE_CALCULATION table. -->
					INSERT INTO TAX_RATE_CALCULATION  (ID_TAX_RATE_CALCULATION,TAXAGENCY_ACCOUNT_ID,RATE,TRANSACTION_ID,TRANSACTION_TYPE,TAX_CODE_ID,TOTAL,TAXABLE_AMOUNT,NON_TAXABLE_AMOUNT,TAX_COLLECTED,TAXAGENCY_ID)(SELECT NEXTVAL('sequence_taxrate_calculation'), TA.ACCOUNT_ID,TR.RATE,newInvoiceId, 8 , TC.ID_TAXCODE , newTotal , newAllTaxableLineTotal , newAllLineTotal - newAllTaxableLineTotal , newAllTaxableLineTotal * (TR.RATE /100),TA.ID_TAXAGENCY  FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG  ON TGTC.TAXGROUP_ID = TG.ID_TAXGROUP JOIN TAXCODE TC ON TC.ID_TAXCODE=TR.TAXCODE_ID JOIN TAXAGENCY TA ON TA.ID_TAXAGENCY = TC.TAXAGENCY_ID WHERE  TG.ID_TAXGROUP = newTaxGroupId AND TR.AS_OF IN (SELECT MAX(TR1.AS_OF) FROM TAXRATES TR1 WHERE TR1.ID_TAXRATES IN (SELECT (TR.ID_TAXRATES) FROM TAXRATES TR JOIN  TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID_TAXGROUP) AND  TR1.AS_OF &lt;= (SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId) GROUP BY TR1.TAXCODE_ID) );

					<!--  Updating the TaxAgency Accounts with the Sales Tax amount. -->
					UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE + newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newInvoiceId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , TOTAL_BALANCE = TOTAL_BALANCE + newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newInvoiceId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE ID_ACCOUNT IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =newInvoiceId);					
					 
					
					<!--  inserting the corresponding rows into Account Transaction table -->
					
					INSERT INTO ACCOUNT_TRANSACTION  (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT)(SELECT NEXTVAL('sequence_account_transaction'), (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),1,TT.ACCOUNT_ID,newInvoiceId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),(newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId AND TRC.TAXAGENCY_ACCOUNT_ID = TT.ACCOUNT_ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100) FROM TAXAGENCY TT WHERE TT.ACCOUNT_ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId) GROUP BY TT.ACCOUNT_ID);
					
					<!-- updating the balance of corresponding tax agency -->
					UPDATE TAXAGENCY SET BALANCE = BALANCE + newAllTaxableLineTotal* (SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId AND TRC.TAXAGENCY_ID = ID_TAXAGENCY  GROUP BY TRC.TAXAGENCY_ID)/100 WHERE ID_TAXAGENCY IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId);
					
					<!--  inserting the corresponding rows into Account Transaction table -->
					INSERT INTO ACCOUNT_TRANSACTION  (ID_ACCOUNT_TRANSACTION,T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT)(SELECT NEXTVAL('sequence_account_transaction'), (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),4,TT.ID_TAXAGENCY,newInvoiceId,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),(newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId AND TRC.TAXAGENCY_ID = TT.ID_TAXAGENCY)/100) FROM TAXAGENCY TT WHERE TT.ID_TAXAGENCY IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId));

					<!-- Inserting the corresponding rows into PaySalesTaxEntries table. -->
					INSERT INTO PAY_SALES_TAX_ENTRIES (ID_PAY_SALES_TAX_ENTRIES, T_ID,T_DATE,TAXCODE_ID,TAXAGENCY_ID,AMOUNT,BALANCE)(SELECT NEXTVAL('sequence_paysalestax_entries'), newInvoiceId,(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID_TRANSACTION=newInvoiceId),TRC.TAX_CODE_ID,TRC.TAXAGENCY_ID,TRC.TAXABLE_AMOUNT,TRC.TAXABLE_AMOUNT FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId);


					
				END IF;

				IF newEstimateId IS NOT NULL THEN 
					<!-- To Mark the Estimate as Invoiced. -->
					UPDATE ESTIMATE SET IS_TURNED_TO_INVOICE = TRUE WHERE ID_ESTIMATE = newEstimateId;

					<!-- To update the status of the Estimate as Accepted.  -->
					UPDATE TRANSACTION SET STATUS = 2 WHERE ID_TRANSACTION = newEstimateId;


				END IF;

			RETURN NEW;
			END IF;

			<!--  Condition for checking whether this Trigger call is for Row Updation -->
			IF TG_OP='UPDATE' THEN	
		
				newInvoiceId := NEW.ID_INVOICE;
				oldInvoiceId := OLD.ID_INVOICE;
				newCustomerId := NEW.CUSTOMER_ID;
				oldCustomerId := OLD.CUSTOMER_ID;
				newAllLineTotal := NEW.ALL_LINE_TOTAL;
				oldAllLineTotal := OLD.ALL_LINE_TOTAL;
				newAllTaxableLineTotal := NEW.ALL_TAXABLE_LINE_TOTAL;
				oldAllTaxableLineTotal := OLD.ALL_TAXABLE_LINE_TOTAL;
				newTaxGroupId := NEW.TAXGROUP_ID;
				oldTaxGroupId := OLD.TAXGROUP_ID;
				newTotal := NEW.TOTAL;
				oldTotal := OLD.TOTAL;
				newIsVoid := NEW.IS_VOID;
				oldIsVoid := OLD.IS_VOID;
				newAccountsReceivableId := NEW.ACCOUNTS_RECEIVABLE_ID;
				oldAccountsReceivableId := OLD.ACCOUNTS_RECEIVABLE_ID;
				newEstimateId := NEW.ESTIMATE_ID;
				oldEstimateId := OLD.ESTIMATE_ID;


				<!--  To check whether this updation is caused by Voiding the Invoice or not. -->
				IF oldIsVoid != newIsVoid THEN

					<!-- Deleting corresponding transaction rows from Account Transaction table -->

					DELETE FROM ACCOUNT_TRANSACTION WHERE T_ID =newInvoiceId;

					<!--  Reverse Updating the AccountsReceivable account balance with Invoice amount. -->

					UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - newTotal, TOTAL_BALANCE = TOTAL_BALANCE - newTotal WHERE ID_ACCOUNT = newAccountsReceivableId;

					<!-- Reverse Updating the Corresponding Customer Balance with Invoice amount -->
					UPDATE CUSTOMER SET BALANCE = BALANCE + oldTotal WHERE ID_CUSTOMER = oldCustomerId;				
				

					<!-- Reverse Updating the Corresponding TaxGroup's TaxCode's TaxAgency Account Balance with allTaxable Line total if we select any TaxGroup. -->
					IF (newTaxGroupId IS NOT NULL) AND (newAllTaxableLineTotal != 0.0) THEN

						<!--  Updating the TaxAgency Accounts with the Sales Tax amount. -->
						UPDATE ACCOUNT SET CURRENT_BALANCE = CURRENT_BALANCE - newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newInvoiceId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , TOTAL_BALANCE = TOTAL_BALANCE - newAllTaxableLineTotal*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= newInvoiceId AND TRC.TAXAGENCY_ACCOUNT_ID = ID_ACCOUNT GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE ID_ACCOUNT IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =newInvoiceId);


						<!-- Reverse updating the balance of corresponding tax agency -->

						UPDATE TAXAGENCY SET BALANCE = BALANCE - newAllTaxableLineTotal* (SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId AND TRC.TAXAGENCY_ID = ID )/100 WHERE ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=newInvoiceId);



						<!-- Deleting corresponding transaction rows from TaxRate Calculation table -->
						DELETE FROM TAX_RATE_CALCULATION WHERE TRANSACTION_ID =newInvoiceId;

					END IF;

					countNo := 0;

					SELECT COUNT(*) INTO countNo FROM TRANSACTION_RECEIVE_PAYMENT TRP WHERE TRP.INVOICE_ID = oldInvoiceId;
					
					IF countNo >0 THEN

						<!-- Increasing the Unused payment of the ReceivePayment by the Invoice amount in which this Invoice is being paid. -->

						UPDATE RECEIVE_PAYMENT SET UNUSED_PAYMENTS = UNUSED_PAYMENTS + (SELECT TRP.PAYMENT FROM TRANSACTION_RECEIVE_PAYMENT TRP  WHERE TRP.TRANSACTION_ID = ID_RECEIVE_PAYMENT AND TRP.INVOICE_ID= oldInvoiceId) WHERE ID_RECEIVE_PAYMENT IN (SELECT TRP1.TRANSACTION_ID FROM TRANSACTION_RECEIVE_PAYMENT TRP1 WHERE TRP1.INVOICE_ID = oldInvoiceId);

						<!-- Increasing the Balance if the CreditsAndPayments which we have used in this Invoice -->

						UPDATE CREDITS_AND_PAYMENTS SET BALANCE = BALANCE + (CASE WHEN (SELECT SUM(TRP1.APPLIED_CREDITS) FROM TRANSACTION_RECEIVE_PAYMENT TRP1 JOIN TRANSACTION_CREDITS_AND_PAYMENTS TCP1 ON TCP1.TRANSACTION_RECEIVE_PAYMENT_ID = TRP1.ID_TRANSACTION_RECEIVE_PAYMENT JOIN CREDITS_AND_PAYMENTS CP1 ON TCP1.CREDITS_AND_PAYMENTS_ID= CP1.ID_CREDITS_AND_PAYMENTS WHERE CP1.ID_CREDITS_AND_PAYMENTS = ID_CREDITS_AND_PAYMENTS AND TRP1.INVOICE_ID = oldInvoiceId)  > 0 THEN (SELECT  SUM(TCP2.AMOUNT_TO_USE)  FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP2  JOIN CREDITS_AND_PAYMENTS CP2 ON TCP2.CREDITS_AND_PAYMENTS_ID = CP2.ID_CREDITS_AND_PAYMENTS JOIN TRANSACTION_RECEIVE_PAYMENT TRP2 ON TRP2.ID_TRANSACTION_RECEIVE_PAYMENT = TCP2.TRANSACTION_RECEIVE_PAYMENT_ID WHERE CP2.ID_CREDITS_AND_PAYMENTS = ID_CREDITS_AND_PAYMENTS AND TRP2.INVOICE_ID =oldInvoiceId) ELSE 0 END) WHERE ID_CREDITS_AND_PAYMENTS IN (SELECT CP1.ID_CREDITS_AND_PAYMENTS FROM CREDITS_AND_PAYMENTS CP1 JOIN TRANSACTION_CREDITS_AND_PAYMENTS TCP ON CP1.ID_CREDITS_AND_PAYMENTS = TCP.CREDITS_AND_PAYMENTS_ID JOIN TRANSACTION_RECEIVE_PAYMENT TRP1 ON TCP.TRANSACTION_RECEIVE_PAYMENT_ID = TRP1.ID_TRANSACTION_RECEIVE_PAYMENT WHERE TRP1.INVOICE_ID = oldInvoiceId);

						<!-- Update Transactin ReceivePayment corresponding to this Invoice to make the payments amount and the applied credits amount as zero. -->

						UPDATE TRANSACTION_RECEIVE_PAYMENT SET PAYMENT = 0.0,APPLIED_CREDITS = 0.0 WHERE INVOICE_ID = oldInvoiceId;

						<!-- Updating  the Transaction Credits and Payments corresponding to this Invoice to make the amount to use as zero. -->

						UPDATE TRANSACTION_CREDITS_AND_PAYMENTS SET AMOUNT_TO_USE = 0.0 WHERE ID_TRANSACTION_CREDITS_AND_PAYMENTS IN (SELECT TCP.ID_TRANSACTION_CREDITS_AND_PAYMENTS FROM TRANSACTION_CREDITS_AND_PAYMENTS TCP JOIN TRANSACTION_RECEIVE_PAYMENT TRP ON TCP.TRANSACTION_RECEIVE_PAYMENT_ID = TRP.ID_TRANSACTION_RECEIVE_PAYMENT WHERE TRP.INVOICE_ID = oldInvoiceId);

						<!-- To Update the Status of the ReveivePayments as Un applied, in which this Invoice is participated. -->

						UPDATE TRANSACTION SET STATUS = 0 WHERE ID_TRANSACTION IN (SELECT TRP1.TRANSACTION_ID FROM TRANSACTION_RECEIVE_PAYMENT TRP1 WHERE TRP1.INVOICE_ID = oldInvoiceId);


					END IF;

					 <!-- updating the Invoice to make it as completly paid. -->

					UPDATE INVOICE SET PAYMENTS = TOTAL,BALANCE_DUE = 0.0 WHERE ID_INVOICE =oldInvoiceId;

				END IF; 

				IF oldEstimateId IS NOT NULL THEN 
					<!-- To Mark the Estimate as Not Invoiced. -->
					UPDATE ESTIMATE SET IS_TURNED_TO_INVOICE = FALSE WHERE ID_ESTIMATE = oldEstimateId;

					<!-- To update the status of the Estimate as Open.  -->
					UPDATE TRANSACTION SET STATUS = 0 WHERE ID_TRANSACTION = newEstimateId;


				END IF;



			RETURN NEW;
			END IF;
		RETURN NULL;
		END;
	$trigger_invoice$ LANGUAGE plpgsql;
		</create>
		<drop>DROP FUNCTION IF EXIST function_invoice</drop>
	</database-object>
	
	<database-object>
		<create> 
		CREATE TRIGGER trigger_invoice AFTER INSERT OR UPDATE OR DELETE ON INVOICE FOR EACH ROW
		EXECUTE PROCEDURE function_invoice();
		
		</create>
		<drop>DROP TRIGGER trigger_invoice</drop>
	</database-object>
	
	
</hibernate-mapping>