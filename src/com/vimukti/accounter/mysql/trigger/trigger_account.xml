<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field">

<!-- Trigger Cash Sale for After Insert -->
	<database-object>
		<create> 
			
		CREATE TRIGGER INSERT_ACCOUNT AFTER INSERT ON ACCOUNT FOR EACH ROW
		
		BEGIN
				
			DECLARE accountName VARCHAR(100);
			DECLARE accountType INT;
			DECLARE companyId BIGINT;
			DECLARE status BOOLEAN;
			DECLARE openingBalance VARCHAR(100);
			
			SET openingBalance = 'Opening Balances';
					
					
			<!-- // Making this account opening balance as un editable if the account fall under following type -->		
			IF NEW.OPENING_BALANCE != 0.0 OR NEW.A_TYPE = 17 OR NEW.A_TYPE = 18 OR NEW.A_TYPE = 9 THEN 
				UPDATE ACCOUNT A SET A.IS_OPENING_BALANCE_EDITABLE = 0 WHERE A.ID = NEW.ID;
			END IF;
			
			SELECT A.NAME INTO accountName FROM ACCOUNT A WHERE A.ID =NEW.ID;
			
			IF NEW.OPENING_BALANCE != 0.0 AND accountName != openingBalance THEN
							
				SET accountType = NEW.A_TYPE;
				SET companyId = NEW.A.COMPANY_ID;
				
				<!-- 
				// To check whether the new Account is one of the following
				// types or not. If yes then we need to Increase the opening
				// balance amount, current balance amount and the total balance
				// amount of the Opening Balances Account with the opening
				// balance amount of the new Account
				 -->
				
				IF (accountType = 3) OR (accountType = 4) OR (accountType = 5) OR (accountType = 6) OR (accountType = 7) OR (accountType = 8) OR (accountType = 9) OR (accountType = 10) OR (accountType = 11) OR (accountType = 17) THEN
						
						
					<!--
					// Query to Increase the opening balance amount, current
					// balance amount and the total balance amount of the
					// Opening Balances Account with the opening balance amount
					// of the Opening Balances Account
					-->
						
						
					UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.OPENING_BALANCE, A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.OPENING_BALANCE WHERE A.NAME = openingBalance AND A.COMPANY_ID = NEW.COMPANY_ID;
							
					<!-- 
					// To check whether the new Account is one of the following
					// types or not. If yes then we need to Decrease the opening
					// balance amount, current balance amount and the total balance
					// amount of the Opening Balances Account with the opening
					// balance amount of the New Account
					// If the new Account is of Equity type and it's parent is not
					// null then we will follow different approach
					 -->
					
				
				ELSEIF accountType = 1 OR accountType = 2 OR accountType = 12 OR accountType = 13 OR accountType = 14 OR accountType = 15 OR accountType = 16 OR accountType = 18  THEN
							
					<!-- 
					// To check the type of new Account is Equity and the parent is not null or not
					 -->
					IF NEW.PARENT_ID IS NOT NULL AND accountType = 16 THEN
				
						<!-- 
						// To check whether the Parent of the new Account is
						// Opening Balances Account or one of the sub level of
						// the Opening Balances Account
						-->
					
						CALL isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID, @status);
				
						IF NEW.PARENT_ID = 1 OR (select @status) = 1 THEN 
				
							<!-- 
								// then we will change the opening balance amount
								// and current balance amount of Opening Balances
								// account.
							
							 -->
						
							UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.OPENING_BALANCE WHERE A.NAME = openingBalance AND A.COMPANY_ID = companyId;
				
							<!-- 
								// Here we will change the total balance amount of
								// this new Account if it's parent is not Opening
								// Balances Account but one of the sub account of
								// the Opening Banaces Account
							 -->
							CALL isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID, @status);
				
							IF NEW.PARENT_ID != 1 AND (select @status) = 1 THEN
				
								UPDATE ACCOUNT A SET A.TOTAL_BALANCE = A.TOTAL_BALANCE - NEW.OPENING_BALANCE WHERE A.NAME = openingBalance AND A.COMPANY_ID = companyId;
			
			
							END IF;
						END IF;	
			
					ELSE 
		
						<!-- 
						// Query to Decrease the opening balance amount, current
						// balance amount and the total balance amount of the
						// Opening Balances Account with the opening balance
						// amount of the New Account
						-->
		
						UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.OPENING_BALANCE, A.TOTAL_BALANCE = A.TOTAL_BALANCE - NEW.OPENING_BALANCE WHERE A.NAME = openingBalance AND A.COMPANY_ID = companyId;
		
					END IF;
				END IF;
			END IF	;
			
				<!-- 
				// To check if the Parent of the new Account is not null and not the Opening Balances Account or not
				 -->
			
				IF NEW.PARENT_ID IS NOT NULL AND NEW.PARENT_ID != 1 THEN
			
					<!-- 
						// Query to Increase the total balance amount of the parent
						// Account with the total balance amount of the new Account
					 -->
				
					UPDATE ACCOUNT A SET A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.TOTAL_BALANCE WHERE A.ID = NEW.PARENT_ID;
				END IF;
				
			END
			
	
		 </create>
		<drop>DROP TRIGGER INSERT_ACCOUNT</drop>
	</database-object>
	
	
	<!-- Trigger Cash Sale for After Update -->
	<database-object>
		<create>
		CREATE TRIGGER UPDATE_ACCOUNT AFTER UPDATE ON ACCOUNT FOR EACH ROW
		BEGIN
	
			DECLARE accountName VARCHAR(100);
			DECLARE accountType INT;
			DECLARE companyId BIGINT;
			DECLARE status BOOLEAN;
				
			DECLARE openingBalance VARCHAR(100);		
			SET openingBalance = 'Opening Balances';
					
			<!-- // Making this account opening balance as un editable if the account fall under following type  -->		
			IF OLD.OPENING_BALANCE=0.0 AND OLD.IS_OPENING_BALANCE_EDITABLE = 1 THEN
			
				IF OLD.A_TYPE = 17 OR OLD.A_TYPE = 18 OR OLD.A_TYPE = 9 THEN 
					UPDATE ACCOUNT A SET A.IS_OPENING_BALANCE_EDITABLE = 0 WHERE A.ID = OLD.ID;
				END IF;
				
			END IF;
			SELECT A.NAME INTO accountName FROM ACCOUNT A WHERE A.ID =OLD.ID;
			
			<!-- 
			// To check whether this Account is Opening Balances account or not
			// and opening balance amount of old Account and new account are
			// equal or not
			 -->
			IF OLD.OPENING_BALANCE != 0.0 AND accountName != openingBalance THEN
							
				SET accountType = NEW.A_TYPE;
				SET companyId = NEW.A.COMPANY_ID;
				
				<!-- 
				// To check whether the updated Account is one of the following
				// types or not. If yes then we need to Increase the opening
				// balance amount, current balance amount and the total balance
				// amount of the Opening Balances Account with the difference
				// amount of the old and new opening balances amount of the
				// updated Account
				 -->
				
				IF accountType = 3 OR accountType = 4 OR accountType = 5 OR accountType = 6 OR accountType = 7 OR accountType = 8 OR accountType = 9 OR accountType = 10 OR accountType = 11 OR accountType = 17 THEN
						
						
					<!--
					// Query to Increase the opening balance amount, current
					// balance amount and the total balance amount of the
					// Opening Balances Account with the difference amount of
					// the old and new opening balances amount of the updated
					// Account
					-->
						
						
					UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + (NEW.OPENING_BALANCE + OLD.OPENING_BALANCE), A.TOTAL_BALANCE = A.TOTAL_BALANCE + (NEW.OPENING_BALANCE + OLD.OPENING_BALANCE) WHERE A.NAME = openingBalance AND A.COMPANY_ID = NEW.COMPANY_ID;
							
					<!-- 
						// To check whether the updated Account is one of the following
						// types or not. If yes then we need to Decrease the opening
						// balance amount, current balance amount and the total balance
						// amount of the Opening Balances Account with the difference
						// amount of new and old opening balances amounts of the updated
						// Account
						// If the updated Account is of Equity type and it's parent is
						// not null then we will follow different approach
					 -->
					
				
				ELSEIF accountType = 1 OR accountType = 2 OR accountType = 12 OR accountType = 13 OR accountType = 14 OR accountType = 15 OR accountType = 16 OR accountType = 18  THEN
							
					<!-- 
						// To check the type of updated Account is Equity and the
						// parent is not null or not
					 -->
					IF NEW.PARENT_ID IS NOT NULL AND accountType = 16 THEN
				
						<!-- 
						// To check whether the Parent of the new Account is
						// Opening Balances Account or one of the sub level of
						// the Opening Balances Account
						-->
					
						CALL isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID, @status);
				
						IF NEW.PARENT_ID = 1 OR (select @status) = 1 THEN 
				
							<!-- 
								// then we will change the opening balance amount
								// and current balance amount of Opening Balances
								// account.
							
							 -->
						
							UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.OPENING_BALANCE WHERE A.NAME = openingBalance AND A.COMPANY_ID = companyId;
				
							<!-- 
							// Here we will change the total balance amount of
							// this updated Account if it's parent is not
							// Opening Balances Account but one of the sub
							// account of the Opening Banaces Account
							
							 
							CALL isItAnySubLevelOfOpeningBalance(NEW.PARENT_ID, @status);
							 -->
							IF NEW.PARENT_ID != 1 AND (select @status) = 1 THEN
				
								UPDATE ACCOUNT A SET A.TOTAL_BALANCE = A.TOTAL_BALANCE - NEW.OPENING_BALANCE WHERE A.NAME = openingBalance AND A.COMPANY_ID = companyId;
			
			
							END IF;
						END IF;
					ELSE 
		
						<!-- 
						// Query to Decrease the opening balance amount, current
						// balance amount and the total balance amount of the
						// Opening Balances Account with the opening balance
						// amount of the updated Account
						-->
		
						UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - (NEW.OPENING_BALANCE - OLD.OPENING_BALANCE), A.TOTAL_BALANCE = A.TOTAL_BALANCE - (NEW.OPENING_BALANCE - OLD.OPENING_BALANCE) WHERE A.NAME = openingBalance AND A.COMPANY_ID = companyId;
		
					END IF;
				END IF;
			END IF	;
			
				<!-- 
				// To check if the Parent of the Updated Account is not null and not
				// the Opening Balances Account or not
				 -->
			
				IF OLD.PARENT_ID IS NOT NULL AND OLD.PARENT_ID != 1 AND OLD.OPENING_BALANCE != NEW.OPENING_BALANCE THEN
			
					<!-- 
						// Query to Increase the total balance amount of the parent
						// Account with the difference of old and new total balance amount of the updated Account
					 -->
				
					UPDATE ACCOUNT A SET A.TOTAL_BALANCE = A.TOTAL_BALANCE + (NEW.TOTAL_BALANCE - OLD.TOTAL_BALANCE) WHERE A.ID = OLD.PARENT_ID;
				END IF;
	
		END
	
	
		</create>
		<drop>DROP TRIGGER UPDATE_CASH_SALES</drop>
	</database-object>
	
</hibernate-mapping>