<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field">

<!-- Trigger Cash Sale for After Insert -->
<database-object>
		<create> 
		
		CREATE TRIGGER INSERT_CASH_SALES AFTER INSERT ON CASH_SALES FOR EACH ROW
		BEGIN
		
		DECLARE accountType INT;
		DECLARE newDepositInAccountId BIGINT;
		SET newDepositInAccountId = NEW.DEPOSIT_IN_ACCOUNT_ID; 
		CALL getAccountType(@newDepositInAccountId,@accountType);
		
		
		
		IF (select @accountType) = 12 THEN
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE - NEW.TOTAL WHERE A.ID = newDepositInAccountId;
		
		ELSE 
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.TOTAL WHERE A.ID = newDepositInAccountId;
		END IF;
		
		
		
		INSERT INTO ACCOUNT_TRANSACTION (T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) VALUES ((SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID= NEW.ID),1,newDepositInAccountId,NEW.ID,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID= NEW.ID),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID= NEW.ID),(CASE WHEN (SELECT A.A_TYPE FROM ACCOUNT A WHERE A.ID = newDepositInAccountId)= 12 THEN -1* NEW.TOTAL ELSE NEW.TOTAL END ));
		
		
		
		IF NEW.TAXGROUP_ID  IS NOT NULL AND NEW.ALL_TAXABLE_LINE_TOTAL != 0.0 THEN
		
		
			INSERT INTO TAX_RATE_CALCULATION  (TAXAGENCY_ACCOUNT_ID,RATE,TRANSACTION_ID,TRANSACTION_TYPE,TAX_CODE_ID,TOTAL,TAXABLE_AMOUNT,NON_TAXABLE_AMOUNT,TAX_COLLECTED,TAXAGENCY_ID)(SELECT TA.ACCOUNT_ID,TR.RATE,NEW.ID, 1 , TC.ID , NEW.TOTAL , NEW.ALL_TAXABLE_LINE_TOTAL , (NEW.ALL_LINE_TOTAL - NEW.ALL_TAXABLE_LINE_TOTAL) , NEW.ALL_TAXABLE_LINE_TOTAL * (TR.RATE /100),TA.ID  FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID JOIN TAXCODE TC ON TC.ID=TR.TAXCODE_ID JOIN TAXAGENCY TA ON TA.ID = TC.TAXAGENCY_ID WHERE TG.ID = NEW.TAXGROUP_ID AND TR.AS_OF IN (SELECT MAX(TR1.AS_OF) FROM TAXRATES TR1 WHERE TR1.ID IN (SELECT (TR.ID) FROM TAXRATES TR JOIN TAXGROUP_TAXCODE TGTC ON TR.TAXCODE_ID = TGTC.TAXCODE_ID JOIN TAXGROUP TG ON TGTC.TAXGROUP_ID = TG.ID) AND TR1.AS_OF &lt;= (SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID= NEW.ID) GROUP BY TR1.TAXCODE_ID));
			
			
			UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , A.TOTAL_BALANCE = A.TOTAL_BALANCE  + NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =NEW.ID);
			
			
			INSERT INTO ACCOUNT_TRANSACTION  (T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) (SELECT (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID=NEW.ID),1,TT.ACCOUNT_ID,NEW.ID,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID=NEW.ID),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID=NEW.ID),(NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = TT.ACCOUNT_ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100) FROM TAXAGENCY TT WHERE TT.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID));
			
			UPDATE TAXAGENCY A SET A.BALANCE = A.BALANCE + NEW.ALL_TAXABLE_LINE_TOTAL * (SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ID = A.ID )/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID);
			
			
			INSERT INTO ACCOUNT_TRANSACTION  (T_NUMBER,TYPE,USER_ID,T_ID,T_TYPE,T_DATE,AMOUNT) (SELECT (SELECT T.NUMBER FROM TRANSACTION T WHERE T.ID= NEW.ID ), 4,TT.ID,NEW.ID,(SELECT T.T_TYPE FROM TRANSACTION T WHERE T.ID=NEW.ID),(SELECT T.T_DATE FROM TRANSACTION T WHERE T.ID=NEW.ID),(NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID AND TRC.TAXAGENCY_ID = TT.ID)/100) FROM TAXAGENCY TT WHERE TT.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID));
			
		
		
		
		END IF;
		
		
		END

		 </create>
		<drop>DROP TRIGGER INSERT_CASH_SALES</drop>
	</database-object>
	
	
	<!-- Trigger Cash Sale for After Update -->
	<database-object>
		<create>
		CREATE TRIGGER UPDATE_CASH_SALES AFTER UPDATE ON CASH_SALES FOR EACH ROW
		BEGIN
		
		DECLARE accountType INT;
		DECLARE oldDepositInAccountId BIGINT;
		
		
		IF OLD.IS_VOID != NEW.IS_VOID THEN
		
		DELETE FROM ACCOUNT_TRANSACTION WHERE T_ID = NEW.ID;
		
		SET oldDepositInAccountId = OLD.DEPOSIT_IN_ACCOUNT_ID ;
		CALL getAccountType(@oldDepositInAccountId,@accountType);
		
			
		IF (select @accountType) = 12 THEN
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE + NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE + NEW.TOTAL WHERE A.ID = oldDepositInAccountId;
		
		ELSE 
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.TOTAL, A.TOTAL_BALANCE = A.TOTAL_BALANCE - NEW.TOTAL WHERE A.ID = oldDepositInAccountId;
		END IF;
		
		
		IF NEW.TAXGROUP_ID  IS NOT NULL AND NEW.ALL_TAXABLE_LINE_TOTAL != 0.0 THEN
		
		
		
		UPDATE ACCOUNT A SET A.CURRENT_BALANCE = A.CURRENT_BALANCE - NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 , A.TOTAL_BALANCE = A.TOTAL_BALANCE  - NEW.ALL_TAXABLE_LINE_TOTAL*(SELECT SUM(TRC.RATE) FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ACCOUNT_ID = A.ID GROUP BY TRC.TAXAGENCY_ACCOUNT_ID)/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ACCOUNT_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID =NEW.ID);
		
		
		
		UPDATE TAXAGENCY A SET A.BALANCE = A.BALANCE - NEW.ALL_TAXABLE_LINE_TOTAL * (SELECT TRC.RATE FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID= NEW.ID AND TRC.TAXAGENCY_ID = A.ID )/100 WHERE A.ID IN (SELECT TRC.TAXAGENCY_ID  FROM TAX_RATE_CALCULATION TRC WHERE TRC.TRANSACTION_ID=NEW.ID);
		
		
		DELETE FROM TAX_RATE_CALCULATION WHERE TRANSACTION_ID =NEW.ID;
		
		END IF;
		
		
		END IF;
		
		
		END
		
		</create>
		<drop>DROP TRIGGER UPDATE_CASH_SALES</drop>
	</database-object>
	
	
	
	
</hibernate-mapping>