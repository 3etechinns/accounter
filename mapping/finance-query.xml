<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.vimukti.accounter.core">


	<!-- QUERIES FOR DAOs -->
	<!-- To generate the Bills list which includes Enter Bills, Vendor Credit 
		Memos, Cash Purchases, Credit Card Charges and Write Checks which are created 
		for Vendor -->

	<sql-query name="getMoneyOutOnDate">

		<query-param name="date" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="AMOUNT" type="double" />

		SELECT

		ABS(SUM(AT.AMOUNT)) AS AMOUNT

		FROM TRANSACTION T

		LEFT OUTER JOIN
		CASH_PURCHASE CP ON CP.ID = T.ID
		LEFT OUTER JOIN CREDIT_CARD_CHARGES
		CCC ON CCC.ID = T.ID
		LEFT OUTER JOIN CUSTOMER_REFUND CR ON CR.ID = T.ID
		LEFT OUTER JOIN PAY_BILL PB ON PB.ID = T.ID
		LEFT OUTER JOIN
		PAY_TAX PST
		ON PST.ID = T.ID
		LEFT OUTER JOIN WRITE_CHECKS WC ON
		WC.ID = T.ID

		LEFT
		OUTER JOIN ACCOUNT A ON A.ID = CP.PAYFROM_ACCOUNT_ID
		OR A.ID =
		CCC.PAYFROM_ACCOUNT_ID
		OR A.ID = CR.PAYFROM_ACCOUNT_ID
		OR A.ID
		=
		PB.PAYFROM_ID
		OR A.ID = PST.PAYFROM_ACCOUNT_ID
		OR A.ID = WC.ACCOUNT_ID


		LEFT OUTER JOIN ACCOUNT_TRANSACTION AT ON
		AT.ACCOUNT_ID = A.ID

		WHERE
		T.COMPANY_ID=:companyId AND
		AT.TRANSACTION_ID = T.ID AND T.T_TYPE IN
		(2,3,5,11,15,17)
		AND
		T.T_DATE =:date

		GROUP BY A.ID
	</sql-query>

	<sql-query name="getMoneyInForDates">

		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="AMOUNT" type="double" />

		SELECT

		ABS(SUM(AT.AMOUNT)) AS AMOUNT

		FROM TRANSACTION T

		LEFT OUTER JOIN
		CASH_SALES CS ON CS.ID = T.ID
		LEFT OUTER
		JOIN CUSTOMER_PREPAYMENT CPP ON
		CPP.ID = T.ID
		LEFT OUTER
		JOIN RECEIVE_PAYMENT RP ON
		RP.ID = T.ID
		LEFT
		OUTER JOIN RECEIVE_VAT RV
		ON RV.ID = T.ID

		LEFT OUTER
		JOIN ACCOUNT A ON
		A.ID =
		CS.DEPOSIT_IN_ACCOUNT_ID
		OR A.ID = CPP.DEPOSITIN_ID
		OR A.ID =
		RP.ACCOUNT_ID
		OR A.ID =
		RV.DEPOSIT_IN_ACCOUNT_ID

		LEFT OUTER JOIN
		ACCOUNT_TRANSACTION AT
		ON
		AT.ACCOUNT_ID = A.ID

		WHERE
		T.COMPANY_ID=:companyId AND
		AT.TRANSACTION_ID = T.ID AND T.T_TYPE IN
		(1,12,29,31)
		AND T.T_DATE
		BETWEEN :startDate AND :endDate

		GROUP BY A.ID

	</sql-query>

	<sql-query name="getDepreciatingFixedAssets">
		<query-param name="fromDate" type="long" />
		<query-param name="fromTo" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS ORIGINAL_AMOUNT,
		T.T_DATE AS
		TRANSACTION_DATE,
		P.NAME AS CUSTOMER_NAME
		FROM TRANSACTION T
		LEFT OUTER
		JOIN
		ESTIMATE E
		on T.ID = E.ID
		LEFT OUTER JOIN
		SALES_ORDER S
		on T.ID=S.ID
		LEFT OUTER JOIN
		PAYEE P
		ON P.ID=S.CUSTOMER_ID
		OR P.ID=E.CUSTOMER_ID
		WHERE
		T.STATUS !=2
		AND  T.SAVE_STATUS !=
		202 AND T.T_TYPE IN (7, 21)
		AND P.ID=:customerId
		AND
		T.COMPANY_ID=:companyId
		ORDER BY
		T.T_DATE
	</sql-query>


	<sql-query name="getEstimatesAndSalesOrdersList">
		<query-param name="customerId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="REMAINING_TOTAL" type="double" />
		<return-scalar column="ESTIMATE_TYPE" type="int" /> 
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS ORIGINAL_AMOUNT,
		T.T_DATE AS
		TRANSACTION_DATE,
		P.NAME AS CUSTOMER_NAME,
		E.ESTIMATETYPE AS
		ESTIMATE_TYPE,
		(T.TOTAL - (SELECT
		SUM(TI.INVOICED + (TI.VAT_FRACTION *
		(TI.INVOICED/TI.LINE_TOTAL)))
		FROM TRANSACTION_ITEM TI WHERE
		TI.TRANSACTION_ID = T.ID)) AS
		REMAINING_TOTAL
		FROM TRANSACTION T
		LEFT
		OUTER JOIN COMPANY C ON C.ID=:companyId
		LEFT
		OUTER
		JOIN
		ESTIMATE E
		on T.ID
		= E.ID AND T.STATUS IN (0,2)
		LEFT OUTER
		JOIN
		SALES_ORDER S
		on T.ID=S.ID
		AND
		T.STATUS !=
		2 AND T.STATUS!=102 AND
		T.STATUS != 103
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID=S.CUSTOMER_ID
		OR
		P.ID=E.CUSTOMER_ID
		WHERE
		T.T_TYPE IN (7,
		21)
		AND
		P.ID=:customerId
		AND
		T.COMPANY_ID=:companyId
		AND T.SAVE_STATUS NOT
		IN (202,201,204)
		ORDER BY T.T_DATE
	</sql-query>
	<sql-query name="getSalesOrdersList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PHONE" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS TOTAL_PRICE,
		T.T_DATE AS
		TRANSACTION_DATE,
		P.NAME AS CUSTOMER_NAME,
		S.PHONE AS PHONE,
		S.DUE_DATE
		AS DUE_DATE,
		T.STATUS AS TRANSACTION_STATUS
		FROM TRANSACTION T
		LEFT OUTER
		JOIN
		SALES_ORDER S
		on T.ID=S.ID
		LEFT OUTER JOIN
		PAYEE P
		ON
		P.ID=S.CUSTOMER_ID
		WHERE T.T_TYPE = 21 AND  T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN :fromDate AND :toDate
		ORDER
		BY
		T.T_DATE
	</sql-query>
	<sql-query name="getPurchasesAndItemReceipts">
		<query-param name="vendorId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="REMAINING_TOTAL" type="double" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS ORIGINAL_AMOUNT,
		T.T_DATE AS
		TRANSACTION_DATE,
		P.NAME AS VENDOR_NAME,
		(T.TOTAL - (SELECT
		SUM(TI.INVOICED + (TI.VAT_FRACTION * (TI.INVOICED/TI.LINE_TOTAL)))
		FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID = T.ID)) AS
		REMAINING_TOTAL
		FROM TRANSACTION T
		LEFT OUTER
		JOIN
		PURCHASE_ORDER PO
		ON
		T.ID = PO.ID
		LEFT OUTER JOIN
		ITEM_RECEIPT I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		PAYEE P
		ON P.ID=I.VENDOR_ID
		OR P.ID=PO.VENDOR_ID
		WHERE T.STATUS !=2 AND
		T.STATUS !=102 AND T.STATUS != 103
		AND T.T_TYPE IN (22, 23)
		AND T.SAVE_STATUS !=
		202 AND 
		P.ID=:vendorId
		AND T.COMPANY_ID=:companyId
		ORDER BY
		T.T_DATE
	</sql-query>
	<sql-query name="getPurchaseOrdersList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="PHONE" type="encryptedstring" />
		<return-scalar column="DELIVERY_DATE" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS ORIGINAL_AMOUNT,
		T.T_DATE AS
		TRANSACTION_DATE,
		P.NAME AS VENDOR_NAME,
		PO.PHONE AS PHONE,
		PO.DELIVERY_DATE AS DELIVERY_DATE,
		T.STATUS AS TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		PURCHASE_ORDER PO
		ON T.ID = PO.ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID=PO.VENDOR_ID
		WHERE T.T_TYPE = 22 AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN :fromDate AND :toDate
		ORDER BY T.T_DATE
	</sql-query>
	<sql-query name="getNotReceivedPurchaseOrdersList">
		<query-param name="vendorId" type="Long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS ORIGINAL_AMOUNT,
		T.T_DATE AS
		TRANSACTION_DATE,
		P.NAME AS VENDOR_NAME
		FROM TRANSACTION T
		LEFT OUTER
		JOIN
		PURCHASE_ORDER PO
		ON T.ID = PO.ID
		LEFT OUTER JOIN
		PAYEE P
		ON
		P.ID=PO.VENDOR_ID
		WHERE T.STATUS !=2 AND T.STATUS !=102
		AND T.T_TYPE =
		22
		AND T.SAVE_STATUS !=
		202 AND  P.ID=:vendorId
		AND T.COMPANY_ID=:companyId
		ORDER BY T.T_DATE
	</sql-query>
	<sql-query name="getBillsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="todayDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="transactionType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		<return-scalar column="C_NAME" type="string" />

		SELECT
		T.SAVE_STATUS AS SAVE_STATUS,
		T.CURRENCY AS CURRENCY,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		CASE
		WHEN
		T.T_TYPE = 6
		THEN
		EB.DUE_DATE
		WHEN
		T.T_TYPE =
		23
		THEN IR.DUE_DATE
		ELSE
		null
		END AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,T.STATEMENT_RECORD_ID AS
		STATEMENT_RECORD_ID,
		CASE
		WHEN T.T_TYPE= 28
		THEN NULL
		ELSE
		P.NAME
		END
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		ORIGINAL_AMOUNT,
		CASE
		WHEN
		T.T_TYPE
		= 6
		THEN
		EB.BALANCE_DUE
		WHEN T.T_TYPE =
		14
		THEN VCM.BALANCE_DUE
		WHEN
		T.T_TYPE = 23
		THEN IR.BALANCE_DUE
		ELSE
		NULL
		END
		AS BALANCE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE AS
		TRANSACTION_DATE,
		CASE
		WHEN
		T.T_TYPE = 28
		THEN
		CP.EXPENSE_STATUS
		ELSE 0 END
		AS EXPENSE_STATUS,
		C.FULL_NAME AS C_NAME
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CASH_PURCHASE
		CP
		on
		T.ID=CP.ID
		LEFT OUTER
		JOIN
		VENDOR_CREDIT_MEMO VCM
		on
		T.ID=VCM.ID
		LEFT
		OUTER
		JOIN
		ENTER_BILL EB
		on
		T.ID=EB.ID
		LEFT OUTER JOIN
		CREDIT_CARD_CHARGES
		CCC
		on
		T.ID = CCC.ID
		LEFT
		OUTER JOIN
		ITEM_RECEIPT IR
		on
		T.ID = IR.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID
		=
		EB.VENDOR_ID
		OR V.ID =
		VCM.VENDOR_ID
		OR V.ID =
		CP.VENDOR_ID
		OR V.ID =
		CCC.VENDOR_ID
		OR V.ID =
		IR.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		LEFT OUTER JOIN
		USERS U ON U.ID =
		CP.EMPLOYEE
		LEFT
		OUTER JOIN
		CLIENT C ON
		C.ID = U.CLIENT_ID

		WHERE
		CASE WHEN :transactionType =0 THEN
		T.T_TYPE in
		(2,3,6,14,23,26,27,28)
		ELSE T.T_TYPE=:transactionType
		END
		AND
		CASE
		WHEN
		1=:viewType THEN
		(CASE WHEN
		:transactionType =0 THEN
		(IR.BALANCE_DUE
		&gt;0.0 OR EB.BALANCE_DUE
		&gt;0.0 OR
		VCM.BALANCE_DUE &gt;0.0
		) ELSE TRUE
		END) AND T.SAVE_STATUS !=204 AND T.SAVE_STATUS!=201
		WHEN
		2=:viewType
		THEN
		(CASE WHEN :transactionType =0 THEN
		((:todayDate &gt;
		EB.DUE_DATE OR
		:todayDate &gt;
		IR.DUE_DATE)
		AND (CASE WHEN T.T_TYPE = 6
		THEN
		EB.BALANCE_DUE &gt; 0
		ELSE (IR.BALANCE_DUE &gt; 0.0 OR
		VCM.BALANCE_DUE
		&gt; 0.0) END))
		ELSE TRUE END) AND
		(T.SAVE_STATUS !=204
		AND
		T.SAVE_STATUS!=201)
		WHEN 3=:viewType THEN
		T.SAVE_STATUS=204
		WHEN
		4=:viewType
		THEN
		(T.SAVE_STATUS=201)
		ELSE true
		END
		AND
		T.COMPANY_ID=:companyId
		AND
		T.SAVE_STATUS != 202
		AND T.T_DATE BETWEEN
		:fromDate
		AND :toDate
		ORDER
		BY
		VENDOR_NAME

	</sql-query>

	<sql-query name="getAllInvoicesList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		SELECT
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN
		I.BALANCE_DUE
		ELSE
		0.0
		END AS BALANCE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN
		TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON T.ID=CS.ID
		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		OR
		C.ID =
		CS.CUSTOMER_ID
		OR C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE
		IN(1,4,8) AND T.SAVE_STATUS !=
		202
		ORDER BY
		DUE_DATE
	</sql-query>
	<!-- To generate the Invoices List which includes Cash Sales, Customer Credit 
		Memos, Invoices and Write Checks -->
	<sql-query name="getInvoicesList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="todayDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		SELECT
		T.SAVE_STATUS AS SAVE_STATUS,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,T.STATEMENT_RECORD_ID AS
		STATEMENT_RECORD_ID,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS
		DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN
		I.BALANCE_DUE
		WHEN
		T.T_TYPE = 4
		THEN
		CCM.BALANCE_DUE
		ELSE
		0.0
		END AS BALANCE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN
		TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON T.ID=CS.ID
		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		OR
		C.ID =
		CS.CUSTOMER_ID
		OR C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE
		IN(1,4,8) AND
		CASE
		WHEN
		1=:viewType THEN
		(I.BALANCE_DUE
		&gt;0.0 AND
		T.STATUS != 2 AND
		T.SAVE_STATUS !=204 AND T.SAVE_STATUS!=201)
		WHEN
		2=:viewType
		THEN
		(I.BALANCE_DUE &gt;0.0 AND I.DUE_DATE &lt; :todayDate
		AND
		T.SAVE_STATUS
		!=204 AND T.SAVE_STATUS!=201)
		WHEN 3=:viewType THEN
		(T.SAVE_STATUS =
		204)
		WHEN 4=:viewType
		THEN
		(T.SAVE_STATUS =201)
		ELSE
		true
		END
		AND
		T.COMPANY_ID=:companyId AND
		T.SAVE_STATUS !=202
		AND
		T.T_DATE
		BETWEEN
		:fromDate AND :toDate
		ORDER BY
		DUE_DATE
	</sql-query>
	<sql-query name="getAllCustomersPaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
		T.TOTAL AS
		AMOUNT,T.STATEMENT_RECORD_ID AS STATEMENT_RECORD_ID,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS IS_VOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		CASE WHEN
		T.T_TYPE = 12
		THEN
		RP.CHECK_NUMBER
		ELSE
		CP.CHECK_NUMBER
		END AS
		CHECK_NUMBER,
		T.CURRENCY
		AS
		CURRENCY,
		T.SAVE_STATUS
		AS
		SAVE_STATUS

		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		RECEIVE_PAYMENT RP
		ON
		T.ID=RP.ID
		LEFT OUTER
		JOIN
		CUSTOMER_PREPAYMENT CP
		ON
		T.ID=CP.ID
		LEFT OUTER
		JOIN
		CUSTOMER C
		ON
		C.ID
		=
		RP.CUSTOMER_ID
		OR C.ID =
		CP.CUSTOMER_ID
		LEFT
		OUTER
		JOIN
		PAYEE P
		ON
		P.ID =
		C.ID

		WHERE T.T_TYPE
		IN(12,29)
		AND
		CASE
		WHEN 2=:viewType
		THEN
		(T.SAVE_STATUS != 204)
		WHEN 3=:viewType
		THEN
		T.SAVE_STATUS = 204
		ELSE
		true
		END
		AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN
		:fromDate
		AND
		:toDate
	</sql-query>
	<!-- To generate the Payments List which Includes Cash Purchases, Credit 
		Card Charges, Customer Refunds,PayBills and Write Checks -->
	<sql-query name="getPaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="PAYBILL_TYPE" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />

		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		PAYMENT_DATE ,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE AS ISSUE_DATE,
		CASE WHEN T.T_TYPE = 5
		OR
		T.T_TYPE = 2
		OR T.T_TYPE = 3
		OR T.T_TYPE = 11
		THEN P.NAME
		WHEN T.T_TYPE =
		15
		THEN WC.IN_FAVOUR_OF
		WHEN T.T_TYPE = 17
		THEN NULL
		WHEN
		T.T_TYPE = 30 OR
		T.T_TYPE=31
		THEN NULL
		END AS NAME,
		T.PAYMENT_METHOD AS
		PAYMENT_METHOD,
		CASE
		WHEN T.T_TYPE = 2
		OR T.T_TYPE = 3
		OR T.T_TYPE = 11
		OR
		T.T_TYPE = 15
		OR
		T.T_TYPE = 17
		OR
		T.T_TYPE = 5
		THEN
		T.TOTAL
		WHEN T.T_TYPE=17
		THEN
		(SELECT
		(SUM(TPV1.AMOUNT_TO_PAY)) FROM
		PAY_TAX PV1
		LEFT OUTER
		JOIN
		TRANSACTION_PAY_TAX TPV1
		ON PV1.ID =
		TPV1.PAY_TAX_ID
		WHERE PV1.ID =
		T.ID)
		WHEN T.T_TYPE=31
		THEN
		(SELECT
		(SUM(TRV1.AMOUNT_TO_RECEIVE)) FROM
		RECEIVE_VAT RV1
		LEFT OUTER JOIN
		TRANSACTION_RECEIVE_VAT TRV1
		ON RV1.ID =
		TRV1.RECEIVE_VAT_ID
		WHERE RV1.ID
		= T.ID)

		END AS AMOUNT_PAID,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		PB.PAYBILL_TYPE
		AS PAYBILL_TYPE,

		CASE WHEN T.T_TYPE
		= 2
		THEN
		CP.CHECK_NUMBER
		WHEN T.T_TYPE
		= 3
		THEN CCC.CHECK_NUMBER
		WHEN
		T.T_TYPE
		= 5
		THEN CR.CHECK_NUMBER
		WHEN
		T.T_TYPE = 11
		THEN PB.CHECK_NUMBER
		WHEN
		T.T_TYPE = 15
		THEN WC.CHECK_NUMBER
		END AS CHECK_NUMBER,
		T.CURRENCY AS
		CURRENCY,
		T.SAVE_STATUS AS SAVE_STATUS

		FROM TRANSACTION T
		LEFT
		OUTER
		JOIN
		CASH_PURCHASE CP
		on T.ID=CP.ID
		LEFT
		OUTER
		JOIN
		PAY_BILL PB
		ON
		T.ID=PB.ID
		LEFT
		OUTER JOIN
		PAY_TAX PV
		ON
		T.ID=PV.ID
		LEFT
		OUTER JOIN
		TRANSACTION_PAY_TAX TPV
		ON TPV.ID=PV.ID
		LEFT
		OUTER JOIN
		RECEIVE_VAT RV
		ON
		T.ID=RV.ID
		LEFT OUTER JOIN
		TRANSACTION_RECEIVE_VAT TRV
		ON TRV.ID=RV.ID

		LEFT OUTER JOIN
		CUSTOMER_REFUND CR
		ON
		T.ID=CR.ID
		LEFT OUTER
		JOIN
		CREDIT_CARD_CHARGES CCC
		ON
		T.ID = CCC.ID
		LEFT
		OUTER JOIN
		WRITE_CHECKS
		WC
		ON
		T.ID = WC.ID
		LEFT OUTER JOIN
		PAY_TAX
		PST
		ON T.ID = PST.ID
		LEFT
		OUTER
		JOIN
		CUSTOMER C
		ON C.ID =
		CR.CUSTOMER_ID
		OR C.ID = WC.CUSTOMER_ID
		LEFT
		OUTER
		JOIN
		VENDOR V
		ON V.ID =
		CP.VENDOR_ID
		OR V.ID = CCC.VENDOR_ID
		OR V.ID
		=
		PB.VENDOR_ID
		OR V.ID =
		WC.VENDOR_ID
		LEFT OUTER JOIN
		TAXAGENCY
		TG
		ON TG.ID
		=
		WC.TAX_AGENCY_ID
		OR
		TG.ID =
		PST.TAX_AGENCY_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON
		P.ID
		= C.ID
		OR P.ID =
		V.ID
		OR
		P.ID = TG.ID
		WHERE T.T_TYPE in
		(2,3,5,11,15,17,30,31) AND
		CASE
		WHEN
		0=:viewType THEN
		((T.STATUS=0 OR
		T.STATUS=1 )AND T.SAVE_STATUS != 204
		AND T.SAVE_STATUS!=201)
		WHEN
		2=:viewType THEN
		(T.STATUS=2
		AND
		T.SAVE_STATUS != 204 AND
		T.SAVE_STATUS!=201)
		WHEN 3=:viewType THEN
		(T.SAVE_STATUS = 204)
		WHEN
		4=:viewType THEN
		(T.SAVE_STATUS = 201)
		ELSE
		true
		END
		AND
		T.COMPANY_ID=:companyId AND T.SAVE_STATUS !=
		202
		AND
		T.T_DATE
		BETWEEN
		:fromDate AND :toDate
	</sql-query>
	<!-- To generate the Vendor Payments List which Includes PayBills and Write 
		Checks created for Vendors -->
	<sql-query name="getVendorPaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="PAYBILL_TYPE" type="int" />
		<return-scalar column="VOIDED" type="boolean" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		SELECT T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		PAYMENT_DATE ,
		T.NUMBER AS TRANSACTION_NUMBER,T.STATEMENT_RECORD_ID AS
		STATEMENT_RECORD_ID,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE AS
		ISSUE_DATE ,
		CASE WHEN T.T_TYPE = 15
		THEN WC.IN_FAVOUR_OF
		WHEN T.T_TYPE =
		17
		THEN NULL
		WHEN
		T.T_TYPE = 25
		THEN NULL
		WHEN T.T_TYPE=11
		THEN P.NAME END
		AS NAME,
		T.PAYMENT_METHOD AS
		PAYMENT_METHOD,
		T.TOTAL AS
		AMOUNT_PAID,
		PB.PAYBILL_TYPE AS PAYBILL_TYPE,
		CASE
		WHEN T.SAVE_STATUS =
		204
		THEN TRUE
		ELSE
		FALSE
		END AS VOIDED,
		CASE
		WHEN
		T.T_TYPE = 11
		THEN
		PB.CHECK_NUMBER
		WHEN
		T.T_TYPE =
		15
		THEN
		WC.CHECK_NUMBER
		END AS
		CHECK_NUMBER,
		T.CURRENCY AS
		CURRENCY,
		T.SAVE_STATUS AS SAVE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		PAY_BILL PB
		on
		T.ID=PB.ID
		LEFT OUTER JOIN
		WRITE_CHECKS WC
		ON T.ID = WC.ID
		and
		WC.PAY_TO_TYPE IN (2,3)
		LEFT OUTER
		JOIN
		PAY_TAX PST
		ON T.ID = PST.ID
		LEFT OUTER JOIN
		VENDOR V
		ON V.ID =
		PB.VENDOR_ID
		OR V.ID = WC.VENDOR_ID
		LEFT OUTER JOIN
		TAXAGENCY TA
		ON TA.ID
		= PB.VENDOR_ID
		OR TA.ID =
		WC.VENDOR_ID
		OR TA.ID = WC.TAX_AGENCY_ID
		OR
		TA.ID = PST.TAX_AGENCY_ID
		LEFT OUTER JOIN
		PAYEE P
		ON P.ID = V.ID
		OR P.ID =
		TA.ID

		WHERE T.T_TYPE
		in(11,15,17,25) AND NAME IS NOT NULL AND
		CASE
		WHEN
		2=:viewType
		THEN
		(T.STATUS=2 AND T.SAVE_STATUS != 204)
		WHEN 0=:viewType
		THEN(T.STATUS=0
		AND T.SAVE_STATUS != 204)
		WHEN 3=:viewType
		THEN
		(T.SAVE_STATUS = 204)
		ELSE true
		END
		AND
		T.COMPANY_ID=:companyId AND
		T.SAVE_STATUS != 202
		AND
		T.T_DATE
		BETWEEN
		:fromDate AND :toDate
		ORDER BY
		T.T_DATE DESC
	</sql-query>

	
	<!-- To retrieve the Enter Bills and MakeDeposits Vendor Entry Transasctions 
		of all Vendors which are not paid OR partially paid, while creating Pay Bill -->
	<sql-query name="getPayBillTransactionsList">
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="AMOUNT_DUE" type="double" />
		<return-scalar column="PAYMENTS" type="double" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		SELECT
		CASE
		WHEN T.T_TYPE = 6
		THEN T.ID
		END AS
		ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		CASE
		WHEN T.T_TYPE
		= 6
		THEN EB.DUE_DATE
		ELSE
		null
		END AS
		DUE_DATE ,
		(SELECT P.NAME FROM PAYEE
		P
		WHERE P.ID =
		EB.VENDOR_ID
		AND	P.COMPANY_ID=:companyId) AS
		VENDOR_NAME ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		CASE
		WHEN T.T_TYPE = 6
		THEN
		T.TOTAL

		END AS
		ORIGINAL_AMOUNT ,
		CASE
		WHEN T.T_TYPE
		= 6
		THEN
		EB.BALANCE_DUE
		END AS
		AMOUNT_DUE,
		CASE
		WHEN T.T_TYPE = 6
		THEN EB.PAYMENTS
		END AS PAYMENTS,
		T.PAYMENT_METHOD AS
		PAYMENT_METHOD
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		ENTER_BILL EB
		ON
		T.ID=EB.ID
		LEFT OUTER
		JOIN
		TRANSFER_FUND TF
		ON T.ID = TF.ID
		WHERE T.T_TYPE in (6,10) and  T.SAVE_STATUS !=
		202 AND 
		(EB.BALANCE_DUE>0.0) AND
		T.COMPANY_ID=:companyId
	</sql-query>
	<!-- To retrieve the Enter Bills and MakeDeposits Vendor Entry Transasctions 
		of corresponding Vendors which are not paid OR partially paid, while creating 
		Pay Bill -->
	<sql-query name="getPayBillTransactionsListForVendor">
		<query-param name="vendorId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="paymentDate" type="long" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="AMOUNT_DUE" type="double" />
		<return-scalar column="PAYMENTS" type="double" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="DISCOUNT_DATE" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="IS_DATE_DRIVEN" type="boolean" />
		<return-scalar column="PAID_WITHIN" type="int" />
		<return-scalar column="DISCOUNT" type="double" />
		SELECT
		CASE WHEN T.T_TYPE = 6 THEN T.ID
		END AS ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		CASE WHEN T.T_TYPE = 6 THEN
		EB.DUE_DATE ELSE null END
		AS DUE_DATE ,
		(SELECT
		P.NAME FROM PAYEE P
		WHERE P.ID = EB.VENDOR_ID AND P.COMPANY_ID=:companyId)
		AS VENDOR_NAME ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		CASE WHEN T.T_TYPE =
		6 THEN
		T.TOTAL END AS
		ORIGINAL_AMOUNT ,
		CASE WHEN
		T.T_TYPE = 6 THEN
		EB.BALANCE_DUE END AS
		AMOUNT_DUE,
		CASE WHEN
		T.T_TYPE = 6 THEN
		EB.PAYMENTS END
		AS PAYMENTS,
		T.PAYMENT_METHOD
		AS PAYMENT_METHOD,
		CASE
		WHEN T.T_TYPE = 6 THEN
		EB.DISCOUNT_DATE
		ELSE
		NULL
		END AS
		DISCOUNT_DATE,
		T.T_DATE AS
		TRANSACTION_DATE,
		PT.IS_DATE_DRIVEN AS IS_DATE_DRIVEN,
		PT.IF_PAID_WITHIN AS PAID_WITHIN,
		PT.DISCOUNT_PERCENT AS DISCOUNT

		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN ENTER_BILL EB ON
		T.ID=EB.ID LEFT OUTER
		JOIN
		TRANSFER_FUND TF
		ON T.ID = TF.ID
		LEFT JOIN PAYMENTTERMS PT ON
		PT.ID=EB.PAYMENT_TERM_ID
		WHERE T.T_TYPE in (6,10) AND T.SAVE_STATUS !=
		202 AND  T.T_DATE &lt;=
		:paymentDate and
		(EB.BALANCE_DUE>0.0) and
		(EB.VENDOR_ID
		=:vendorId) AND
		T.COMPANY_ID=:companyId
	</sql-query>
	<!-- To retrieve the Invoices and Customer Refunds of corresponding customers 
		which are not paid OR partially paid, while creating Receive Payment -->
	<sql-query name="getReceivePaymentTransactionsListForCustomer">
		<query-param name="customerId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="paymentDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="INVOICE_AMOUNT" type="double" />
		<return-scalar column="AMOUNT_DUE" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="PAYMENTS" type="double" />
		<return-scalar column="IS_DATE_DRIVEN" type="boolean" />
		<return-scalar column="PAID_WITHIN" type="int" />
		<return-scalar column="DISCOUNT_PERC" type="double" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN I.DUE_DATE
		ELSE T.T_DATE
		END AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS INVOICE_AMOUNT,
		CASE
		WHEN
		T.T_TYPE = 5
		THEN
		CR.BALANCE_DUE
		WHEN T.T_TYPE =
		8
		THEN (I.BALANCE_DUE)
		END
		AS AMOUNT_DUE,

		T.T_DATE
		AS
		TRANSACTION_DATE ,
		CASE
		WHEN T.T_TYPE = 5
		THEN
		CR.PAYMENTS
		WHEN
		T.T_TYPE = 8
		THEN (I.PAYMENTS)
		END AS PAYMENTS,
		PT.IS_DATE_DRIVEN AS
		IS_DATE_DRIVEN,
		PT.IF_PAID_WITHIN AS PAID_WITHIN,
		PT.DISCOUNT_PERCENT AS
		DISCOUNT_PERC

		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		INVOICE I
		on
		T.ID=I.ID
		LEFT
		OUTER JOIN
		CUSTOMER_REFUND CR
		on T.ID = CR.ID
		LEFT OUTER
		JOIN
		PAYMENTTERMS
		PT
		ON
		PT.ID=I.PAYMENT_TERMS_ID
		WHERE T.T_TYPE
		in (5,8)
		AND T.SAVE_STATUS !=
		202 AND 
		T.T_DATE
		&lt;=:paymentDate
		AND
		(I.BALANCE_DUE>0.0
		OR
		CR.BALANCE_DUE >0.0)
		AND
		(I.CUSTOMER_ID
		=:customerId OR
		CR.CUSTOMER_ID =:customerId)
		AND
		T.SAVE_STATUS=203 AND
		T.COMPANY_ID=:companyId
	</sql-query>


	<!-- To generate the Invoices of Latest 10 -->
	<sql-query name="getLatestOverDueInvoices">
		<query-param name="companyId" type="long" />
		<return-scalar column="transaction_id" type="string" />
		<return-scalar column="due_date" type="long" />
		<return-scalar column="name" type="encryptedstring" />
		<return-scalar column="number" type="encryptedstring" />
		<return-scalar column="total" type="double" />
		<return-scalar column="payment" type="double" />
		<return-scalar column="balance_due" type="double" />
		SELECT
		T.ID AS transaction_id,
		I.DUE_DATE AS due_date,
		P.NAME AS
		name,
		T.NUMBER AS number,
		T.TOTAL AS total,
		I.PAYMENTS AS payment,
		I.BALANCE_DUE AS balance_due
		FROM TRANSACTION T
		LEFT OUTER JOIN
		INVOICE I
		ON I.ID = T.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON I.CUSTOMER_ID = C.ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON P.ID = C.ID
		WHERE I.BALANCE_DUE > 0.0 and
		I.DUE_DATE &lt;= CURRENT_DATE AND T.SAVE_STATUS !=
		202 AND  T.COMPANY_ID=:companyId
		ORDER BY T.ID
		DESC LIMIT 10
	</sql-query>

	<sql-query name="getLatestInvoices">
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		SELECT
		T.CURRENCY AS CURRENCY_ID,
		T.ID TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		DATE ,
		T.NUMBER AS TRANSACTION_NUMBER,

		P.NAME AS
		CUSTOMER_NAME,

		T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,

		CASE
		WHEN
		T.T_TYPE
		= 8 THEN
		I.DUE_DATE

		END AS DUE_DATE,

		CASE
		WHEN T.T_TYPE = 1 OR
		T.T_TYPE =
		4 OR
		T.T_TYPE = 15 THEN T.TOTAL
		WHEN T.T_TYPE = 15 THEN
		WC.AMOUNT
		END AS
		TOTAL_PRICE,
		CASE
		WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
		WHEN T.T_TYPE = 15
		THEN WC.BALANCE
		ELSE null
		END AS BALANCE


		FROM
		TRANSACTION T

		LEFT OUTER JOIN
		INVOICE I
		ON T.ID=I.ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON T.ID=CS.ID

		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON
		T.ID = CCM.ID

		LEFT OUTER JOIN
		WRITE_CHECKS WC
		ON T.ID = WC.ID

		LEFT OUTER
		JOIN
		CUSTOMER C
		ON C.ID =
		I.CUSTOMER_ID OR C.ID = CS.CUSTOMER_ID OR C.ID
		=
		CCM.CUSTOMER_ID OR C.ID
		= WC.CUSTOMER_ID and WC.CUSTOMER_ID IS NOT
		NULL
		LEFT OUTER JOIN
		PAYEE P
		on P.ID = C.ID
		where T.T_TYPE in(1,4,8,15)
		AND T.SAVE_STATUS !=
		202 AND  T.COMPANY_ID=:companyId
		ORDER BY T.ID DESC LIMIT 10
	</sql-query>

	<!-- To generate the Vendor Payments of Latest 10 -->

	<sql-query name="getLatestVendorPayments">
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="CURRENCY" type="long" />

		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		PAYMENT_DATE ,
		T.NUMBER AS TRANSACTION_nUMBER,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE AS ISSUE_DATE ,
		CASE WHEN T.T_TYPE = 15
		THEN WC.IN_FAVOUR_OF
		ELSE
		P.NAME END AS NAME,
		T.PAYMENT_METHOD AS
		PAYMENT_METHOD,

		T.TOTAL AS
		AMOUNT_PAID,
		T.CURRENCY AS
		CURRENCY


		FROM
		TRANSACTION T

		LEFT OUTER JOIN
		PAY_BILL PB
		on T.ID=PB.ID

		LEFT
		OUTER JOIN
		WRITE_CHECKS WC
		on T.ID = WC.ID
		LEFT OUTER JOIN
		VENDOR V
		on V.ID
		=
		PB.VENDOR_ID OR V.ID = WC.VENDOR_ID
		LEFT OUTER JOIN
		TAXAGENCY TA
		on
		TA.ID
		= PB.VENDOR_ID OR TA.ID =
		WC.VENDOR_ID
		LEFT JOIN
		PAYEE P
		on P.ID =
		V.ID
		OR
		P.ID = TA.ID
		WHERE
		T.T_TYPE
		in(11,15) AND  T.SAVE_STATUS !=
		202 AND T.COMPANY_ID=:companyId
		ORDER BY
		T.ID DESC LIMIT
		10

	</sql-query>

	<!-- To generate the Bills of Latest 10 -->

	<sql-query name="getLatestBills">
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		SELECT
		T.CURRENCY AS CURRENCY,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		CASE
		WHEN
		T.T_TYPE = 6
		THEN EB.DUE_DATE
		ELSE null
		END AS
		DUE_DATE ,

		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS VENDOR_NAME ,

		T.TOTAL AS ORIGINAL_AMOUNT ,

		CASE
		WHEN T.T_TYPE = 6 THEN EB.BALANCE_DUE
		WHEN T.T_TYPE = 14 THEN
		T.TOTAL
		ELSE T.TOTAL
		END AS BALANCE

		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		CASH_PURCHASE CP
		on T.ID=CP.ID
		LEFT OUTER
		JOIN
		VENDOR_CREDIT_MEMO VCM
		on
		T.ID=VCM.ID
		LEFT OUTER JOIN
		ENTER_BILL EB
		on
		T.ID=EB.ID
		LEFT OUTER JOIN
		CREDIT_CARD_CHARGES CCC
		on T.ID = CCC.ID
		LEFT
		OUTER JOIN
		WRITE_CHECKS WC
		on T.ID = WC.ID and WC.PAY_TO_TYPE = 2
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		EB.VENDOR_ID OR V.ID = VCM.VENDOR_ID OR
		V.ID = CCC.VENDOR_ID
		OR V.ID =
		CP.VENDOR_ID OR WC.VENDOR_ID
		LEFT OUTER
		JOIN PAYEE P ON P.ID = V.ID
		WHERE T.T_TYPE in (2,4,6,14,15) AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId ORDER BY
		T.ID DESC LIMIT 10
	</sql-query>

	<!-- To generate the Payments of Latest 10 -->

	<sql-query name="getLatestPayments">
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="CURRENCY" type="long" />

		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE
		ASPAYMENT_DATE ,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE AS ISSUE_DATE ,
		CASE WHEN T.T_TYPE = 15
		THEN WC.IN_FAVOUR_OF
		ELSE
		P.NAME END AS NAME,
		T.PAYMENT_METHOD AS
		PAYMENT_METHOD,
		CASE
		WHEN T.T_TYPE = 5
		THEN
		CR.PAYMENTS
		ELSE T.TOTAL
		END AS
		AMOUNT_PAID,
		T.CURRENCY AS CURRENCY


		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		CASH_PURCHASE CP
		ON T.ID=CP.ID
		LEFT OUTER
		JOIN
		PAY_BILL PB
		ON
		T.ID=PB.ID
		LEFT OUTER JOIN
		CUSTOMER_REFUND CR
		ON
		T.ID=CR.ID
		LEFT OUTER
		JOIN
		CREDIT_CARD_CHARGES CCC
		ON T.ID = CCC.ID
		LEFT
		OUTER JOIN
		WRITE_CHECKS WC
		ON T.ID = WC.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CR.CUSTOMER_ID OR C.ID
		= WC.CUSTOMER_ID
		LEFT OUTER JOIN
		VENDOR V
		ON
		V.ID
		= CP.VENDOR_ID OR V.ID =
		CCC.VENDOR_ID OR V.ID = PB.VENDOR_ID
		OR
		V.ID =
		WC.VENDOR_ID
		LEFT JOIN
		PAYEE P
		on P.ID = C.ID OR P.ID = V.ID
		WHERE
		T.T_TYPE in (2,3,5,11,15) AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId ORDER BY
		T.ID
		DESC
		LIMIT 10
	</sql-query>

	<!-- To generate the Cash Purchases of Latest 10 -->
	<sql-query name="getLatestReceivePayments">
		<query-param name="companyId" type="long" />
		<return-scalar column="RP_ID" type="long" />
		<return-scalar column="RP_DATE" type="long" />
		<return-scalar column="RP_CUSTOMER_ID" type="long" />
		<return-scalar column="RP_AMOUNT" type="double" />
		<return-scalar column="RP_ID" type="string" />

		SELECT
		TOP(10) RP.ID AS RP_ID,
		T.T_DATE AS RP_DATE,
		RP.CUSTOMER_ID
		RP_CUSTOMER_ID,
		RP.AMOUNT AS RP_AMOUNT , T.ID AS RP_ID
		FROM
		RECEIVE_PAYMENT RP
		JOIN TRANSACTION T ON RP.ID = T.ID AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId ORDER BY
		RP.ID
		DESC
	</sql-query>

	<!-- To generate the Cash Purchases of Latest 10 -->
	<sql-query name="getLatestCashPurchases">
		<query-param name="companyId" type="long" />
		<return-scalar column="CP_ID" type="long" />
		<return-scalar column="CP_DATE" type="long" />
		<return-scalar column="CP_VENDOR_ID" type="long" />
		<return-scalar column="CP_TOTAL" type="double" />
		<return-scalar column="CP_ID" type="string" />

		SELECT CP.ID AS CP_ID,
		T.T_DATE AS CP_DATE,
		CP.VENDOR_ID AS
		CP_VENDOR_ID,
		T.TOTAL AS CP_TOTAL,T.ID AS CP_ID
		FROM
		CASH_PURCHASE CP
		JOIN TRANSACTION T ON CP.ID = T.ID AND T.SAVE_STATUS !=
		202 AND  T.COMPANY_ID=:companyId ORDER
		BY CP.ID
		DESC LIMIT 10
	</sql-query>

	<!-- To generate the Cash Sales of Latest 10 -->
	<sql-query name="getLatestCashSales">
		<query-param name="companyId" type="long" />
		<return-scalar column="CS_ID" type="long" />
		<return-scalar column="CS_DATE" type="long" />
		<return-scalar column="CS_CUSTOMER_ID" type="long" />
		<return-scalar column="SALESPERSON_ID" type="long" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="CS_ID" type="string" />
		SELECT CS.ID AS CS_ID,
		T.T_DATE CS_DATE,
		CS.CUSTOMER_ID CS_CUSTOMER_ID,
		CS.SALES_PERSON_ID AS SALESPERSON_ID,
		T.TOTAL AS TOTAL,T.ID AS
		CS_ID
		FROM CASH_SALES CS JOIN TRANSACTION T ON CS.ID = T.ID AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId
		ORDER BY T.ID
		DESC
		LIMIT 10
	</sql-query>

	<!-- To generate the Checks of Latest 10 -->
	<sql-query name="getLatestChecks">
		<query-param name="companyId" type="long" />
		<return-scalar column="WC_ID" type="long" />
		<return-scalar column="WC_DATE" type="long" />
		<return-scalar column="PAY_TO" type="encryptedstring" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="WC_CUSTOMER_ID" type="long" />
		<return-scalar column="WC_VENDOR_ID" type="long" />
		<return-scalar column="TAXAGENCY_ID" type="long" />
		<return-scalar column="WC_AMOUNT" type="double" />
		<return-scalar column="WC_ID" type="string" />

		SELECT
		WC.ID AS WC_ID,
		T.T_DATE WC_DATE,
		WC.PAY_TO_TYPE AS PAY_TO,
		WC.BALANCE AS BALANCE,
		WC.CUSTOMER_ID AS WC_CUSTOMER_ID,
		WC.VENDOR_ID AS
		WC_VENDOR_ID,
		WC.TAX_AGENCY_ID AS TAXAGENCY_ID,
		WC.AMOUNT AS WC_AMOUNT,
		T.ID AS WC_ID
		FROM WRITE_CHECKS WC
		JOIN
		TRANSACTION T
		ON
		WC.ID = T.ID AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId
		ORDER
		BY T.ID DESC LIMIT 10
	</sql-query>

	<!-- To generate the Customer Refunds of Latest 10 -->
	<sql-query name="getLatestCustomerRefunds">
		<query-param name="companyId" type="long" />
		<return-scalar column="CR_ID" type="long" />
		<return-scalar column="CR_DATE" type="long" />
		<return-scalar column="CR_CUSTOMER_ID" type="long" />
		<return-scalar column="CR_AMOUNT" type="double" />
		<return-scalar column="CR_BALANCE_DUE" type="double" />
		<return-scalar column="CR_ID" type="string" />
		SELECT
		CR.ID AS CR_ID,
		T.T_DATE AS CR_DATE,
		CR.CUSTOMER_ID AS
		CR_CUSTOMER_ID,
		T.TOTAL AS CR_AMOUNT,
		CR.BALANCE_DUE AS CR_BALANCE_DUE,
		T.ID AS CR_ID
		FROM CUSTOMER_REFUND CR
		JOIN
		TRANSACTION T
		ON
		CR.ID = T.ID
		AND  T.SAVE_STATUS !=
		202 AND T.COMPANY_ID=:companyId
		ORDER BY T.ID DESC LIMIT 10
	</sql-query>

	<!-- To generate the Deposits of Latest 10 -->
	<sql-query name="getLatestDeposits">
		<query-param name="companyId" type="long" />
		<return-scalar column="TF_ID" type="long" />
		<return-scalar column="DEPOSIT_IN_ID" type="long" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL_AMOUNT" type="double" />
		<return-scalar column="CASH_BACK_ACCOUNT_ID" type="long" />
		<return-scalar column="CASH_BACK_MEMO" type="encryptedstring" />
		<return-scalar column="CASH_BACK_AMOUNT" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TF_ID" type="string" />

		SELECT TF.ID AS TF_ID,
		TF.DEPOSIT_IN_ID AS DEPOSIT_IN_ID,
		T.MEMO AS
		MEMO,
		T.TOTAL AS TOTAL_AMOUNT,
		TF.CASH_BACK_ACCOUNT_ID AS
		CASH_BACK_ACCOUNT_ID,
		TF.CASH_BACK_MEMO AS CASH_BACK_MEMO,
		TF.CASH_BACK_AMOUNT AS CASH_BACK_AMOUNT,
		T.ID AS TF_ID
		FROM
		TRANSFER_FUND
		TF JOIN TRANSACTION T ON TF.ID =
		T.ID AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId ORDER
		BY T.ID
		DESC LIMIT 10
	</sql-query>

	<!-- To generate the TransferFunds of Latest 10 -->
	<sql-query name="getLatestTransferFunds">
		<query-param name="companyId" type="long" />
		<return-scalar column="TF_ID" type="long" />
		<return-scalar column="TF_DATE" type="long" />
		<return-scalar column="TRANSFER_FROM" type="long" />
		<return-scalar column="TRANSFER_TO" type="long" />
		<return-scalar column="TRANSFER_AMOUNT" type="double" />
		<return-scalar column="TF_ID" type="string" />

		SELECT TF.ID AS TF_ID,
		T.T_DATE AS TF_DATE,
		TF.TRANSFER_FROM AS
		TRANSFER_FROM,
		TF.TRANSFER_TO AS TRANSFER_TO,
		T.TOTAL AS TRANSFER_AMOUNT
		,
		T.ID AS TF_ID
		FROM TRANSFER_FUND TF JOIN TRANSACTION T
		ON TF.ID =
		T.ID
		AND T.COMPANY_ID=:companyId
		ORDER BY T.ID DESC LIMIT 10
	</sql-query>

	<!-- To generate the Items of Latest 10 -->
	<sql-query name="getLatestItems">
		<query-param name="companyId" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="SALES_PRICE" type="double" />
		<return-scalar column="I_ID" type="string" />

		SELECT I.ID AS ITEM_ID,
		I.NAME AS ITEM_NAME,
		I.TYPE AS ITEM_TYPE,
		I.SALES_PRICE AS SALES_PRICE, I.ID AS I_ID
		FROM ITEM I WHERE 
		I.COMPANY_ID=:companyId
		ORDER BY I.ID
		DESC LIMIT 10
	</sql-query>

	<!-- To generate the Sales Items of Latest 10 -->
	<sql-query name="getLatestSalesItems">
		<query-param name="companyId" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="SALES_PRICE" type="double" />
		<return-scalar column="ITEM_ID" type="string" />

		SELECT I.ID AS ITEM_ID,
		I.NAME AS ITEM_NAME,
		I.TYPE AS ITEM_TYPE,
		I.SALES_PRICE AS SALES_PRICE, I.ID AS ITEM_ID
		FROM ITEM I
		WHERE
		I.IS_SELL_ITEM = TRUE AND I.COMPANY_ID=:companyId ORDER BY I.ID DESC
		LIMIT 10
	</sql-query>

	<!-- To generate the Purchase Items of Latest 10 -->
	<sql-query name="getLatestPurchaseItems">
		<query-param name="companyId" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="SALES_PRICE" type="double" />
		<return-scalar column="ITEM_ID" type="string" />

		SELECT I.ID AS ITEM_ID,
		I.NAME AS ITEM_NAME,
		I.TYPE AS ITEM_TYPE,
		I.SALES_PRICE AS SALES_PRICE, I.ID AS ITEM_ID
		FROM ITEM I
		WHERE
		I.IS_BUY_ITEM = TRUE AND I.COMPANY_ID=:companyId ORDER BY I.ID DESC
		LIMIT 10
	</sql-query>

	<!-- To generate the Vendors of Latest 10 -->
	<sql-query name="getLatestVendors">
		<query-param name="companyId" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="PAYEE_DATE" type="long" />
		<return-scalar column="PAYEE_ID" type="string" />

		SELECT V.ID AS VENDOR_ID,
		P.NAME AS VENDOR_NAME,
		P.P_DATE AS
		PAYEE_DATE,P.ID AS PAYEE_ID FROM VENDOR V LEFT JOIN
		PAYEE P ON P.ID =
		V.ID AND P.COMPANY_ID=:companyId ORDER BY V.ID DESC LIMIT 10
	</sql-query>

	<!-- To generate the Quotes of Latest 10 -->
	<sql-query name="getLatestQuotes">
		<query-param name="companyId" type="long" />
		<return-scalar column="QUOTE_ID" type="long" />
		<return-scalar column="QUOTE_DATE" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="SALES_PERSON_ID" type="long" />
		<return-scalar column="QUOTE_TOTAL" type="double" />

		SELECT E1.ID AS QUOTE_ID,
		T.T_DATE AS QUOTE_DATE,
		E1.CUSTOMER_ID AS
		CUSTOMER_ID,
		E1.SALES_PERSON_ID AS SALES_PERSON_ID,
		T.TOTAL AS
		QUOTE_TOTAL FROM ESTIMATE E1 JOIN TRANSACTION T ON E1.ID = T.ID AND
		T.COMPANY_ID=:companyId
		JOIN
		CUSTOMER C ON C.ID = E1.CUSTOMER_ID
		ORDER BY
		T.ID DESC LIMIT 10
	</sql-query>

	<!-- To generate the Checks of Latest 10 -->
	<sql-query name="getChecks">
		<query-param name="accountId" type="long" />
		<query-param name="companyId" type="long" />
		SELECT * FROM WRITE_CHECKS WC JOIN TRANSACTION T ON T.ID = WC.ID AND
		WC.ACCOUNT_ID =:accountId AND T.STATUS = 0 AND T.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getNextTransactionNumber">

		<query-param name="type" type="int" />
		<query-param name="companyId" type="long" />
		<return-scalar column="transaction_number" type="encryptedstring" />

		SELECT T.NUMBER AS transaction_number FROM TRANSACTION T WHERE T.ID =
		(SELECT MAX(T1.ID) FROM TRANSACTION T1
		WHERE T1.T_TYPE =:type AND
		T1.COMPANY_ID=:companyId)
	</sql-query>


	<sql-query name="getNextIssuePaymentCheckNumber">

		<query-param name="accountID" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />

		SELECT I.CHECK_NUMBER AS CHECK_NUMBER FROM ISSUEPAYMENT I WHERE
		I.ID =
		(SELECT MAX(T1.ID) FROM TRANSACTION
		T1 LEFT OUTER JOIN ISSUEPAYMENT IP
		ON IP.ID=T1.ID LEFT OUTER JOIN
		ACCOUNT A1 ON IP.ACCOUNT_ID=A1.ID WHERE
		T1.T_TYPE =9 AND
		A1.ID=:accountID AND T1.COMPANY_ID=:companyId)
	</sql-query>

	<sql-query name="getNextFixedAssetNumber">
		<query-param name="companyId" type="long" />
		<return-scalar column="fixedasset_number" type="encryptedstring" />

		SELECT FA.ASSET_NUMBER AS fixedasset_number FROM FIXED_ASSET FA WHERE
		FA.ID = (SELECT MAX(FA1.ID) FROM
		FIXED_ASSET FA1 WHERE
		FA1.COMPANY_ID=:companyId)
	</sql-query>

	<sql-query name="getNextNominalCodeForGivenAccountType">
		<query-param name="subBaseType" type="int" />
		<query-param name="companyId" type="long" />
		<return-scalar column="account_number" type="long" />
		SELECT A.A_NUMBER AS account_number FROM ACCOUNT A WHERE
		A.ID = (SELECT
		MAX(A1.ID) FROM ACCOUNT A1
		WHERE A1.SUB_BASE_TYPE
		=:subBaseType AND
		A1.COMPANY_ID=:companyId)
	</sql-query>


	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- The following queries named queries should be used in canDelete(Class,stringId) 
		method to check whether an Object is deletable or not -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->

	<sql-query name="canDeleteCustomer">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="CUSTOMER_REFUND_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		<return-scalar column="INVOICE_ID" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="SALES_ORDER_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		<return-scalar column="JOURNAL_ENTRY_ID" type="long" />
		<return-scalar column="CUSTOMER_PREPAYMENT_ID" type="long" />

		SELECT CS.ID AS CUSTOMER_ID,
		CCM.ID AS CUSTOMER_CREDIT_MEMO_ID,
		CR.ID AS
		CUSTOMER_REFUND_ID,
		EST.ID AS ESTIMATE_ID,
		I.ID AS INVOICE_ID,
		RP.ID
		RECEIVE_PAYMENT_ID,
		SO.ID AS SALES_ORDER_ID,
		WC.ID AS WRITE_CHECK_ID,
		JE.ID AS JOURNAL_ENTRY_ID,
		CPP.ID AS
		CUSTOMER_PREPAYMENT_ID
		FROM CUSTOMER
		C
		LEFT OUTER
		JOIN
		CASH_SALES CS
		ON
		C.ID = CS.CUSTOMER_ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON C.ID =
		CCM.CUSTOMER_ID
		LEFT OUTER JOIN
		CUSTOMER_REFUND CR
		ON C.ID =
		CR.CUSTOMER_ID
		LEFT OUTER JOIN
		ESTIMATE EST
		ON C.ID = EST.CUSTOMER_ID
		LEFT OUTER JOIN
		INVOICE I
		ON C.ID =
		I.CUSTOMER_ID
		LEFT OUTER JOIN
		RECEIVE_PAYMENT RP
		ON C.ID = RP.CUSTOMER_ID
		LEFT OUTER JOIN
		SALES_ORDER
		SO
		ON C.ID = SO.CUSTOMER_ID
		LEFT OUTER JOIN
		WRITE_CHECKS WC
		ON
		C.ID=WC.CUSTOMER_ID
		LEFT OUTER JOIN
		JOURNAL_ENTRY JE
		ON
		C.ID=JE.PAYEE_ID
		LEFT
		OUTER JOIN
		CUSTOMER_PREPAYMENT CPP
		ON C.ID =
		CPP.CUSTOMER_ID
		WHERE
		C.ID=:inputId AND C.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeleteVendor">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="CASH_PURCHASE_ID" type="long" />
		<return-scalar column="CREDIT_CARD_CHARGE_ID" type="long" />
		<return-scalar column="ENTER_BILL_ID" type="long" />
		<return-scalar column="PAY_BILL_ID" type="long" />
		<return-scalar column="PURCHASE_ORDER_ID" type="long" />
		<return-scalar column="VENDOR_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		<return-scalar column="JOURNAL_ENTRY_ID" type="long" />

		SELECT IT.ID AS ITEM_ID,
		CP.ID AS CASH_PURCHASE_ID,
		CCC.ID AS
		CREDIT_CARD_CHARGE_ID,
		EB.ID AS ENTER_BILL_ID,
		PB.ID AS PAY_BILL_ID,
		PO.ID AS PURCHASE_ORDER_ID,
		VCM.ID AS VENDOR_CREDIT_MEMO_ID,
		WC.ID
		WRITE_CHECK_ID,
		JE.ID AS JOURNAL_ENTRY_ID

		FROM VENDOR V
		LEFT OUTER JOIN
		ITEM IT
		ON V.ID
		= IT.PREFFERED_VENDOR
		LEFT
		OUTER
		JOIN
		CASH_PURCHASE CP
		ON
		V.ID =
		CP.VENDOR_ID
		LEFT OUTER JOIN
		CREDIT_CARD_CHARGES CCC
		ON V.ID =
		CCC.VENDOR_ID
		LEFT OUTER JOIN
		ENTER_BILL EB
		ON V.ID = EB.VENDOR_ID
		LEFT
		OUTER JOIN
		PAY_BILL PB
		ON V.ID =
		PB.VENDOR_ID
		LEFT OUTER JOIN
		PURCHASE_ORDER PO
		ON V.ID = PO.VENDOR_ID
		LEFT OUTER JOIN
		VENDOR_CREDIT_MEMO VCM
		ON V.ID = VCM.VENDOR_ID
		LEFT OUTER
		JOIN
		WRITE_CHECKS WC
		ON V.ID = WC.VENDOR_ID
		LEFT OUTER JOIN
		JOURNAL_ENTRY
		JE
		ON
		V.ID
		= JE.PAYEE_ID
		WHERE V.ID=:inputId AND V.COMPANY_ID=:companyId
		LIMIT
		1
	</sql-query>


	<sql-query name="canDeleteAccount">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_TRANSACTION_ID" type="long" />
		<!-- <return-scalar column="BUDGET_ID" type="long" /> -->
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="SALES_PERSON_ID" type="long" />
		<return-scalar column="TAX_AGENCY_ID" type="long" />
		<return-scalar column="FIXED_ASSET_ID" type="long" />
		<return-scalar column="CASH_PURCHASE_ID" type="long" />
		<return-scalar column="CASH_SALES_ID" type="long" />
		<return-scalar column="CREDIT_CARD_CHARGE_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="CUSTOMER_REFUND_ID" type="long" />
		<return-scalar column="MAKE_DEPOSIT_ID" type="long" />
		<return-scalar column="PAY_BILL_ID" type="long" />
		<return-scalar column="PURCHASE_ORDER_ID" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="PAY_EXPENSE_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		<return-scalar column="TRANSFER_FUND_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_PAY_BILL_ID" type="long" />
		<return-scalar column="TRANSACTION_RECEIVE_PAYMENT_ID"
			type="long" />
		<return-scalar column="TRANSACTION_MAKEDEPOSIT_ENTRIES_ID"
			type="long" />
		<return-scalar column="TRANSACTION_EXPENSE_ID" type="long" />
		<return-scalar column="TRANSFER_FUND_ID" type="long" />
		<return-scalar column="TRANSACTION_DEPOSIT_ITEM_ID"
			type="long" />

		SELECT AC.ID AS ACCOUNT_ID,
		AT.ID AS ACCOUNT_TRANSACTION_ID,
		<!-- B.ID AS BUDGET_ID, -->
		C.ID AS CUSTOMER_ID,
		I.ID AS ITEM_ID,
		V.ID AS VENDOR_ID,
		SP.ID
		AS
		SALES_PERSON_ID,
		TA.ID AS TAX_AGENCY_ID,
		FA.ID AS FIXED_ASSET_ID,
		PST.ID
		AS PAY_TAX_ID,
		CP.ID AS CASH_PURCHASE_ID,
		CS.ID AS
		CASH_SALES_ID,
		CCC.ID
		AS CREDIT_CARD_CHARGE_ID,
		CCM.ID AS
		CUSTOMER_CREDIT_MEMO_ID,
		CF.ID AS
		CUSTOMER_REFUND_ID,
		TF.ID AS
		TRANSFER_FUND_ID,
		MD.ID AS
		MAKE_DEPOSIT_ID,
		TDI.ID AS
		TRANSACTION_DEPOSIT_ITEM_ID,
		PB.ID AS
		PAY_BILL_ID,
		PO.ID
		AS
		PURCHASE_ORDER_ID,
		RP.ID
		AS RECEIVE_PAYMENT_ID,
		PE.ID AS
		PAY_EXPENSE_ID,
		WC.ID AS WRITE_CHECK_ID,
		TF.ID AS
		TRANSFER_FUND_ID,
		TI.ID
		AS
		TRANSACTION_ITEM_ID,
		TPB.ID AS
		TRANSACTION_PAY_BILL_ID,
		TRP.ID AS
		TRANSACTION_RECEIVE_PAYMENT_ID,
		TMDE.ID AS
		TRANSACTION_MAKEDEPOSIT_ENTRIES_ID,
		TE.ID AS
		TRANSACTION_EXPENSE_ID
		FROM
		ACCOUNT A
		LEFT OUTER JOIN
		ACCOUNT AC
		ON A.ID =
		AC.PARENT_ID
		OR A.ID =
		AC.LINKED_ID
		LEFT OUTER JOIN
		ACCOUNT_TRANSACTION AT
		ON A.ID =
		AT.ACCOUNT_ID
		<!-- LEFT OUTER JOIN BUDGET B ON A.ID = B.ACCOUNT_ID -->
		LEFT OUTER
		JOIN
		COMPANY C
		ON A.ID = C.ACCOUNTS_RECEIVABLE_ID
		OR A.ID =
		C.ACCOUNTS_PAYABLE_ID
		OR A.ID = C.OPENING_BALANCES_ID
		OR A.ID =
		C.RETAINED_EARNINGS_ID
		OR A.ID = C.OTHER_CASH_INCOME_ID
		OR A.ID =
		C.OTHER_CASH_EXPENSE_ID
		OR A.ID = C.CASH_DISCOUNTS_GIVEN
		OR A.ID =
		C.CASH_DISCOUNTS_TAKEN
		OR A.ID = C.TAX_LIABILITY_ACCOUNT_ID
		OR A.ID =
		C.VAT_FILED_LIABILITY_ACCOUNT_ID
		OR A.ID =
		C.PENDING_ITEM_RECEIPTS_ACCOUNT_ID
		LEFT OUTER
		JOIN
		ITEM I
		ON A.ID =
		I.INCOME_ACCOUNT_ID
		OR A.ID = I.EXPENSE_ACCOUNT_ID

		LEFT OUTER JOIN
		VENDOR V
		ON A.ID= V.EXPENSE_ACCOUNT_ID
		LEFT OUTER JOIN
		SALES_PERSON SP
		ON
		A.ID = SP.EXPENSE_ACCOUNT_ID

		LEFT OUTER JOIN
		TAXAGENCY TA
		ON A.ID =
		TA.SALES_ACCOUNT_ID
		OR
		A.ID = PURCHASE_ACCOUNT_ID
		LEFT OUTER JOIN
		FIXED_ASSET FA
		ON A.ID =
		FA.ASSET_ACCOUNT_ID
		OR A.ID =
		FA.DEPRECIATION_EXPENSE_ACCOUNT_ID
		LEFT
		OUTER JOIN
		PAY_TAX PST
		ON
		A.ID=PST.PAYFROM_ACCOUNT_ID
		LEFT OUTER
		JOIN
		CASH_PURCHASE CP
		ON A.ID =
		CP.PAYFROM_ACCOUNT_ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON
		A.ID=CS.DEPOSIT_IN_ACCOUNT_ID
		LEFT OUTER JOIN
		CREDIT_CARD_CHARGES CCC
		ON
		A.ID = CCC.PAYFROM_ACCOUNT_ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON A.ID = CCM.ACCOUNT_ID
		LEFT OUTER JOIN
		CUSTOMER_REFUND CF
		ON A.ID =
		CF.PAYFROM_ACCOUNT_ID
		LEFT OUTER JOIN
		TRANSFER_FUND TF
		ON A.ID =
		TF.DEPOSIT_IN_ID
		OR A.ID =
		TF.CASH_BACK_ACCOUNT_ID
		LEFT JOIN MAKE_DEPOSIT
		MD
		ON A.ID=MD.DEPOSIT_TO
		LEFT JOIN TRANSACTION_DEPOSIT_ITEM TDI
		ON A.ID
		=TDI.ACCOUNT_ID
		LEFT OUTER JOIN
		PAY_BILL PB
		ON A.ID=PB.PAYFROM_ID
		LEFT
		OUTER JOIN
		PURCHASE_ORDER PO
		ON
		A.ID = PO.SHIP_TO_ID
		LEFT OUTER JOIN
		RECEIVE_PAYMENT
		RP
		ON A.ID =
		RP.ACCOUNT_ID
		LEFT OUTER JOIN
		PAY_EXPENSE PE
		ON A.ID =
		PE.ACCOUNT_ID
		LEFT
		OUTER JOIN
		WRITE_CHECKS WC
		ON A.ID =
		WC.ACCOUNT_ID
		LEFT
		OUTER
		JOIN
		TRANSACTION_ITEM TI
		ON A.ID
		= TI.ACCOUNT_ID
		LEFT OUTER JOIN
		TRANSACTION_PAYBILL TPB
		ON A.ID
		=
		TPB.DISCOUNT_ID
		LEFT
		OUTER JOIN
		TRANSACTION_RECEIVE_PAYMENT TRP
		ON A.ID
		=
		TRP.DISCOUNT_ID
		OR
		A.ID =
		TRP.WRITE_OFF_ID
		LEFT OUTER JOIN
		TRANSACTION_MAKE_DEPOSIT_ENTRIES
		TMDE
		ON A.ID = TMDE.ACCOUNT_ID
		LEFT
		OUTER JOIN
		TRANSACTION_EXPENSE TE
		ON
		A.ID =
		TE.ACCOUNT_ID
		WHERE A.ID =
		:inputId AND A.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeleteItem">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="SALES_ORDER_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_EXPENSE_ID" type="long" />
		<return-scalar column="STOCK_ADJUSTMENT_ID" type="long" />
		<return-scalar column="STOCK_TRANSFER_ID" type="long" />

		SELECT SO.ID AS SALES_ORDER_ID,
		TI.ID AS TRANSACTION_ITEM_ID,
		TE.ID AS
		TRANSACTION_EXPENSE_ID,
		SA.ID AS STOCK_ADJUSTMENT_ID,
		ST.ID AS
		STOCK_TRANSFER_ID
		FROM ITEM I
		LEFT OUTER JOIN
		SALES_ORDER SO
		ON
		I.ID=SO.ITEM_ID
		LEFT OUTER JOIN
		TRANSACTION_ITEM TI
		ON I.ID = TI.ITEM_ID
		LEFT OUTER JOIN
		TRANSACTION_EXPENSE TE
		ON I.ID = TE.ITEM_ID
		LEFT OUTER
		JOIN
		STOCK_ADJUSTMENT_ITEM SA
		ON SA.ITEM = I.ID
		LEFT OUTER JOIN
		STOCK_TRANSFER_ITEM ST
		ON ST.ITEM = I.ID
		WHERE I.ID =
		:inputId AND
		I.COMPANY_ID=:companyId LIMIT 1
	</sql-query>



	<sql-query name="canDeleteCustomerGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />

		SELECT C.ID AS CUSTOMER_ID
		FROM CUSTOMER_GROUP CG
		LEFT OUTER JOIN
		CUSTOMER C
		ON CG.ID=C.CUSTOMER_GROUP_ID
		WHERE CG.ID = :inputId AND
		CG.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeleteVendorGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />

		SELECT V.ID AS VENDOR_ID
		FROM VENDOR_GROUP VG
		LEFT OUTER JOIN
		VENDOR V
		ON
		VG.ID=V.VENDOR_GROUP_ID
		WHERE VG.ID = :inputId AND
		VG.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeletePaymentTerms">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="TAX_AGENCY_ID" type="long" />
		<return-scalar column="ENTER_BILL_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		<return-scalar column="INVOICE_ID" type="long" />

		SELECT C.ID AS CUSTOMER_ID,
		V.ID AS VENDOR_ID,
		TA.ID AS TAX_AGENCY_ID,
		EB.ID AS ENTER_BILL_ID,
		ES.ID AS ESTIMATE_ID,
		INV.ID AS INVOICE_ID
		FROM
		PAYMENTTERMS PT
		LEFT OUTER JOIN
		CUSTOMER C
		ON PT.ID = C.PAYMENT_TERM_ID
		LEFT OUTER JOIN
		VENDOR V
		ON PT.ID = V.PAYMENT_TERMS_ID
		LEFT OUTER JOIN
		TAXAGENCY TA
		ON PT.ID = TA.PAYMENT_TERM
		LEFT OUTER JOIN
		ENTER_BILL EB
		ON
		PT.ID = EB.PAYMENT_TERM_ID
		LEFT OUTER JOIN
		ESTIMATE ES
		ON PT.ID =
		ES.PAYMENT_TERMS_ID
		LEFT OUTER JOIN
		INVOICE INV
		ON
		PT.ID=INV.PAYMENT_TERMS_ID
		WHERE PT.ID = :inputId AND
		PT.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteShippingTerms">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="COMPANY_ID" type="long" />

		SELECT C.ID AS COMPANY_ID
		FROM SHIPPINGTERMS ST
		LEFT OUTER JOIN
		COMPANY C
		ON ST.ID = C.CP_DEFAULT_SHIPPING_TERM
		WHERE ST.ID = :inputId AND
		ST.COMPANY_ID=:companyId
		LIMIT 1

	</sql-query>

	<sql-query name="canDeleteShippingMethod">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="CASHSALES_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />

		SELECT C.ID AS CUSTOMER_ID,
		V.ID AS VENDOR_ID,
		CS.ID AS CASHSALES_ID,
		I.ID AS ITEM_ID
		FROM SHIPPINGMETHOD SM
		LEFT OUTER JOIN
		CUSTOMER C
		ON SM.ID
		= C.SHIPPING_METHOD_ID
		LEFT OUTER JOIN
		VENDOR V
		ON SM.ID =
		V.SHIPPING_METHOD_ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON SM.ID =
		CS.SHIPPING_METHOD_ID
		LEFT OUTER JOIN
		INVOICE I
		ON SM.ID =
		I.SHIPPING_METHOD_ID
		WHERE SM.ID = :inputId AND
		SM.COMPANY_ID=:companyId LIMIT 1

	</sql-query>

	<sql-query name="canDeletePriceLevel">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CASHSALES_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />

		SELECT C.ID AS CUSTOMER_ID,
		CS.ID AS CASHSALES_ID,
		CCM.ID AS
		CUSTOMER_CREDIT_MEMO_ID,
		ES.ID AS ESTIMATE_ID,
		I.ID AS ITEM_ID
		FROM
		PRICELEVEL P
		LEFT OUTER JOIN
		CUSTOMER C
		ON P.ID = C.PRICE_LEVEL_ID
		LEFT
		OUTER JOIN
		CASH_SALES CS
		ON P.ID= CS.PRICE_LEVEL_ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON P.ID = CCM.PRICE_LEVEL_ID
		LEFT OUTER JOIN
		ESTIMATE ES
		ON P.ID = ES.PRICE_LEVEL_ID
		LEFT OUTER JOIN
		INVOICE I
		ON
		P.ID=I.PRICE_LEVEL_ID
		WHERE P.ID = :inputId AND
		P.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeleteItemGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ITEM_ID" type="long" />

		SELECT
		I.ID AS ITEM_ID

		FROM ITEMGROUP IG

		LEFT OUTER JOIN
		ITEM I
		ON IG.ID =
		I.ITEMGROUP_ID
		WHERE IG.ID = :inputId AND IG.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>
	<sql-query name="canDeleteLocation">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANS_ID" type="long" />
		SELECT
		T.ID AS TRANS_ID
		FROM LOCATION L
		LEFT OUTER JOIN
		TRANSACTION T
		ON
		L.ID = T.LOCATION_ID
		WHERE L.ID = :inputId AND L.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>
	<sql-query name="canDeleteCurrency">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANS_ID" type="long" />
		SELECT
		T.ID AS TRANS_ID
		FROM CURRENCY C
		LEFT OUTER JOIN
		TRANSACTION T
		ON
		C.ID = T.CURRENCY
		WHERE C.ID = :inputId AND C.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>
	<sql-query name="canDeleteAccounterClass">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		SELECT TRANS.ID AS TRANSACTION_ID,
		TRANS_ITEM.ID AS TRANSACTION_ITEM_ID
		FROM ACCOUNTER_CLASS AC
		LEFT OUTER JOIN TRANSACTION TRANS
		ON
		TRANS.TRANSACTION_ACCOUNTER_CLASS=:inputId
		LEFT OUTER JOIN
		TRANSACTION_ITEM TRANS_ITEM
		ON
		TRANS_ITEM.TRANS_ITEM_ACCOUNTER_CLASS=:inputId
		WHERE AC.ID=:inputId AND
		AC.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>


	<sql-query name="canDeleteSalesPerson">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CASHSALES_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />

		SELECT C.ID AS CUSTOMER_ID,
		CS.ID AS CASHSALES_ID,
		CCM.ID AS
		CUSTOMER_CREDIT_MEMO_ID,
		ES.ID AS ESTIMATE_ID,
		I.ID AS ITEM_ID,
		WC.ID AS
		WRITE_CHECK_ID

		FROM SALES_PERSON SP

		LEFT OUTER JOIN
		CUSTOMER C
		ON SP.ID=
		C.SALES_PERSON_ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON SP.ID =
		CS.SALES_PERSON_ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON SP.ID =
		CCM.SALES_PERSON_ID
		LEFT OUTER JOIN
		ESTIMATE ES
		ON SP.ID =
		ES.SALES_PERSON_ID
		LEFT OUTER JOIN
		INVOICE I
		ON SP.ID = I.SALES_PERSON_ID
		LEFT OUTER JOIN
		WRITE_CHECKS WC
		ON SP.ID = WC.SALES_PERSON_ID
		WHERE SP.ID
		= :inputId AND SP.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteCreditRating">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />

		SELECT
		C.ID AS CUSTOMER_ID

		FROM CREDITRATING CR

		LEFT OUTER JOIN
		CUSTOMER C
		ON CR.ID= C.CREDIT_RATING_ID
		WHERE CR.ID = :inputId AND
		CR.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeletePaySalesTax">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />

		SELECT P.ID AS ID

		FROM PAY_TAX P
		LEFT JOIN TRANSACTION T ON T.ID=P.ID

		WHERE P.ID IS NULL AND P.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT
		1
	</sql-query>

	<sql-query name="canDeleteTAXAgency">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="VAT_RETURN_ID" type="long" />

		SELECT
		TI.ID AS TAX_ITEM_ID,
		VR.ID AS VAT_RETURN_ID

		FROM TAXAGENCY T

		LEFT
		OUTER JOIN
		TAX_ITEM TI
		ON
		TI.TAX_AGENCY = T.ID
		LEFT OUTER JOIN
		TAX_RETURN
		VR
		ON VR.TAX_AGENCY =
		T.ID
		LEFT
		OUTER JOIN PAYEE P ON P.ID = T.ID
		WHERE
		T.ID = :inputId AND
		P.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteTAXItem">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TAX_ADJUSTMENT_ID" type="long" />
		<return-scalar column="TAX_ADJUSTMENT_ID" type="long" />
		<return-scalar column="TAX_RATE_CALCULATION_ID" type="long" />
		<return-scalar column="TAX_GROUP_ID" type="long" />
		<return-scalar column="TAX_CODE_ID" type="long" />

		SELECT
		TA.ID AS TAX_ADJUSTMENT_ID,
		VRC.ID
		AS TAX_RATE_CALCULATION_ID,
		TG.ID AS TAX_GROUP_ID,
		TC.ID AS TAX_CODE_ID

		FROM TAX_ITEM T

		LEFT OUTER
		JOIN
		TAX_ADJUSTMENT TA
		ON TA.TAX_ITEM = T.ID
		LEFT OUTER
		JOIN

		TAX_RATE_CALCULATION VRC
		ON VRC.TAX_ITEM_ID=T.ID
		LEFT OUTER JOIN
		TAX_GROUP_TAX_ITEM TGI
		ON TGI.TAX_ITEM_ID=T.ID
		LEFT OUTER JOIN
		TAX_GROUP
		TG
		ON TG.ID=TGI.TAX_GROUP_ID
		LEFT OUTER JOIN
		TAX_CODE TC
		ON
		TC.TAXITEMGROUP_PURCHASES = T.ID
		OR TC.TAXITEMGROUP_SALES = T.ID
		WHERE
		T.ID = :inputId AND T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteTAXCode">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="PAYEE_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />

		SELECT
		I.ID AS ITEM_ID,
		P.ID AS PAYEE_ID,
		TI.ID AS
		TRANSACTION_ITEM_ID

		FROM TAX_CODE T

		LEFT
		OUTER JOIN
		ITEM I
		ON
		I.TAX_CODE = T.ID
		LEFT OUTER JOIN
		PAYEE P
		ON
		P.TAX_CODE_ID = T.ID
		LEFT
		OUTER JOIN
		TRANSACTION_ITEM TI
		ON
		TI.TAX_CODE = T.ID

		WHERE T.ID = :inputId AND
		T.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeleteTAXGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TAX_CODE_ID" type="long" />

		SELECT
		TC.ID AS TAX_CODE_ID

		FROM TAX_GROUP T

		LEFT OUTER JOIN
		TAX_CODE TC
		ON TC.TAXITEMGROUP_PURCHASES = T.ID
		OR TC.TAXITEMGROUP_SALES = T.ID
		WHERE T.ID = :inputId AND T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteFiscalYear">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />

		SELECT
		F.ID AS ID

		FROM FISCAL_YEAR F

		WHERE F.ID IS NULL AND F.ID =
		:inputId AND F.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteUser">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />

		SELECT U.ID AS ID

		FROM USERS U

		WHERE U.ID IS NULL AND U.ID =:inputId AND
		U.COMPANY_ID=:companyId LIMIT 1

	</sql-query>

	<sql-query name="canDeleteFixedAsset">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="DEPRECIATION_ID" type="long" />

		SELECT
		D.ID AS DEPRECIATION_ID

		FROM FIXED_ASSET F

		LEFT OUTER JOIN
		DEPRECIATION D
		ON D.FIXED_ASSET_ID = F.ID
		WHERE F.ID = :inputId AND
		F.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteBankAccount">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_TRANSACTION_ID" type="long" />
		<!-- <return-scalar column="BUDGET_ID" type="long" /> -->
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="SALES_PERSON_ID" type="long" />
		<return-scalar column="TAX_AGENCY_ID" type="long" />
		<return-scalar column="FIXED_ASSET_ID" type="long" />
		<return-scalar column="CASH_PURCHASE_ID" type="long" />
		<return-scalar column="CASH_SALES_ID" type="long" />
		<return-scalar column="CREDIT_CARD_CHARGE_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="CUSTOMER_REFUND_ID" type="long" />
		<return-scalar column="MAKE_DEPOSIT_ID" type="long" />
		<return-scalar column="PAY_BILL_ID" type="long" />
		<return-scalar column="PURCHASE_ORDER_ID" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="PAY_EXPENSE_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		<return-scalar column="TRANSFER_FUND_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_PAY_BILL_ID" type="long" />
		<return-scalar column="TRANSACTION_RECEIVE_PAYMENT_ID"
			type="long" />
		<return-scalar column="TRANSACTION_MAKEDEPOSIT_ENTRIES_ID"
			type="long" />
		<return-scalar column="TRANSACTION_EXPENSE_ID" type="long" />
		<return-scalar column="TRANSACTION_DEPOSIT_ITEM_ID"
			type="long" />

		SELECT AC.ID AS ACCOUNT_ID,
		AT.ID AS ACCOUNT_TRANSACTION_ID,
		<!-- B.ID AS BUDGET_ID, -->
		C.ID AS CUSTOMER_ID,
		I.ID AS ITEM_ID,
		V.ID AS VENDOR_ID,
		SP.ID
		AS
		SALES_PERSON_ID,
		TA.ID AS TAX_AGENCY_ID,
		FA.ID AS FIXED_ASSET_ID,
		PST.ID
		AS PAY_TAX_ID,
		CP.ID AS CASH_PURCHASE_ID,
		CS.ID AS
		CASH_SALES_ID,
		CCC.ID
		AS CREDIT_CARD_CHARGE_ID,
		CCM.ID AS
		CUSTOMER_CREDIT_MEMO_ID,
		CF.ID AS
		CUSTOMER_REFUND_ID,
		MD.ID AS
		MAKE_DEPOSIT_ID,
		TDI.ID AS
		TRANSACTION_DEPOSIT_ITEM_ID,
		PB.ID AS
		PAY_BILL_ID,
		PO.ID
		AS
		PURCHASE_ORDER_ID,
		RP.ID
		AS RECEIVE_PAYMENT_ID,
		PE.ID AS
		PAY_EXPENSE_ID,
		WC.ID AS WRITE_CHECK_ID,
		TF.ID AS
		TRANSFER_FUND_ID,
		TI.ID
		AS
		TRANSACTION_ITEM_ID,
		TPB.ID AS
		TRANSACTION_PAY_BILL_ID,
		TRP.ID AS
		TRANSACTION_RECEIVE_PAYMENT_ID,
		TMDE.ID AS
		TRANSACTION_MAKEDEPOSIT_ENTRIES_ID,
		TE.ID AS
		TRANSACTION_EXPENSE_ID
		FROM
		ACCOUNT A
		LEFT OUTER JOIN
		ACCOUNT AC
		ON A.ID =
		AC.PARENT_ID
		OR A.ID =
		AC.LINKED_ID
		LEFT OUTER JOIN
		ACCOUNT_TRANSACTION AT
		ON A.ID =
		AT.ACCOUNT_ID
		<!-- LEFT OUTER JOIN BUDGET B ON A.ID = B.ACCOUNT_ID -->
		LEFT OUTER
		JOIN
		COMPANY C
		ON A.ID = C.ACCOUNTS_RECEIVABLE_ID
		OR A.ID =
		C.ACCOUNTS_PAYABLE_ID
		OR A.ID = C.OPENING_BALANCES_ID
		OR A.ID =
		C.RETAINED_EARNINGS_ID
		OR A.ID = C.OTHER_CASH_INCOME_ID
		OR A.ID =
		C.OTHER_CASH_EXPENSE_ID
		OR A.ID = C.CASH_DISCOUNTS_GIVEN
		OR A.ID =
		C.CASH_DISCOUNTS_TAKEN
		OR A.ID = C.TAX_LIABILITY_ACCOUNT_ID
		OR A.ID =
		C.VAT_FILED_LIABILITY_ACCOUNT_ID
		OR A.ID =
		C.PENDING_ITEM_RECEIPTS_ACCOUNT_ID
		LEFT OUTER
		JOIN
		ITEM I
		ON A.ID =
		I.INCOME_ACCOUNT_ID
		OR A.ID = I.EXPENSE_ACCOUNT_ID

		LEFT OUTER JOIN
		VENDOR V
		ON A.ID= V.EXPENSE_ACCOUNT_ID
		LEFT OUTER JOIN
		SALES_PERSON SP
		ON
		A.ID = SP.EXPENSE_ACCOUNT_ID

		LEFT OUTER JOIN
		TAXAGENCY TA
		ON A.ID =
		TA.SALES_ACCOUNT_ID
		OR
		A.ID = PURCHASE_ACCOUNT_ID
		LEFT OUTER JOIN
		FIXED_ASSET FA
		ON A.ID =
		FA.ASSET_ACCOUNT_ID
		OR A.ID =
		FA.DEPRECIATION_EXPENSE_ACCOUNT_ID
		LEFT
		OUTER JOIN
		PAY_TAX PST
		ON
		A.ID=PST.PAYFROM_ACCOUNT_ID
		LEFT OUTER
		JOIN
		CASH_PURCHASE CP
		ON A.ID =
		CP.PAYFROM_ACCOUNT_ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON
		A.ID=CS.DEPOSIT_IN_ACCOUNT_ID
		LEFT OUTER JOIN
		CREDIT_CARD_CHARGES CCC
		ON
		A.ID = CCC.PAYFROM_ACCOUNT_ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON A.ID = CCM.ACCOUNT_ID
		LEFT OUTER JOIN
		CUSTOMER_REFUND CF
		ON A.ID =
		CF.PAYFROM_ACCOUNT_ID
		LEFT OUTER JOIN
		MAKE_DEPOSIT MD
		ON A.ID =
		MD.DEPOSIT_TO
		LEFT OUTER JOIN
		TRANSACTION_DEPOSIT_ITEM TDI ON
		A.ID
		=TDI.ACCOUNT_ID
		LEFT OUTER JOIN
		PAY_BILL PB
		ON A.ID=PB.PAYFROM_ID
		LEFT
		OUTER JOIN
		PURCHASE_ORDER PO
		ON
		A.ID = PO.SHIP_TO_ID
		LEFT OUTER JOIN
		RECEIVE_PAYMENT RP
		ON A.ID =
		RP.ACCOUNT_ID
		LEFT OUTER JOIN
		PAY_EXPENSE PE
		ON A.ID = PE.ACCOUNT_ID
		LEFT
		OUTER JOIN
		WRITE_CHECKS WC
		ON A.ID =
		WC.ACCOUNT_ID
		LEFT OUTER JOIN
		TRANSFER_FUND TF
		ON A.ID =
		TF.DEPOSIT_IN_ID
		OR A.ID =
		TF.CASH_BACK_ACCOUNT_ID
		LEFT OUTER
		JOIN
		TRANSACTION_ITEM TI
		ON
		A.ID
		= TI.ACCOUNT_ID
		LEFT OUTER JOIN
		TRANSACTION_PAYBILL TPB
		ON A.ID =
		TPB.DISCOUNT_ID
		LEFT OUTER JOIN
		TRANSACTION_RECEIVE_PAYMENT TRP
		ON A.ID =
		TRP.DISCOUNT_ID
		OR A.ID =
		TRP.WRITE_OFF_ID
		LEFT OUTER JOIN
		TRANSACTION_MAKE_DEPOSIT_ENTRIES TMDE
		ON A.ID = TMDE.ACCOUNT_ID
		LEFT
		OUTER JOIN
		TRANSACTION_EXPENSE TE
		ON A.ID =
		TE.ACCOUNT_ID
		WHERE A.ID =
		:inputId AND A.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteInvoice">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		SELECT TR.ID AS RECEIVE_PAYMENT_ID FROM INVOICE I
		LEFT JOIN TRANSACTION
		T ON T.ID=I.ID
		LEFT JOIN
		TRANSACTION_RECEIVE_PAYMENT TR ON
		TR.INVOICE_ID=I.ID WHERE I.ID=:inputId AND
		T.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeleteReceivePayment">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="INVOICE_ID" type="long" />
		<return-scalar column="CREDITS_ID" type="long" />
		SELECT R.ID AS ID FROM RECEIVE_PAYMENT R LEFT JOIN TRANSACTION T
		ON
		T.ID=R.ID WHERE R.ID IS NULL AND R.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteEnterBill">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="TRANSACTION_PAYBILL_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		SELECT TP.ID AS TRANSACTION_PAYBILL_ID,ES.ID AS ESTIMATE_ID FROM
		ENTER_BILL E LEFT JOIN
		TRANSACTION T ON T.ID=E.ID
		LEFT JOIN
		TRANSACTION_PAYBILL TP ON
		TP.ENTER_BILL_ID=E.ID
		LEFT JOIN
		ENTERBILL_ESTIMATES IE ON IE.ENTER_BILL_ID=E.ID
		LEFT JOIN ESTIMATE ES
		ON ES.ID=IE.ELT AND ES.USED_INVOICE IS NOT NULL
		WHERE
		E.ID=:inputId AND
		T.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeletePayBill">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ENTER_BILL_ID" type="long" />
		<return-scalar column="CREDITS_ID" type="long" />
		SELECT P.ID AS ID FROM PAY_BILL P LEFT JOIN TRANSACTION T
		ON
		T.ID=P.ID
		WHERE P.ID IS NULL AND P.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT
		1
	</sql-query>

	<sql-query name="canDeleteCustomerCreditMemo">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />

		SELECT C.ID AS ID FROM CUSTOMER_CREDIT_MEMO C LEFT JOIN TRANSACTION T
		ON T.ID=C.ID WHERE C.ID IS NULL AND C.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1

	</sql-query>

	<sql-query name="canDeleteVendorCreditMemo">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />

		SELECT C.ID AS ID FROM VENDOR_CREDIT_MEMO C LEFT JOIN TRANSACTION T ON
		T.ID=C.ID WHERE C.ID IS NULL AND C.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1

	</sql-query>

	<sql-query name="canDeleteCreditCardCharge">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />
		SELECT CC.ID AS ID

		FROM CREDIT_CARD_CHARGES CC
		LEFT JOIN TRANSACTION T
		ON T.ID=CC.ID

		WHERE CC.ID IS NULL AND CC.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1

	</sql-query>

	<sql-query name="canDeleteBudget">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="BUDGET_ITEM_ID" type="long" />
		SELECT BI.ID AS BUDGET_ITEM_ID FROM BUDGET B LEFT JOIN
		BUDGETITEM BI
		ON
		BI.BUDGET_ID=B.ID WHERE B.COMPANY_ID=:companyId AND
		B.ID=:inputId
		LIMIT
		1
	</sql-query>


	<sql-query name="canDeleteCashPurchase">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />
		SELECT CC.ID AS ID

		FROM CASH_PURCHASE CC
		LEFT JOIN TRANSACTION T ON
		T.ID=CC.ID

		WHERE CC.ID IS NULL AND CC.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteTransferFund">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />

		SELECT TF.ID AS ID FROM TRANSFER_FUND TF LEFT JOIN TRANSACTION T ON
		T.ID=TF.ID WHERE TF.ID IS NULL AND TF.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1

	</sql-query>

	<sql-query name="canDeleteEstimate">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="INVOICE_ID" type="long" />
		<return-scalar column="ENTER_BILL_ID" type="long" />
		SELECT E.USED_INVOICE AS INVOICE_ID,EE.ENTER_BILL_ID AS ENTER_BILL_ID
		FROM ESTIMATE E LEFT JOIN TRANSACTION T ON T.ID=E.ID LEFT JOIN
		ENTERBILL_ESTIMATES EE ON EE.ELT=E.ID WHERE E.ID=:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteCustomerRefund">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		SELECT TR.ID AS RECEIVE_PAYMENT_ID FROM
		CUSTOMER_REFUND CR LEFT JOIN
		TRANSACTION T ON T.ID=CR.ID LEFT JOIN
		TRANSACTION_RECEIVE_PAYMENT TR ON
		TR.CUSTOMER_REFUND_ID=CR.ID
		WHERE CR.ID=:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteJournalEntry">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="PAYBILL_ID" type="long" />
		<return-scalar column="FIXED_ASSET_HIS_ID" type="long" />
		SELECT TR.ID AS RECEIVE_PAYMENT_ID,TP.ID AS PAYBILL_ID,FAH.ID AS
		FIXED_ASSET_HIS_ID FROM
		JOURNAL_ENTRY J LEFT JOIN TRANSACTION T ON
		T.ID=J.ID LEFT JOIN
		TRANSACTION_PAYBILL TP ON TP.JOURNAL_ENTRY_ID =
		J.ID LEFT JOIN
		TRANSACTION_RECEIVE_PAYMENT TR ON TR.JOURNAL_ENTRY_ID =
		J.ID
		LEFT JOIN FIXED_ASSET_HISTORY FAH ON FAH.JOURNAL_ENTRY_ID = J.ID
		WHERE
		J.ID=:inputId AND T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteCustomerPrePayment">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />
		SELECT C.ID AS ID FROM CUSTOMER_PREPAYMENT C LEFT JOIN TRANSACTION T
		ON T.ID=C.ID WHERE C.ID IS NULL AND C.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteCashSales">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />
		SELECT C.ID AS ID FROM CASH_SALES C LEFT JOIN TRANSACTION T
		ON
		T.ID=C.ID WHERE C.ID IS NULL AND C.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1
	</sql-query>

	<sql-query name="canDeleteWriteCheck">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ID" type="long" />
		SELECT C.ID AS ID FROM WRITE_CHECKS C LEFT JOIN TRANSACTION T
		ON
		T.ID=C.ID WHERE C.ID IS NULL AND C.ID =:inputId AND
		T.COMPANY_ID=:companyId LIMIT 1

	</sql-query>

	<sql-query name="createSalesPurchasesView">
		CREATE OR REPLACE
		VIEW SALES_PURCHASES_VIEW AS
		select
		T.COMPANY_ID as
		COMPANY_ID,
		T.ID as
		TRANSACTION_ID,
		C.ID as
		CUSTOMER_ID,
		V.ID as
		VENDOR_ID,
		P.NAME as NAME,
		case
		when T.T_TYPE = 1 or
		T.T_TYPE = 4 or
		T.T_TYPE = 8
		then CG.NAME
		when
		T.T_TYPE
		= 2 or T.T_TYPE = 6
		or T.T_TYPE
		=
		14 then
		VG.NAME
		end as
		GROUP_NAME,
		IT.TYPE as ITEM_TYPE,
		IG.NAME as
		ITEM_GROUP,
		T.T_TYPE as
		Type,

		T.T_DATE as DATE,
		T.NUMBER,
		T.MEMO as MEMO,
		case
		when
		T.T_TYPE=8 then
		I.DUE_DATE
		when T.T_TYPE=6 then
		EB.DUE_DATE
		else
		null
		end as DUE_DATE,
		PT.NAME as PAYMENT_TERMS,
		case
		when
		TI.ITEM_ID
		is not
		null
		then IT.NAME
		when
		TI.ACCOUNT_ID is not null
		then
		A.NAME
		end as
		ITEM_NAME,
		case
		when
		T.T_TYPE =
		4 OR T.T_TYPE = 14 then
		-1*TI.QTY_VALUE
		else
		TI.QTY_VALUE
		end
		as QUANTITY,
		TI.QTY_UNIT as UNIT,

		TI.UNIT_PRICE*T.CURRENCY_FACTOR as
		UNIT_PRICE,
		TI.DISCOUNT*T.CURRENCY_FACTOR as
		DISCOUNT,

		case
		when T.T_TYPE =
		4 OR
		T_TYPE = 14
		then
		-1*TI.LINE_TOTAL*T.CURRENCY_FACTOR
		else
		TI.LINE_TOTAL*T.CURRENCY_FACTOR
		end as AMOUNT,
		case
		when T.T_TYPE = 8
		then T.NUMBER
		<!-- (select T.NUMBER from TRANSACTION T left outer join INVOICE_ESTIMATES 
			IE on T.ID=IE.ESTIAMTE_ID) -->
		end
		as
		SO_OR_QUOTE_NO,
		case
		when T.T_TYPE = 1 then
		CS.DELIVERY_DATE
		When
		T.T_TYPE = 8 then
		I.DELIVERY_DATE
		when T.T_TYPE = 2
		then
		CP.DELIVERY_DATE
		When T.T_TYPE =
		6 then EB.DELIVERY_DATE
		else null
		end as
		SHIPMENT_OR_DELIVERY_DATE,

		IT.SALES_DESCRIPTION,
		IT.PURCHASE_DESCRIPTION,
		T.SAVE_STATUS as SAVE_STATUS,
		T.REFERENCE as
		REFERENCE,
		T.CURRENCY_FACTOR as CURRENCY_FACTOR
		from
		TRANSACTION T
		left
		outer join
		CASH_SALES CS
		on T.ID=CS.ID
		left outer
		join
		CUSTOMER_CREDIT_MEMO CCM
		on
		T.ID=CCM.ID
		left outer join
		INVOICE I
		on
		T.ID=I.ID
		left outer join
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		left outer join
		VENDOR_CREDIT_MEMO VCM
		on
		T.ID=VCM.ID
		left
		outer join
		ENTER_BILL EB
		on
		T.ID=EB.ID
		left outer join
		TRANSACTION_ITEM TI
		on T.ID =
		TI.TRANSACTION_ID
		left outer join
		CUSTOMER C
		on C.ID =
		CS.CUSTOMER_ID or
		C.ID = CCM.CUSTOMER_ID or C.ID =
		I.CUSTOMER_ID
		left
		outer join
		VENDOR V
		on
		V.ID = CP.VENDOR_ID or V.ID =
		VCM.VENDOR_ID or
		V.ID = EB.VENDOR_ID
		left
		outer join
		PAYEE P
		on P.ID = C.ID
		OR P.ID = V.ID
		left outer join
		PAYMENTTERMS PT
		on PT.ID =
		EB.PAYMENT_TERM_ID or PT.ID =
		I.PAYMENT_TERMS_ID
		left outer join
		CUSTOMER_GROUP CG
		on CG.ID =
		C.CUSTOMER_GROUP_ID
		left outer join
		VENDOR_GROUP VG
		on VG.ID =
		V.VENDOR_GROUP_ID
		left outer join
		ITEM IT
		on
		IT.ID = TI.ITEM_ID
		left outer
		join
		ITEMGROUP IG
		on IG.ID = IT.ITEMGROUP_ID
		left outer join
		ACCOUNT A
		on
		A.ID = TI.ACCOUNT_ID
		where T.SAVE_STATUS=203 and (TI.ITEM_ID is not
		null or TI.ACCOUNT_ID is
		not null) order by T.ID


	</sql-query>
	<sql-query name="createTransactionHistoryView">
		CREATE OR REPLACE VIEW
		TRANSACTION_HISTORY_VIEW AS
		select
		T.COMPANY_ID as
		COMPANY_ID,
		T.ID as
		TRANSACTION_ID,
		C.ID as
		CUSTOMER_ID,
		V.ID as VENDOR_ID,
		case
		when T.T_TYPE
		= 1 or T.T_TYPE = 4 or
		T.T_TYPE = 5 or T.T_TYPE = 8 or
		T.T_TYPE = 12 or
		T.T_TYPE = 10 or
		(T.T_TYPE = 15 AND
		WC.CUSTOMER_ID IS
		NOT NULL) or
		(T.T_TYPE = 16 AND
		P.TYPE = 1) or
		T.T_TYPE
		= 29
		then
		P.NAME
		when T.T_TYPE =
		2 or T.T_TYPE = 6
		or T.T_TYPE =
		11 or
		T.T_TYPE = 14 or
		T.T_TYPE = 3 or
		T.T_TYPE = 10 or
		(T.T_TYPE = 15 AND WC.VENDOR_ID IS NOT
		NULL) or
		(T.T_TYPE = 16
		AND
		P.TYPE = 2) OR T.T_TYPE = 26 OR
		T.T_TYPE = 27
		then
		P.NAME
		end as NAME,

		case when T.T_TYPE = 11
		THEN CASE
		WHEN PB.PAYBILL_TYPE
		= 2
		THEN 25
		ELSE
		T.T_TYPE
		END
		ELSE
		T.T_TYPE
		END as Type,

		T.T_DATE as DATE,

		T.NUMBER,

		case
		when
		T.T_TYPE = 1 or
		T.T_TYPE
		= 3 or
		T.T_TYPE = 8 or T.T_TYPE
		= 2 or
		T.T_TYPE
		=
		6 or T.T_TYPE
		= 27 or T.T_TYPE = 10
		then
		T.TOTAL *
		T.CURRENCY_FACTOR
		when T.T_TYPE = 4 or
		T.T_TYPE =
		14
		or
		T.T_TYPE = 29
		then
		-1*T.TOTAL * T.CURRENCY_FACTOR
		when
		T.T_TYPE =
		15
		then
		case
		when
		WC.PAY_TO_TYPE = 1
		then
		-1*T.TOTAL * T.CURRENCY_FACTOR
		when
		WC.PAY_TO_TYPE = 2
		then
		T.TOTAL *
		T.CURRENCY_FACTOR
		else
		0.0
		end

		when
		T.T_TYPE = 16
		then
		case
		when
		P.TYPE = 2
		then
		-1* T.TOTAL * T.CURRENCY_FACTOR
		else
		T.TOTAL * T.CURRENCY_FACTOR
		end
		else 0.0
		end as
		INVOICED_OR_TRANSASCTION_AMOUNT,

		case
		when
		T.T_TYPE = 1
		or
		T.T_TYPE = 3
		or
		T.T_TYPE = 2 or T.T_TYPE = 26 or
		T.T_TYPE = 27
		then
		T.TOTAL *
		T.CURRENCY_FACTOR
		when
		T.T_TYPE = 5 or
		T.T_TYPE = 15 or T.T_TYPE
		=
		11 or
		T.T_TYPE = 12
		then
		-1*T.TOTAL * T.CURRENCY_FACTOR
		else 0.0
		end as
		PAID_AMOUNT,

		case
		when
		T.T_TYPE
		= 1 or T.T_TYPE =
		3 or T.T_TYPE = 5
		or
		T.T_TYPE = 8 or
		T.T_TYPE =
		2 or
		T.T_TYPE = 14 or
		T.T_TYPE = 15 or
		T.T_TYPE
		= 27
		then
		T.TOTAL
		when
		T.T_TYPE = 11
		then
		case
		when
		PB.PAYBILL_TYPE
		= 1
		then
		case when
		(select
		sum(TPB.CASH_DISCOUNT * T.CURRENCY_FACTOR)
		from
		TRANSACTION_PAYBILL
		TPB where
		TPB.TRANSACTION_ID = T.ID and
		TPB.DISCOUNT_ID IS NOT NULL and
		TPB.CASH_DISCOUNT >0.0) is null

		then
		T.TOTAL
		else
		T.TOTAL
		+ (select
		sum(TPB.CASH_DISCOUNT* T.CURRENCY_FACTOR)
		from
		TRANSACTION_PAYBILL TPB where
		TPB.TRANSACTION_ID = T.ID and
		TPB.DISCOUNT_ID IS NOT NULL and
		TPB.CASH_DISCOUNT >0.0)
		end
		when
		PB.PAYBILL_TYPE = 2
		then
		T.TOTAL * T.CURRENCY_FACTOR
		end
		when
		T.T_TYPE = 16
		then
		case
		when P.TYPE
		= 1
		then
		T.TOTAL * T.CURRENCY_FACTOR
		else
		0.0
		end
		else
		0.0
		end as
		DEBIT,

		case
		when T.T_TYPE = 1
		or
		T.T_TYPE = 3 or T.T_TYPE = 4 or
		T.T_TYPE =
		2 or
		T.T_TYPE = 10 or
		T.T_TYPE = 6 or T.T_TYPE = 15 or
		T.T_TYPE = 27 or
		T.T_TYPE = 29
		then
		T.TOTAL * T.CURRENCY_FACTOR
		when
		T.T_TYPE = 12
		then
		(RP.AMOUNT +
		RP.TOTAL_CASH_DISCOUNT +
		RP.TOTAL_WRITE_OFF) * T.CURRENCY_FACTOR
		when T.T_TYPE =
		16
		then
		case
		when
		P.TYPE = 2
		then
		-1*T.TOTAL * T.CURRENCY_FACTOR
		else
		0.0
		end
		else
		0.0
		end as
		CREDIT,

		case
		when
		T.T_TYPE = 12
		then
		RP.TOTAL_CASH_DISCOUNT *
		T.CURRENCY_FACTOR
		when T.T_TYPE =
		11
		then
		(select
		sum(TPB.CASH_DISCOUNT*
		T.CURRENCY_FACTOR) from
		TRANSACTION_PAYBILL TPB where
		TPB.TRANSACTION_ID = T.ID)
		else
		0.0
		end as DISCOUNT,

		case
		when T.T_TYPE=8
		then
		I.DUE_DATE
		when T.T_TYPE=6
		then
		EB.DUE_DATE
		else
		null
		end as DUE_DATE,

		PT.NAME as PAYMENT_TERMS,

		T.SAVE_STATUS as SAVE_STATUS,
		T.REFERENCE as
		REFERENCE,

		CASE
		WHEN T.T_TYPE =11 AND PB.PAYBILL_TYPE=2 THEN
		NULL
		ELSE
		T.MEMO
		END as MEMO,

		case
		when T.T_TYPE = 12
		then
		RP.TOTAL_WRITE_OFF *
		T.CURRENCY_FACTOR
		else
		0.0
		end as
		WRITE_OFF,

		T.STATUS
		as PAYMENT_STATUS

		from
		TRANSACTION T
		left outer join
		CASH_SALES CS
		on
		T.ID=CS.ID
		left outer
		join
		CREDIT_CARD_CHARGES CCC
		on
		T.ID=CCC.ID
		left outer
		join
		CUSTOMER_CREDIT_MEMO CCM
		on T.ID=CCM.ID
		left
		outer join
		INVOICE I
		on
		T.ID=I.ID
		left outer join
		CUSTOMER_REFUND CR
		on
		T.ID=CR.ID
		left outer join
		RECEIVE_PAYMENT RP
		on T.ID=RP.ID
		left outer
		join
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		left outer join
		VENDOR_CREDIT_MEMO VCM
		on T.ID=VCM.ID
		left
		outer join
		ENTER_BILL EB
		on T.ID=EB.ID
		left outer join
		PAY_BILL PB
		on
		T.ID=PB.ID
		left outer join
		TRANSACTION_PAYBILL TPB
		on
		TPB.TRANSACTION_ID=PB.ID
		left outer join
		TRANSFER_FUND TF
		on T.ID=TF.ID

		left outer join
		WRITE_CHECKS WC
		on
		T.ID=WC.ID
		left outer join
		JOURNAL_ENTRY JE
		ON JE.ID=T.ID AND
		(SELECT
		PY.TYPE FROM
		PAYEE PY WHERE
		PY.ID=JE.PAYEE_ID AND JE.PAYEE_ID IS NOT
		NULL)
		IN (2,1)


		left outer join
		CUSTOMER_PREPAYMENT CPP
		on CPP.ID = T.ID
		left outer
		join
		CUSTOMER C
		on C.ID
		= CS.CUSTOMER_ID or C.ID =
		CCM.CUSTOMER_ID or
		C.ID =
		I.CUSTOMER_ID or
		C.ID = CR.CUSTOMER_ID or
		C.ID
		= RP.CUSTOMER_ID
		or C.ID = WC.CUSTOMER_ID
		or C.ID
		= JE.PAYEE_ID
		or C.ID =
		CPP.CUSTOMER_ID
		left outer join
		PAYMENTTERMS PT
		on
		PT.ID =
		EB.PAYMENT_TERM_ID or PT.ID =
		I.PAYMENT_TERMS_ID

		left outer
		join
		VENDOR
		V
		on V.ID = CP.VENDOR_ID or V.ID
		= VCM.VENDOR_ID or V.ID =
		EB.VENDOR_ID
		or
		V.ID = PB.VENDOR_ID or V.ID =
		CCC.VENDOR_ID
		or
		V.ID = WC.VENDOR_ID or V.ID = JE.PAYEE_ID

		left outer
		join
		PAYEE P
		on
		P.ID = C.ID OR P.ID = V.ID OR P.ID=JE.PAYEE_ID order by
		T.ID

	</sql-query>

	<sql-query name="createSalesPurchasesViewForclient">
		CREATE VIEW IF NOT EXISTS
		SALES_PURCHASES_VIEW AS
		select
		T.COMPANY_ID as
		COMPANY_ID,
		T.ID as
		TRANSACTION_ID,
		C.ID as
		CUSTOMER_ID,
		V.ID as
		VENDOR_ID,
		P.NAME as NAME,
		case
		when T.T_TYPE = 1 or
		T.T_TYPE = 4 or
		T.T_TYPE = 8
		then CG.NAME
		when
		T.T_TYPE
		= 2 or T.T_TYPE =
		6 or T.T_TYPE
		= 14 then
		VG.NAME
		end as
		GROUP_NAME,
		IT.TYPE as ITEM_TYPE,
		IG.NAME as
		ITEM_GROUP,
		T.T_TYPE as Type,

		T.T_DATE as DATE,
		T.NUMBER,
		T.MEMO as MEMO,
		case
		when
		T.T_TYPE=8 then
		I.DUE_DATE
		when T.T_TYPE=6 then
		EB.DUE_DATE
		else null
		end
		as DUE_DATE,
		PT.NAME as PAYMENT_TERMS,
		case
		when
		TI.ITEM_ID is not
		null
		then IT.NAME
		when TI.ACCOUNT_ID is not null
		then
		A.NAME
		end as
		ITEM_NAME,
		case
		when
		T.T_TYPE = 4 OR T.T_TYPE = 14 then
		-1*TI.QTY_VALUE
		else
		TI.QTY_VALUE
		end
		as QUANTITY,
		TI.QTY_UNIT as UNIT,

		TI.UNIT_PRICE as
		UNIT_PRICE,
		TI.DISCOUNT as
		DISCOUNT,

		case
		when T.T_TYPE =
		4 OR T_TYPE = 14
		then
		-1*LINE_TOTAL
		else
		TI.LINE_TOTAL
		end as AMOUNT,
		case
		when T.T_TYPE = 8
		then
		(select T.NUMBER
		from TRANSACTION T left outer join
		INVOICE_ESTIMATES IE
		on T.ID=IE.ESTIAMTE_ID)
		as
		SO_OR_QUOTE_NO,
		case
		when T.T_TYPE = 1 then
		CS.DELIVERY_DATE
		When
		T.T_TYPE
		= 8 then
		I.DELIVERY_DATE
		when T.T_TYPE = 2
		then
		CP.DELIVERY_DATE
		When
		T.T_TYPE =
		6 then EB.DELIVERY_DATE
		else null
		end
		as
		SHIPMENT_OR_DELIVERY_DATE,

		IT.SALES_DESCRIPTION,
		IT.PURCHASE_DESCRIPTION,
		T.SAVE_STATUS as SAVE_STATUS,
		T.REFERENCE as
		REFERENCE
		from
		TRANSACTION T
		left outer join
		CASH_SALES CS
		on T.ID=CS.ID
		left outer
		join
		CUSTOMER_CREDIT_MEMO CCM
		on T.ID=CCM.ID
		left outer join
		INVOICE I
		on
		T.ID=I.ID
		left outer join
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		left
		outer join
		VENDOR_CREDIT_MEMO VCM
		on T.ID=VCM.ID
		left
		outer join
		ENTER_BILL EB
		on
		T.ID=EB.ID
		left outer join
		TRANSACTION_ITEM TI
		on T.ID =
		TI.TRANSACTION_ID
		left outer join
		CUSTOMER C
		on C.ID =
		CS.CUSTOMER_ID or
		C.ID = CCM.CUSTOMER_ID or C.ID =
		I.CUSTOMER_ID
		left
		outer join
		VENDOR V
		on
		V.ID = CP.VENDOR_ID or V.ID = VCM.VENDOR_ID or
		V.ID = EB.VENDOR_ID
		left
		outer join
		PAYEE P
		on P.ID = C.ID OR P.ID = V.ID
		left outer join
		PAYMENTTERMS PT
		on PT.ID = EB.PAYMENT_TERM_ID or PT.ID =
		I.PAYMENT_TERMS_ID
		left outer join
		CUSTOMER_GROUP CG
		on CG.ID =
		C.CUSTOMER_GROUP_ID
		left outer join
		VENDOR_GROUP VG
		on VG.ID =
		V.VENDOR_GROUP_ID
		left outer join
		ITEM IT
		on IT.ID = TI.ITEM_ID
		left outer
		join
		ITEMGROUP IG
		on IG.ID = IT.ITEMGROUP_ID
		left outer join
		ACCOUNT A
		on
		A.ID = TI.ACCOUNT_ID
		where TI.ITEM_ID is not null or TI.ACCOUNT_ID is
		not null order by T.ID

	</sql-query>
	<sql-query name="createTransactionHistoryViewForclient">
		CREATE VIEW IF NOT EXISTS
		TRANSACTION_HISTORY_VIEW AS

		select
		T.COMPANY_ID as COMPANY_ID,
		T.ID as
		TRANSACTION_ID,
		C.ID as
		CUSTOMER_ID,
		V.ID as VENDOR_ID,
		case
		when T.T_TYPE
		= 1 or T.T_TYPE = 4 or
		T.T_TYPE = 5
		or T.T_TYPE = 8 or
		T.T_TYPE = 12 or
		T.T_TYPE = 10 or
		(T.T_TYPE = 15 AND
		WC.CUSTOMER_ID IS
		NOT NULL) or
		(T.T_TYPE =
		16 AND P.TYPE = 1) or
		T.T_TYPE
		= 29
		then
		P.NAME
		when T.T_TYPE =
		2 or
		T.T_TYPE = 6 or T.T_TYPE =
		11 or
		T.T_TYPE = 14 or
		T.T_TYPE = 3 or
		T.T_TYPE = 10 or
		(T.T_TYPE = 15 AND
		WC.VENDOR_ID IS NOT NULL) or
		(T.T_TYPE = 16
		AND
		P.TYPE = 2) OR
		T.T_TYPE =
		27
		then
		P.NAME
		end as NAME,

		T.T_TYPE as Type,

		T.T_DATE as DATE,

		T.NUMBER,

		case
		when T.T_TYPE = 1 or
		T.T_TYPE = 3 or
		T.T_TYPE = 8 or T.T_TYPE = 2 or
		T.T_TYPE = 6 or T.T_TYPE
		= 27 or T.T_TYPE = 10
		then
		T.TOTAL
		when T.T_TYPE = 4 or T.T_TYPE =
		14 or
		T.T_TYPE = 29
		then
		-1*T.TOTAL
		when T.T_TYPE =
		15
		then
		case
		when
		WC.PAY_TO_TYPE = 1
		then
		-1*T.TOTAL
		when
		WC.PAY_TO_TYPE = 2
		then
		T.TOTAL
		else
		0.0
		end

		when T.T_TYPE = 16
		then
		case
		when
		P.TYPE = 2
		then
		-1*
		TI.LINE_TOTAL
		else
		TI.LINE_TOTAL
		end
		else 0.0
		end as
		INVOICED_OR_TRANSASCTION_AMOUNT,

		case
		when
		T.T_TYPE = 1
		or T.T_TYPE = 3
		or
		T.T_TYPE = 2 or T.T_TYPE = 27
		then
		T.TOTAL
		when
		T.T_TYPE = 5 or
		T.T_TYPE =
		15 or T.T_TYPE = 11 or
		T.T_TYPE =
		12
		then
		-1*T.TOTAL
		else 0.0
		end as
		PAID_AMOUNT,

		case
		when
		T.T_TYPE
		=
		1 or
		T.T_TYPE = 3
		or T.T_TYPE = 5
		or
		T.T_TYPE = 8 or
		T.T_TYPE = 2 or
		T.T_TYPE
		= 14 or
		T.T_TYPE = 15 or
		T.T_TYPE
		= 27
		then
		T.TOTAL
		when
		T.T_TYPE =
		11
		then
		case
		when
		PB.PAYBILL_TYPE
		= 1
		then
		case when
		(select
		sum(TPB.CASH_DISCOUNT)
		from
		TRANSACTION_PAYBILL
		TPB where
		TPB.TRANSACTION_ID = T.ID and
		TPB.DISCOUNT_ID IS NOT NULL and
		TPB.CASH_DISCOUNT >0.0) is null

		then
		T.TOTAL
		else
		T.TOTAL
		+ (select
		sum(TPB.CASH_DISCOUNT)
		from
		TRANSACTION_PAYBILL TPB where
		TPB.TRANSACTION_ID = T.ID and
		TPB.DISCOUNT_ID IS NOT NULL and
		TPB.CASH_DISCOUNT >0.0)
		end
		when
		PB.PAYBILL_TYPE = 2
		then
		T.TOTAL
		end
		when
		T.T_TYPE = 16
		then
		case
		when P.TYPE
		= 1
		then
		TI.LINE_TOTAL
		else
		0.0
		end
		else
		0.0
		end as
		DEBIT,

		case
		when T.T_TYPE = 1
		or
		T.T_TYPE = 3 or T.T_TYPE = 4 or
		T.T_TYPE = 2 or
		T.T_TYPE = 10 or
		T.T_TYPE = 6 or T.T_TYPE = 15 or
		T.T_TYPE = 27 or
		T.T_TYPE = 29
		then
		T.TOTAL
		when T.T_TYPE = 12
		then
		RP.AMOUNT + RP.TOTAL_CASH_DISCOUNT +
		RP.TOTAL_WRITE_OFF
		when T.T_TYPE =
		16
		then
		case
		when P.TYPE = 2
		then
		-1*TI.LINE_TOTAL
		else
		0.0
		end
		else
		0.0
		end as
		CREDIT,

		case
		when T.T_TYPE = 12
		then
		RP.TOTAL_CASH_DISCOUNT
		when T.T_TYPE =
		11
		then
		(select
		sum(TPB.CASH_DISCOUNT) from
		TRANSACTION_PAYBILL TPB where
		TPB.TRANSACTION_ID = T.ID)
		else
		0.0
		end as DISCOUNT,

		case
		when T.T_TYPE=8
		then
		I.DUE_DATE
		when T.T_TYPE=6
		then
		EB.DUE_DATE
		else
		null
		end as DUE_DATE,

		PT.NAME as PAYMENT_TERMS,

		T.SAVE_STATUS as SAVE_STATUS,
		T.REFERENCE as
		REFERENCE,
		T.MEMO as MEMO,

		case
		when T.T_TYPE = 12
		then
		RP.TOTAL_WRITE_OFF
		else
		0.0
		end
		as WRITE_OFF,

		T.STATUS as PAYMENT_STATUS

		from
		TRANSACTION T
		left outer
		join
		CASH_SALES CS
		on T.ID=CS.ID
		left outer
		join
		CREDIT_CARD_CHARGES CCC
		on
		T.ID=CCC.ID
		left outer join
		CUSTOMER_CREDIT_MEMO CCM
		on T.ID=CCM.ID
		left
		outer join
		INVOICE I
		on
		T.ID=I.ID
		left outer join
		CUSTOMER_REFUND CR
		on
		T.ID=CR.ID
		left outer join
		RECEIVE_PAYMENT RP
		on T.ID=RP.ID
		left outer
		join
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		left outer join
		VENDOR_CREDIT_MEMO VCM
		on T.ID=VCM.ID
		left
		outer join
		ENTER_BILL EB
		on T.ID=EB.ID
		left outer join
		PAY_BILL PB
		on
		T.ID=PB.ID
		left outer join
		TRANSACTION_PAYBILL TPB
		on
		TPB.TRANSACTION_ID=PB.ID
		left outer join
		TRANSFER_FUND TF
		on T.ID=TF.ID

		left outer join
		WRITE_CHECKS WC
		on
		T.ID=WC.ID
		left outer join
		JOURNAL_ENTRY JE
		ON JE.ID=T.ID AND
		(SELECT
		PY.TYPE FROM
		PAYEE PY WHERE
		PY.ID=JE.PAYEE_ID AND JE.PAYEE_ID IS NOT
		NULL)
		IN (2,1)

		LEFT JOIN
		TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.ID

		left outer join
		CUSTOMER_PREPAYMENT CPP
		on CPP.ID = T.ID
		left outer
		join
		CUSTOMER C
		on C.ID
		= CS.CUSTOMER_ID or C.ID =
		CCM.CUSTOMER_ID or
		C.ID =
		I.CUSTOMER_ID or
		C.ID = CR.CUSTOMER_ID or
		C.ID = RP.CUSTOMER_ID
		or
		C.ID = WC.CUSTOMER_ID
		or C.ID = JE.PAYEE_ID
		or C.ID =
		CPP.CUSTOMER_ID
		left outer join
		PAYMENTTERMS PT
		on PT.ID =
		EB.PAYMENT_TERM_ID or PT.ID =
		I.PAYMENT_TERMS_ID

		left outer
		join
		VENDOR
		V
		on V.ID = CP.VENDOR_ID or V.ID
		= VCM.VENDOR_ID or V.ID =
		EB.VENDOR_ID
		or
		V.ID = PB.VENDOR_ID or V.ID =
		CCC.VENDOR_ID
		or
		V.ID = WC.VENDOR_ID or V.ID =
		JE_PAYEE_ID

		left outer
		join
		PAYEE P
		on
		P.ID = C.ID OR P.ID = V.ID OR
		P.ID=JE.PAYEE_ID order by T.ID

	</sql-query>


	<sql-query name="getCustomersList">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />
		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNTER_TYPE" type="int" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="CURRENT_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FIRST_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_SECOND_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_THIRD_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FOURTH_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_FIFTH_MONTH_TOTAL" type="double" />
		<return-scalar column="YEAR_TO_DATE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_CURRENCY_FACTOR"
			type="double" />
		<return-scalar column="PAYEE_CURRENCY" type="long" />
		SELECT P.IS_ACTIVE AS IS_ACTIVE,

		P.NAME AS CUSTOMER_NAME,
		P.TYPE AS
		ACCOUNTER_TYPE,
		P.ID AS ID,
		(CASE
		WHEN
		(SELECT
		COUNT(T1.TOTAL) FROM
		TRANSACTION T1 WHERE T.ID=T1.ID AND T1.T_DATE
		BETWEEN
		:currentMonthStartDateCal AND :currentMonthEndDateCal AND
		T1.SAVE_STATUS =203 AND T1.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 8
		THEN (SELECT I1.BALANCE_DUE FROM INVOICE I1 WHERE I1.ID
		=
		T.ID)
		WHEN
		T.T_TYPE = 4 OR T.T_TYPE=29 THEN (SELECT -1*CAP.BALANCE FROM
		CREDITS_AND_PAYMENTS CAP
		WHERE CAP.TRANSACTION_ID=T.ID)
		WHEN T.T_TYPE =
		5 THEN (SELECT CR1.BALANCE_DUE FROM CUSTOMER_REFUND CR1
		WHERE CR1.ID =
		T.ID)
		END
		FROM TRANSACTION T1 WHERE T.ID=T1.ID
		AND T1.T_DATE
		BETWEEN
		:currentMonthStartDateCal AND
		:currentMonthEndDateCal AND
		T1.SAVE_STATUS =203 AND T1.STATUS!=3)
		END) AS CURRENT_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT
		COUNT(T2.TOTAL) FROM TRANSACTION T2 WHERE T.ID=T2.ID
		AND T2.T_DATE
		BETWEEN :previousFirstMonthStartDateCal AND
		:previousFirstMonthEndDateCal AND T2.SAVE_STATUS =203 AND
		T2.STATUS!=3)
		= 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN T.T_TYPE = 8 THEN (SELECT
		I1.BALANCE_DUE
		FROM INVOICE I1 WHERE I1.ID
		= T.ID)
		WHEN T.T_TYPE = 4 OR
		T.T_TYPE=29
		THEN (SELECT -1*CAP.BALANCE FROM
		CREDITS_AND_PAYMENTS CAP
		WHERE
		CAP.TRANSACTION_ID=T.ID)
		WHEN T.T_TYPE = 5 THEN (SELECT
		CR1.BALANCE_DUE
		FROM CUSTOMER_REFUND CR1
		WHERE CR1.ID = T.ID)
		END FROM
		TRANSACTION T2
		WHERE T.ID=T2.ID AND T2.T_DATE
		BETWEEN
		:previousFirstMonthStartDateCal
		AND
		:previousFirstMonthEndDateCal AND
		T2.SAVE_STATUS =203 AND
		T2.STATUS!=3)
		END) AS
		PREVIOUS_FIRST_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT
		COUNT(T3.TOTAL) FROM
		TRANSACTION T3 WHERE T.ID=T3.ID AND T3.T_DATE
		BETWEEN
		:previousSecondMonthStartDateCal AND
		:previousSecondMonthEndDateCal AND
		T3.SAVE_STATUS =203 AND
		T3.STATUS!=3) =
		0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 8 THEN (SELECT
		I1.BALANCE_DUE FROM INVOICE I1 WHERE I1.ID
		=
		T.ID)
		WHEN T.T_TYPE = 4 OR
		T.T_TYPE=29 THEN (SELECT -1*CAP.BALANCE FROM
		CREDITS_AND_PAYMENTS CAP
		WHERE CAP.TRANSACTION_ID=T.ID)
		WHEN T.T_TYPE =
		5 THEN (SELECT
		CR1.BALANCE_DUE FROM CUSTOMER_REFUND CR1
		WHERE CR1.ID =
		T.ID)
		END FROM
		TRANSACTION T3 WHERE T.ID=T3.ID
		AND T3.T_DATE
		BETWEEN
		:previousSecondMonthStartDateCal AND
		:previousSecondMonthEndDateCal AND
		T3.SAVE_STATUS =203 AND T3.STATUS!=3)
		END) AS
		PREVIOUS_SECOND_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T4.TOTAL) FROM
		TRANSACTION T4 WHERE T.ID=T4.ID
		AND T4.T_DATE
		BETWEEN
		:previousThirdMonthStartDateCal AND
		:previousThirdMonthEndDateCal AND
		T4.SAVE_STATUS =203 AND T4.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 8 THEN (SELECT I1.BALANCE_DUE FROM INVOICE I1 WHERE I1.ID
		=
		T.ID)
		WHEN T.T_TYPE = 4 OR T.T_TYPE=29 THEN (SELECT -1*CAP.BALANCE FROM
		CREDITS_AND_PAYMENTS CAP
		WHERE CAP.TRANSACTION_ID=T.ID)
		WHEN T.T_TYPE =
		5 THEN (SELECT CR1.BALANCE_DUE FROM CUSTOMER_REFUND CR1
		WHERE CR1.ID =
		T.ID)
		END FROM
		TRANSACTION T4 WHERE T.ID=T4.ID AND T4.T_DATE
		BETWEEN
		:previousThirdMonthStartDateCal AND
		:previousThirdMonthEndDateCal AND
		T4.SAVE_STATUS =203 AND T4.STATUS!=3)
		END) AS
		PREVIOUS_THIRD_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T5.TOTAL) FROM
		TRANSACTION T5 WHERE T.ID=T5.ID AND T5.T_DATE
		BETWEEN
		:previousFourthMonthStartDateCal AND
		:previousFourthMonthEndDateCal AND
		T5.SAVE_STATUS =203 AND T5.STATUS!=3) =
		0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 8 THEN (SELECT I1.BALANCE_DUE FROM INVOICE I1 WHERE I1.ID
		=
		T.ID)
		WHEN T.T_TYPE = 4 OR T.T_TYPE=29 THEN (SELECT -1*CAP.BALANCE FROM
		CREDITS_AND_PAYMENTS CAP
		WHERE CAP.TRANSACTION_ID=T.ID)
		WHEN T.T_TYPE =
		5 THEN (SELECT CR1.BALANCE_DUE FROM CUSTOMER_REFUND CR1
		WHERE CR1.ID =
		T.ID)
		END FROM TRANSACTION T5 WHERE T.ID=T5.ID
		AND T5.T_DATE
		BETWEEN
		:previousFourthMonthStartDateCal AND
		:previousFourthMonthEndDateCal AND
		T5.SAVE_STATUS =203 AND T5.STATUS!=3)
		END
		) AS
		PREVIOUS_FOURTH_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T6.TOTAL) FROM
		TRANSACTION T6 WHERE T.ID=T6.ID
		AND T6.T_DATE
		BETWEEN
		:previousFifthMonthStartDateCal AND
		:previousFifthMonthEndDateCal AND
		T6.SAVE_STATUS =203 AND T6.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 8 THEN (SELECT I1.BALANCE_DUE FROM INVOICE I1 WHERE I1.ID
		=
		T.ID)
		WHEN T.T_TYPE = 4 OR T.T_TYPE=29 THEN (SELECT -1*CAP.BALANCE FROM
		CREDITS_AND_PAYMENTS CAP
		WHERE CAP.TRANSACTION_ID=T.ID)
		WHEN T.T_TYPE =
		5 THEN (SELECT CR1.BALANCE_DUE FROM CUSTOMER_REFUND CR1
		WHERE CR1.ID =
		T.ID)
		END FROM
		TRANSACTION T6 WHERE T.ID=T6.ID AND T6.T_DATE
		BETWEEN
		:previousFifthMonthStartDateCal AND
		:previousFifthMonthEndDateCal AND
		T6.SAVE_STATUS =203 AND T6.STATUS!=3)
		END
		)
		AS
		PREVIOUS_FIFTH_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T7.TOTAL) FROM
		TRANSACTION T7 WHERE T.ID=T7.ID
		AND T7.SAVE_STATUS =203 AND
		T7.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN T.T_TYPE = 8 THEN (SELECT
		I1.BALANCE_DUE FROM INVOICE I1 WHERE
		I1.ID
		= T.ID)
		WHEN T.T_TYPE = 4 OR
		T.T_TYPE=29 THEN (SELECT
		-1*CAP.BALANCE FROM
		CREDITS_AND_PAYMENTS CAP
		WHERE
		CAP.TRANSACTION_ID=T.ID)
		WHEN T.T_TYPE = 5 THEN (SELECT
		CR1.BALANCE_DUE
		FROM CUSTOMER_REFUND CR1
		WHERE CR1.ID = T.ID)
		END
		FROM
		TRANSACTION T7
		WHERE T.ID=T7.ID AND T7.SAVE_STATUS =203 AND
		T7.STATUS!=3)
		END
		) AS
		YEAR_TO_DATE,

		P.BALANCE AS
		BALANCE,

		CASE WHEN
		T.CURRENCY_FACTOR IS NULL
		THEN 1 ELSE T.CURRENCY_FACTOR END
		AS
		TRANSACTION_CURRENCY_FACTOR,

		P.CURRENCY AS PAYEE_CURRENCY

		FROM PAYEE P

		LEFT OUTER JOIN
		INVOICE I
		ON
		P.ID =
		I.CUSTOMER_ID

		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON
		CCM.CUSTOMER_ID
		= P.ID

		LEFT OUTER JOIN
		CUSTOMER_PREPAYMENT CP
		ON
		CP.CUSTOMER_ID = P.ID

		LEFT OUTER JOIN
		CUSTOMER_REFUND CR
		ON
		CR.CUSTOMER_ID = P.ID

		LEFT OUTER
		JOIN
		TRANSACTION T
		ON T.ID = I.ID
		OR T.ID
		= CCM.ID
		OR T.ID = CP.ID
		OR T.ID =
		CR.ID

		WHERE
		P.TYPE
		= 1 AND
		P.COMPANY_ID=:companyId AND P.IS_ACTIVE=:isActive
		ORDER BY
		P.NAME

	</sql-query>

	<sql-query name="getVendorsList">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />
		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNTER_TYPE" type="int" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="CURRENT_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FIRST_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_SECOND_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_THIRD_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FOURTH_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_FIFTH_MONTH_TOTAL" type="double" />
		<return-scalar column="YEAR_TO_DATE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_CURRENCY_FACTOR"
			type="double" />
		<return-scalar column="PAYEE_CURRENCY" type="long" />
		SELECT P.IS_ACTIVE AS IS_ACTIVE,

		P.NAME AS VENDOR_NAME,
		P.TYPE AS
		ACCOUNTER_TYPE,
		P.ID AS ID,
		(CASE
		WHEN
		(SELECT
		COUNT(T1.TOTAL) FROM
		TRANSACTION T1 WHERE T.ID=T1.ID AND T1.T_DATE
		BETWEEN
		:currentMonthStartDateCal AND :currentMonthEndDateCal AND
		T1.SAVE_STATUS =203 AND T1.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR
		T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1
		WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE =
		6 THEN
		(SELECT
		EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID = T.ID)
		END
		FROM
		TRANSACTION T1 WHERE T.ID=T1.ID
		AND T1.T_DATE
		BETWEEN
		:currentMonthStartDateCal AND
		:currentMonthEndDateCal AND
		T1.SAVE_STATUS =203 AND T1.STATUS!=3)
		END
		) AS CURRENT_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT
		COUNT(T2.TOTAL) FROM TRANSACTION T2 WHERE T.ID=T2.ID
		AND T2.T_DATE
		BETWEEN :previousFirstMonthStartDateCal AND
		:previousFirstMonthEndDateCal AND T2.SAVE_STATUS =203 AND
		T2.STATUS!=3)
		= 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN T.T_TYPE = 14 OR T.T_TYPE
		=11 THEN
		(SELECT -1*CP1.BALANCE FROM CREDITS_AND_PAYMENTS CP1 WHERE
		CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE = 6 THEN
		(SELECT EB1.BALANCE_DUE
		FROM ENTER_BILL EB1 WHERE EB1.ID = T.ID)
		END FROM
		TRANSACTION T2 WHERE
		T.ID=T2.ID AND T2.T_DATE
		BETWEEN
		:previousFirstMonthStartDateCal AND
		:previousFirstMonthEndDateCal AND
		T2.SAVE_STATUS =203 AND T2.STATUS!=3)
		END
		)
		AS PREVIOUS_FIRST_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T3.TOTAL)
		FROM
		TRANSACTION T3 WHERE T.ID=T3.ID
		AND T3.T_DATE
		BETWEEN
		:previousSecondMonthStartDateCal AND
		:previousSecondMonthEndDateCal AND
		T3.SAVE_STATUS =203 AND
		T3.STATUS!=3) =
		0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END FROM TRANSACTION T3 WHERE T.ID=T3.ID
		AND T3.T_DATE
		BETWEEN
		:previousSecondMonthStartDateCal AND
		:previousSecondMonthEndDateCal AND
		T3.SAVE_STATUS =203 AND T3.STATUS!=3)
		END
		) AS
		PREVIOUS_SECOND_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T4.TOTAL) FROM
		TRANSACTION T4 WHERE T.ID=T4.ID
		AND T4.T_DATE
		BETWEEN
		:previousThirdMonthStartDateCal AND
		:previousThirdMonthEndDateCal AND
		T4.SAVE_STATUS =203 AND T4.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END FROM
		TRANSACTION T4 WHERE T.ID=T4.ID AND T4.T_DATE
		BETWEEN
		:previousThirdMonthStartDateCal AND
		:previousThirdMonthEndDateCal AND
		T4.SAVE_STATUS =203 AND T4.STATUS!=3)
		END
		)
		AS
		PREVIOUS_THIRD_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T5.TOTAL) FROM
		TRANSACTION T5 WHERE T.ID=T5.ID
		AND T5.T_DATE
		BETWEEN
		:previousFourthMonthStartDateCal AND
		:previousFourthMonthEndDateCal AND
		T5.SAVE_STATUS =203 AND
		T5.STATUS!=3) =
		0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE
		=11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE
		CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE =
		6 THEN
		(SELECT EB1.BALANCE_DUE
		FROM ENTER_BILL EB1 WHERE EB1.ID = T.ID)
		END FROM TRANSACTION T5 WHERE
		T.ID=T5.ID
		AND T5.T_DATE
		BETWEEN
		:previousFourthMonthStartDateCal AND
		:previousFourthMonthEndDateCal AND
		T5.SAVE_STATUS =203 AND T5.STATUS!=3)
		END
		) AS
		PREVIOUS_FOURTH_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T6.TOTAL)
		FROM
		TRANSACTION T6 WHERE T.ID=T6.ID
		AND T6.T_DATE
		BETWEEN
		:previousFifthMonthStartDateCal AND
		:previousFifthMonthEndDateCal AND
		T6.SAVE_STATUS =203 AND T6.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END FROM
		TRANSACTION T6 WHERE T.ID=T6.ID AND T6.T_DATE
		BETWEEN
		:previousFifthMonthStartDateCal AND
		:previousFifthMonthEndDateCal AND
		T6.SAVE_STATUS =203 AND T6.STATUS!=3)
		END
		)
		AS
		PREVIOUS_FIFTH_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T7.TOTAL) FROM
		TRANSACTION T7 WHERE T.ID=T7.ID
		AND T7.SAVE_STATUS =203 AND
		T7.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN T.T_TYPE = 14 OR T.T_TYPE
		=11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE
		CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE
		FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END
		FROM TRANSACTION T7 WHERE
		T.ID=T7.ID AND T7.SAVE_STATUS =203
		AND
		T7.STATUS!=3)
		END
		) AS
		YEAR_TO_DATE,

		P.BALANCE AS
		BALANCE,

		CASE WHEN
		T.CURRENCY_FACTOR IS NULL
		THEN 1 ELSE T.CURRENCY_FACTOR END
		AS
		TRANSACTION_CURRENCY_FACTOR,

		P.CURRENCY AS PAYEE_CURRENCY

		FROM PAYEE P

		LEFT OUTER JOIN
		ENTER_BILL EB
		ON P.ID = EB.VENDOR_ID
		LEFT OUTER
		JOIN
		CREDITS_AND_PAYMENTS CP
		ON P.ID =
		CP.PAYEE_ID

		LEFT OUTER JOIN
		TRANSACTION T
		ON T.ID = EB.ID
		OR T.ID =
		CP.TRANSACTION_ID


		WHERE

		P.TYPE = 2
		AND P.COMPANY_ID=:companyId AND
		P.IS_ACTIVE=:isActive
		ORDER BY
		P.NAME
	</sql-query>

	<sql-query name="getTAXAgencyList">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />
		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNTER_TYPE" type="int" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="CURRENT_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FIRST_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_SECOND_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_THIRD_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FOURTH_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_FIFTH_MONTH_TOTAL" type="double" />
		<return-scalar column="YEAR_TO_DATE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_CURRENCY_FACTOR"
			type="double" />
		<return-scalar column="PAYEE_CURRENCY" type="long" />
		SELECT P.IS_ACTIVE AS IS_ACTIVE,

		P.NAME AS VENDOR_NAME,
		P.TYPE AS
		ACCOUNTER_TYPE,
		P.ID AS ID,
		(CASE
		WHEN
		(SELECT
		COUNT(T1.TOTAL) FROM
		TRANSACTION T1 WHERE T.ID=T1.ID AND T1.T_DATE
		BETWEEN
		:currentMonthStartDateCal AND :currentMonthEndDateCal AND
		T1.SAVE_STATUS =203 AND T1.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR
		T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1
		WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE =
		6 THEN
		(SELECT
		EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID = T.ID)
		END
		FROM
		TRANSACTION T1 WHERE T.ID=T1.ID
		AND T1.T_DATE
		BETWEEN
		:currentMonthStartDateCal AND
		:currentMonthEndDateCal AND
		T1.SAVE_STATUS =203 AND T1.STATUS!=3)
		END
		) AS CURRENT_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT
		COUNT(T2.TOTAL) FROM TRANSACTION T2 WHERE T.ID=T2.ID
		AND T2.T_DATE
		BETWEEN :previousFirstMonthStartDateCal AND
		:previousFirstMonthEndDateCal AND T2.SAVE_STATUS =203 AND
		T2.STATUS!=3)
		= 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN T.T_TYPE = 14 OR T.T_TYPE
		=11 THEN
		(SELECT -1*CP1.BALANCE FROM CREDITS_AND_PAYMENTS CP1 WHERE
		CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE = 6 THEN
		(SELECT EB1.BALANCE_DUE
		FROM ENTER_BILL EB1 WHERE EB1.ID = T.ID)
		END FROM
		TRANSACTION T2 WHERE
		T.ID=T2.ID AND T2.T_DATE
		BETWEEN
		:previousFirstMonthStartDateCal AND
		:previousFirstMonthEndDateCal AND
		T2.SAVE_STATUS =203 AND T2.STATUS!=3)
		END
		)
		AS PREVIOUS_FIRST_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T3.TOTAL)
		FROM
		TRANSACTION T3 WHERE T.ID=T3.ID
		AND T3.T_DATE
		BETWEEN
		:previousSecondMonthStartDateCal AND
		:previousSecondMonthEndDateCal AND
		T3.SAVE_STATUS =203 AND
		T3.STATUS!=3) =
		0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END FROM TRANSACTION T3 WHERE T.ID=T3.ID
		AND T3.T_DATE
		BETWEEN
		:previousSecondMonthStartDateCal AND
		:previousSecondMonthEndDateCal AND
		T3.SAVE_STATUS =203 AND T3.STATUS!=3)
		END
		) AS
		PREVIOUS_SECOND_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T4.TOTAL) FROM
		TRANSACTION T4 WHERE T.ID=T4.ID
		AND T4.T_DATE
		BETWEEN
		:previousThirdMonthStartDateCal AND
		:previousThirdMonthEndDateCal AND
		T4.SAVE_STATUS =203 AND T4.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END FROM
		TRANSACTION T4 WHERE T.ID=T4.ID AND T4.T_DATE
		BETWEEN
		:previousThirdMonthStartDateCal AND
		:previousThirdMonthEndDateCal AND
		T4.SAVE_STATUS =203 AND T4.STATUS!=3)
		END
		)
		AS
		PREVIOUS_THIRD_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T5.TOTAL) FROM
		TRANSACTION T5 WHERE T.ID=T5.ID
		AND T5.T_DATE
		BETWEEN
		:previousFourthMonthStartDateCal AND
		:previousFourthMonthEndDateCal AND
		T5.SAVE_STATUS =203 AND
		T5.STATUS!=3) =
		0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE
		=11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE
		CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE =
		6 THEN
		(SELECT EB1.BALANCE_DUE
		FROM ENTER_BILL EB1 WHERE EB1.ID = T.ID)
		END FROM TRANSACTION T5 WHERE
		T.ID=T5.ID
		AND T5.T_DATE
		BETWEEN
		:previousFourthMonthStartDateCal AND
		:previousFourthMonthEndDateCal AND
		T5.SAVE_STATUS =203 AND T5.STATUS!=3)
		END
		) AS
		PREVIOUS_FOURTH_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T6.TOTAL)
		FROM
		TRANSACTION T6 WHERE T.ID=T6.ID
		AND T6.T_DATE
		BETWEEN
		:previousFifthMonthStartDateCal AND
		:previousFifthMonthEndDateCal AND
		T6.SAVE_STATUS =203 AND T6.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN
		T.T_TYPE = 14 OR T.T_TYPE =11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END FROM
		TRANSACTION T6 WHERE T.ID=T6.ID AND T6.T_DATE
		BETWEEN
		:previousFifthMonthStartDateCal AND
		:previousFifthMonthEndDateCal AND
		T6.SAVE_STATUS =203 AND T6.STATUS!=3)
		END
		)
		AS
		PREVIOUS_FIFTH_MONTH_TOTAL,

		(CASE
		WHEN
		(SELECT COUNT(T7.TOTAL) FROM
		TRANSACTION T7 WHERE T.ID=T7.ID
		AND T7.SAVE_STATUS =203 AND
		T7.STATUS!=3) = 0
		THEN 0
		ELSE
		(SELECT CASE
		WHEN T.T_TYPE = 14 OR T.T_TYPE
		=11 THEN
		(SELECT -1*CP1.BALANCE FROM
		CREDITS_AND_PAYMENTS CP1 WHERE
		CP1.TRANSACTION_ID
		= T.ID)
		WHEN T.T_TYPE
		= 6 THEN
		(SELECT EB1.BALANCE_DUE
		FROM ENTER_BILL EB1 WHERE EB1.ID =
		T.ID)
		END
		FROM TRANSACTION T7 WHERE
		T.ID=T7.ID AND T7.SAVE_STATUS =203
		AND
		T7.STATUS!=3)
		END
		) AS
		YEAR_TO_DATE,

		P.BALANCE AS
		BALANCE,

		CASE WHEN
		T.CURRENCY_FACTOR IS NULL
		THEN 1 ELSE T.CURRENCY_FACTOR END
		AS
		TRANSACTION_CURRENCY_FACTOR,

		P.CURRENCY AS PAYEE_CURRENCY

		FROM PAYEE P

		LEFT OUTER JOIN
		ENTER_BILL EB
		ON P.ID = EB.VENDOR_ID
		LEFT OUTER
		JOIN
		CREDITS_AND_PAYMENTS CP
		ON P.ID =
		CP.PAYEE_ID

		LEFT OUTER JOIN
		TRANSACTION T
		ON T.ID = EB.ID
		OR T.ID =
		CP.TRANSACTION_ID


		WHERE

		P.TYPE = 4
		AND P.COMPANY_ID=:companyId AND
		P.IS_ACTIVE=:isActive
		ORDER BY
		P.NAME
	</sql-query>

	<sql-query name="getEGSandRCentriesFromSales">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ID" type="encryptedstring" />
		<return-scalar column="SOURCE_NAME" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />

		SELECT
		CASE
		WHEN
		T.T_TYPE = 8 THEN 8
		WHEN
		T.T_TYPE = 1 THEN 1
		WHEN
		T.T_TYPE =
		4 THEN 4
		END AS TRANSACTION_TYPE,
		T.T_DATE AS TRANSACTION_DATE,
		T.NUMBER
		AS TRANSACTION_NUMBER,
		T.ID AS ID,
		P.NAME AS SOURCE_NAME,
		TIG.DESCRIPTION AS MEMO,
		SUM(VRC.VAT_AMOUNT) AS AMOUNT

		FROM TRANSACTION
		T
		LEFT
		OUTER JOIN
		TAX_RATE_CALCULATION VRC
		ON T.ID = VRC.TRANSACTION_ID

		LEFT OUTER JOIN
		TAX_ITEM TI
		ON TI.ID = VRC.TAX_ITEM_ID

		LEFT OUTER JOIN
		TAX_ITEM_GROUPS TIG
		ON TIG.ID = VRC.TAX_ITEM_ID

		LEFT OUTER JOIN
		VATRETURNBOX VRB
		ON VRB.ID = TI.VAT_RETURN_BOX

		LEFT OUTER JOIN
		INVOICE I
		ON I.ID = T.ID
		LEFT OUTER
		JOIN
		CASH_SALES CS
		ON CS.ID
		= T.ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO
		CCM
		ON CCM.ID = T.ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID =
		I.CUSTOMER_ID
		OR
		P.ID = CS.CUSTOMER_ID
		OR P.ID =
		CCM.CUSTOMER_ID

		WHERE
		P.NAME IS NOT NULL
		AND P.COMPANY_ID=:companyId
		AND
		VRB.VAT_BOX = 'NONE'
		AND T.T_DATE BETWEEN
		:startDate AND :endDate

		GROUP
		BY VRC.TAX_ITEM_ID,
		T.ID, T.T_TYPE, T.T_DATE,
		T.NUMBER, P.NAME, TIG.DESCRIPTION

	</sql-query>


	<!-- To get reverse charge list detail report -->
	<sql-query name="getReverseChargeListDetailReportEntries">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="VAT_AMOUNT" type="double" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="VAT_ITEM_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="IS_PERCENTAGE" type="boolean" />
		<return-scalar column="VAT_RATE" type="double" />
		<return-scalar column="TRANSACTION_ID" type="string" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="LINE_TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="SALES_PRICE" type="double" />

		SELECT SUM(V.VAT_AMOUNT) AS VAT_AMOUNT,
		P.NAME AS CUSTOMER_NAME,
		VIG.DESCRIPTION AS VAT_ITEM_MEMO,
		T.NUMBER AS TRANSACTION_NUMBER,
		VIG.IS_PERCENTAGE AS IS_PERCENTAGE,
		VI.VAT_RATE AS VAT_RATE,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		SUM(V.LINE_TOTAL) AS
		LINE_TOTAL,
		T.T_DATE AS TRANSACTION_DATE,
		T.MEMO AS TRANSACTION_MEMO,
		TI.LINE_TOTAL AS SALES_PRICE

		FROM
		TAX_RATE_CALCULATION V

		LEFT OUTER JOIN
		TRANSACTION T ON T.ID =
		V.TRANSACTION_ID
		LEFT OUTER JOIN TAX_ITEM VI ON
		V.TAX_ITEM_ID = VI.ID
		LEFT OUTER JOIN TAX_ITEM_GROUPS VIG ON VI.ID =
		VIG.ID

		LEFT OUTER JOIN
		CASH_SALES CS ON CS.ID = T.ID
		LEFT OUTER JOIN
		INVOICE I ON I.ID = T.ID
		LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM ON
		CCM.ID = T.ID
		LEFT OUTER
		JOIN WRITE_CHECKS W ON W.ID = T.ID

		LEFT OUTER
		JOIN CUSTOMER C ON
		C.ID=CS.CUSTOMER_ID
		OR C.ID=I.CUSTOMER_ID
		OR
		C.ID=CCM.CUSTOMER_ID
		OR
		C.ID=W.CUSTOMER_ID
		LEFT OUTER JOIN PAYEE P ON
		P.ID = C.ID

		WHERE
		T.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN :startDate
		AND :endDate

		GROUP BY V.TAX_ITEM_ID
		ORDER BY TI.ID

	</sql-query>


	<!-- To get the customers who have same name or number -->
	<sql-query name="getCustomers">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="number" type="encryptedstring" />
		<query-param name="id" type="Long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />

		SELECT P.NAME AS NAME,
		C.NUMBER AS NUMBER

		FROM CUSTOMER C

		LEFT OUTER JOIN
		PAYEE P ON P.ID = C.ID

		WHERE P.COMPANY_ID=:companyId AND (CASE WHEN
		:number IS NULL
		THEN FALSE
		ELSE C.NUMBER =:number
		END OR
		P.NAME =:name)
		AND P.ID !=:id

	</sql-query>

	<sql-query name="getFixedAssets">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="number" type="encryptedstring" />
		<query-param name="id" type="Long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />

		SELECT FA.NAME AS NAME,
		FA.ASSET_NUMBER AS NUMBER

		FROM FIXED_ASSET FA

		WHERE FA.COMPANY_ID=:companyId AND (CASE WHEN :number
		IS NULL
		THEN FALSE
		ELSE FA.ASSET_NUMBER =:number
		END OR
		FA.NAME =:name)
		AND FA.ID !=:id

	</sql-query>

	<!-- To get the accounts who have same name or number -->
	<sql-query name="getAccounts">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="number" type="encryptedstring" />
		<query-param name="id" type="Long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />

		SELECT A.NAME AS NAME,
		A.A_NUMBER AS NUMBER

		FROM ACCOUNT A

		WHERE
		A.COMPANY_ID=:companyId AND
		(A.A_NUMBER =:number OR A.NAME =:name) AND
		A.ID !=:id


	</sql-query>

	<!-- To get least startdate and highest enddate -->
	<sql-query name="getMinStartDateAndMaxEndDate">
		<query-param name="companyId" type="long" />
		<return-scalar column="START_DATE" type="long" />
		<return-scalar column="END_DATE" type="long" />

		SELECT MIN(START_DATE) AS START_DATE,
		MAX(END_DATE) AS END_DATE

		FROM
		FISCAL_YEAR F WHERE F.COMPANY_ID=:companyId

	</sql-query>

	<!-- To get Box values of Filed Vat -->
	<sql-query name="getFiledBoxValues">
		<query-param name="companyId" type="long" />
		<query-param name="id" type="Long" />

		<return-scalar column="BOX_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />

		SELECT
		B.NAME AS BOX_NAME,
		B.AMOUNT AS TOTAL,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS NUMBER

		FROM BOX B

		LEFT OUTER JOIN
		TAX_RETURN V
		ON B.BOX_ID = V.ID
		LEFT OUTER JOIN TRANSACTION T ON T.ID =
		V.ID

		WHERE
		B.BOX_ID = :id AND B.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="getTaxItemGroupWithSameName">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="id" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />

		SELECT V.NAME FROM TAX_ITEM_GROUPS V WHERE V.NAME =:name AND V.ID
		!=:id AND
		V.COMPANY_ID=:companyId


	</sql-query>

	<sql-query name="getTAXCodeWithSameName">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="id" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />

		SELECT T.NAME FROM TAX_CODE T WHERE
		T.NAME =:name AND T.ID !=:id AND
		T.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="getItemGroupWithSameName">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />

		SELECT * FROM ITEMGROUP I WHERE I.NAME =:name AND I.ID !=:id AND
		I.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="getCreatableStatementForCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="Long" />
		<query-param name="endDate" type="Long" />
		<query-param name="payeeId" type="Long" />

		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="ADDRESS1" type="encryptedstring" />
		<return-scalar column="ADDRESS2" type="encryptedstring" />
		<return-scalar column="CITY" type="encryptedstring" />
		<return-scalar column="STATE" type="encryptedstring" />
		<return-scalar column="COUNTRY" type="encryptedstring" />
		<return-scalar column="ZIP" type="encryptedstring" />
		<return-scalar column="SALES_PERSON_NAME" type="encryptedstring" />
		<return-scalar column="SHIPPING_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_TERM_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />

		SELECT T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.T_DATE AS TRANSACTION_DATE,
		CASE
		WHEN T.T_TYPE = 8 THEN
		I.DUE_DATE
		ELSE
		T.T_DATE
		END AS DUE_DATE,
		T.TOTAL AS TOTAL,
		CASE
		WHEN T.T_TYPE = 4 THEN
		-1*CCM.BALANCE_DUE
		WHEN T.T_TYPE = 5 THEN
		CR.BALANCE_DUE
		WHEN T.T_TYPE =
		8 THEN
		I.BALANCE_DUE
		WHEN T.T_TYPE = 12 THEN
		-1*T.TOTAL
		WHEN T.T_TYPE = 16
		THEN
		T.TOTAL
		WHEN T.T_TYPE = 29 THEN
		-1*CPP.BALANCE_DUE
		END AS
		BALANCE,
		<!-- SUM(T.TOTAL) AS TOTAL, SUM(I.BALANCE_DUE) AS BALANCE, -->
		P.NAME AS CUSTOMER_NAME,
		PA.ADDRESS1 AS ADDRESS1,
		PA.STREET AS ADDRESS2,
		PA.CITY AS CITY,
		PA.STATE AS STATE,
		PA.COUNTRY AS COUNTRY,
		PA.ZIP AS ZIP,
		SP.FIRST_NAME AS SALES_PERSON_NAME,
		SM.NAME AS SHIPPING_METHOD_NAME,
		PT.NAME AS PAYMENT_TERM_NAME,
		T.ID AS TRANSACTION_ID,
		T.CURRENCY as
		CURRENCY, T.CURRENCY_FACTOR
		as CURRENCY_FACTOR

		FROM TRANSACTION T
		LEFT
		OUTER JOIN INVOICE I ON I.ID = T.ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM ON CCM.ID = T.ID
		LEFT OUTER JOIN
		CUSTOMER_REFUND CR ON CR.ID = T.ID
		LEFT OUTER JOIN RECEIVE_PAYMENT RP
		ON RP.ID = T.ID
		LEFT OUTER JOIN JOURNAL_ENTRY JE ON JE.ID = T.ID
		LEFT
		OUTER JOIN CUSTOMER_PREPAYMENT CPP ON CPP.ID = T.ID

		<!-- LEFT OUTER JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID = T.ID -->

		LEFT OUTER JOIN PAYEE P
		ON P.ID =
		I.CUSTOMER_ID
		OR P.ID = CCM.CUSTOMER_ID
		OR P.ID =
		CR.CUSTOMER_ID
		OR P.ID
		= RP.CUSTOMER_ID
		OR P.ID = JE.PAYEE_ID
		OR
		P.ID =
		CPP.CUSTOMER_ID

		LEFT
		OUTER JOIN PAYEE_ADDRESS PA ON PA.PAYEE_ID =
		P.ID
		LEFT OUTER JOIN
		CUSTOMER C ON C.ID = P.ID
		LEFT OUTER JOIN
		SALES_PERSON
		SP ON SP.ID =
		C.SALES_PERSON_ID
		LEFT OUTER JOIN
		SHIPPINGMETHOD SM ON
		SM.ID =
		C.SHIPPING_METHOD_ID
		LEFT OUTER JOIN
		PAYMENTTERMS PT ON PT.ID =
		C.PAYMENT_TERM_ID

		WHERE
		T.COMPANY_ID=:companyId AND (T.T_DATE between
		:startDate and :endDate)
		AND P.ID =:payeeId AND
		T.T_TYPE IN (4, 5,
		8,
		12, 16, 29) AND
		T.SAVE_STATUS =
		203 AND
		CASE WHEN (SELECT
		COUNT(PA2.TYPE)
		FROM
		PAYEE_ADDRESS PA2 WHERE
		PA2.PAYEE_ID = P.ID) != 0
		THEN PA.TYPE = 2
		ELSE
		TRUE
		END

		<!-- GROUP BY (T.T_DATE &lt; :startDate) -->

		ORDER BY T.T_DATE DESC

	</sql-query>

	<sql-query name="getOpeningBalanceForCustomerByDate">
		<query-param name="companyId" type="long" />
		<query-param name="uptoDate" type="Long" />
		<query-param name="payeeId" type="Long" />

		<return-scalar column="BALANCE" type="double" />

		SELECT
		SUM(T.TOTAL) AS BALANCE

		FROM TRANSACTION T
		LEFT
		OUTER JOIN INVOICE
		I ON I.ID = T.ID
		LEFT OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM ON CCM.ID =
		T.ID
		LEFT OUTER
		JOIN
		CUSTOMER_REFUND CR ON CR.ID = T.ID
		LEFT OUTER JOIN
		RECEIVE_PAYMENT
		RP
		ON RP.ID = T.ID
		LEFT OUTER JOIN JOURNAL_ENTRY JE ON
		JE.ID = T.ID
		LEFT
		OUTER JOIN CUSTOMER_PREPAYMENT CPP ON CPP.ID = T.ID

		<!-- LEFT OUTER JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID = T.ID -->

		LEFT OUTER JOIN PAYEE P
		ON P.ID =
		I.CUSTOMER_ID
		OR P.ID = CCM.CUSTOMER_ID
		OR P.ID =
		CR.CUSTOMER_ID
		OR P.ID
		= RP.CUSTOMER_ID
		OR P.ID = JE.PAYEE_ID
		OR
		P.ID =
		CPP.CUSTOMER_ID

		LEFT
		OUTER JOIN PAYEE_ADDRESS PA ON PA.PAYEE_ID =
		P.ID
		LEFT OUTER JOIN
		CUSTOMER C ON C.ID = P.ID
		LEFT OUTER JOIN
		SALES_PERSON
		SP ON SP.ID =
		C.SALES_PERSON_ID
		LEFT OUTER JOIN
		SHIPPINGMETHOD SM ON
		SM.ID =
		C.SHIPPING_METHOD_ID
		LEFT OUTER JOIN
		PAYMENTTERMS PT ON PT.ID =
		C.PAYMENT_TERM_ID

		WHERE
		T.COMPANY_ID=:companyId AND (T.T_DATE &lt;
		:uptoDate)
		AND P.ID =:payeeId
		AND
		T.T_TYPE IN (4, 5,
		8,
		12, 16, 29) AND
		T.SAVE_STATUS =
		203 AND
		CASE WHEN
		(SELECT
		COUNT(PA2.TYPE)
		FROM
		PAYEE_ADDRESS PA2 WHERE
		PA2.PAYEE_ID = P.ID)
		!= 0
		THEN PA.TYPE = 2
		ELSE
		TRUE
		END


	</sql-query>


	<sql-query name="getCreatableStatementForVendor">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="Long" />
		<query-param name="endDate" type="Long" />
		<query-param name="payeeId" type="Long" />

		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TOTAL" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />

		SELECT T.T_DATE AS TRANSACTION_DATE,
		CASE
		WHEN T.T_TYPE = 11 AND
		PB.PAYBILL_TYPE = 2 THEN 25 ELSE
		T.T_TYPE END AS
		TRANSACTION_TYPE,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_TOTAL,
		CASE
		WHEN
		T.T_TYPE = 6 THEN
		E.BALANCE_DUE
		<!--- WHEN T.T_TYPE = 3 THEN CC.BALANCE_DUE -->
		WHEN T.T_TYPE =
		14 THEN
		-1*VCM.BALANCE_DUE
		ELSE
		T.TOTAL
		END AS
		BALANCE,

		T.ID
		AS TRANSACTION_ID,
		T.CURRENCY as
		CURRENCY, T.CURRENCY_FACTOR
		as
		CURRENCY_FACTOR FROM
		TRANSACTION T

		LEFT
		OUTER
		JOIN
		ENTER_BILL
		E ON
		E.ID
		= T.ID
		LEFT OUTER JOIN
		VENDOR_CREDIT_MEMO VCM
		ON
		VCM.ID = T.ID
		LEFT OUTER
		JOIN
		WRITE_CHECKS WC ON
		T.ID = WC.ID
		LEFT
		OUTER
		JOIN
		CREDIT_CARD_CHARGES
		CC ON
		CC.ID=T.ID
		LEFT OUTER
		JOIN PAY_BILL
		PB ON
		PB.ID=T.ID
		LEFT OUTER JOIN
		JOURNAL_ENTRY JE ON JE.ID =
		T.ID
		LEFT
		OUTER
		JOIN
		EXPENSE EX ON EX.ID =
		T.ID
		<!-- LEFT OUTER JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID = T.ID -->

		LEFT
		OUTER
		JOIN PAYEE P
		ON
		P.ID =
		E.VENDOR_ID
		OR
		P.ID = VCM.VENDOR_ID
		OR P.ID
		=
		WC.VENDOR_ID
		OR P.ID =
		CC.VENDOR_ID
		OR P.ID =
		PB.VENDOR_ID
		OR P.ID =
		JE.PAYEE_ID
		OR P.ID = EX.ID

		WHERE T.T_TYPE IN
		(3,6,11,14,15,16,26,27)
		AND
		P.ID =:payeeId
		AND
		T.T_DATE
		BETWEEN
		:startDate AND :endDate
		AND
		T.SAVE_STATUS
		!=204 AND
		T.COMPANY_ID=:companyId



	</sql-query>

	<sql-query name="getOpeningBalanceForVendorByDate">
		<query-param name="companyId" type="long" />
		<query-param name="uptoDate" type="Long" />
		<query-param name="payeeId" type="Long" />

		<return-scalar column="BALANCE" type="double" />

		SELECT
		SUM(T.TOTAL) AS BALANCE

		FROM TRANSACTION T

		LEFT OUTER JOIN
		ENTER_BILL E ON E.ID = T.ID
		LEFT OUTER
		JOIN
		VENDOR_CREDIT_MEMO VCM ON
		VCM.ID = T.ID
		LEFT OUTER JOIN
		WRITE_CHECKS WC ON T.ID = WC.ID
		LEFT OUTER
		JOIN
		CREDIT_CARD_CHARGES CC
		ON CC.ID=T.ID
		LEFT OUTER JOIN
		PAY_BILL PB ON
		PB.ID=T.ID
		LEFT OUTER JOIN
		JOURNAL_ENTRY JE ON JE.ID = T.ID
		LEFT
		OUTER
		JOIN
		EXPENSE EX ON EX.ID = T.ID
		LEFT OUTER JOIN
		PAYEE P ON P.ID =
		E.VENDOR_ID OR P.ID = VCM.VENDOR_ID OR P.ID =
		WC.VENDOR_ID
		OR P.ID =
		CC.VENDOR_ID OR P.ID = PB.VENDOR_ID OR P.ID =
		JE.PAYEE_ID OR P.ID =
		EX.ID

		WHERE T.T_TYPE IN
		(3,6,11,14,15,16,26,27)
		AND
		P.ID =:payeeId
		AND
		T.T_DATE &lt; :uptoDate
		AND
		T.STATUS
		!=204 AND
		T.COMPANY_ID=:companyId
	</sql-query>


	<sql-query name="getInvoicesDue">
		<query-param name="companyId" type="long" />
		<query-param name="presentDate" type="long" />

		SELECT SUM(I.BALANCE_DUE*T.CURRENCY_FACTOR)

		FROM INVOICE I
		LEFT OUTER
		JOIN TRANSACTION T
		ON T.ID = I.ID

		WHERE T.COMPANY_ID=:companyId AND
		T.SAVE_STATUS =203 AND T.SAVE_STATUS !=
		202 AND 
		CASE WHEN :presentDate = 0
		THEN TRUE
		ELSE
		:presentDate &gt; I.DUE_DATE
		END

	</sql-query>

	<sql-query name="getBillsDue">
		<query-param name="companyId" type="long" />
		<query-param name="presentDate" type="long" />

		SELECT SUM(E.BALANCE_DUE*T.CURRENCY_FACTOR)

		FROM ENTER_BILL E
		LEFT OUTER
		JOIN TRANSACTION
		T
		ON T.ID = E.ID

		WHERE T.COMPANY_ID=:companyId AND
		T.SAVE_STATUS =203 AND T.SAVE_STATUS !=
		202 AND 
		CASE WHEN :presentDate = 0
		THEN TRUE
		ELSE
		:presentDate &gt; E.DUE_DATE
		END

	</sql-query>

	<sql-query name="getPointsForBankAccount">
		<query-param name="companyId" type="long" />
		<query-param name="accountId" type="long" />
		<query-param name="previousThreeDaysBackDateCal" type="long" />
		<query-param name="previousTwoDaysBackDateCal" type="long" />
		<query-param name="previousOneDayBackDateCal" type="long" />

		<return-scalar column="PREVOIUS_THREE_DAYS_BACK_AMOUNT"
			type="double" />
		<return-scalar column="PREVOIUS_TWO_DAYS_BACK_AMOUNT"
			type="double" />
		<return-scalar column="PREVOIUS_ONE_DAY_BACK_AMOUNT"
			type="double" />
		<return-scalar column="CURRENT_DAY_AMOUNT" type="double" />

		SELECT
		A.TOTAL_BALANCE - CASE WHEN (SELECT
		SUM(AT.AMOUNT) FROM
		ACCOUNT_TRANSACTION AT
		LEFT OUTER JOIN TRANSACTION
		T ON T.ID =
		AT.TRANSACTION_ID
		WHERE AT.ACCOUNT_ID = A.ID AND T.T_DATE
		&gt;:previousThreeDaysBackDateCal
		GROUP BY A.ID) IS NOT NULL
		THEN
		(SELECT SUM(AT.AMOUNT/T.CURRENCY_FACTOR) FROM
		ACCOUNT_TRANSACTION AT
		LEFT OUTER JOIN
		TRANSACTION T ON T.ID = AT.TRANSACTION_ID
		WHERE
		AT.ACCOUNT_ID = A.ID
		AND T.T_DATE &gt;:previousThreeDaysBackDateCal
		GROUP BY A.ID)
		ELSE 0
		END
		AS PREVOIUS_THREE_DAYS_BACK_AMOUNT,

		A.TOTAL_BALANCE - CASE WHEN (SELECT
		SUM(AT.AMOUNT) FROM
		ACCOUNT_TRANSACTION AT
		LEFT OUTER JOIN TRANSACTION T
		ON T.ID =
		AT.TRANSACTION_ID
		WHERE AT.ACCOUNT_ID = A.ID AND T.T_DATE
		&gt;:previousTwoDaysBackDateCal
		GROUP BY A.ID) IS NOT NULL
		THEN (SELECT
		SUM(AT.AMOUNT/T.CURRENCY_FACTOR) FROM
		ACCOUNT_TRANSACTION AT
		LEFT OUTER
		JOIN TRANSACTION T
		ON T.ID = AT.TRANSACTION_ID
		WHERE AT.ACCOUNT_ID =
		A.ID AND T.T_DATE
		&gt;:previousTwoDaysBackDateCal
		GROUP BY A.ID)
		ELSE
		0
		END
		AS
		PREVOIUS_TWO_DAYS_BACK_AMOUNT,

		A.TOTAL_BALANCE - CASE WHEN (SELECT
		SUM(AT.AMOUNT) FROM
		ACCOUNT_TRANSACTION AT
		LEFT OUTER JOIN TRANSACTION T
		ON T.ID = AT.TRANSACTION_ID
		WHERE AT.ACCOUNT_ID = A.ID AND T.T_DATE
		&gt;:previousOneDayBackDateCal
		GROUP BY A.ID) IS NOT NULL
		THEN (SELECT
		SUM(AT.AMOUNT/T.CURRENCY_FACTOR) FROM
		ACCOUNT_TRANSACTION AT
		LEFT OUTER
		JOIN TRANSACTION T
		ON T.ID = AT.TRANSACTION_ID
		WHERE AT.ACCOUNT_ID =
		A.ID AND T.T_DATE
		&gt;:previousOneDayBackDateCal
		GROUP BY A.ID)
		ELSE
		0
		END
		AS
		PREVOIUS_ONE_DAY_BACK_AMOUNT,

		A.TOTAL_BALANCE_IN_ACCOUNT_CURRENCY
		AS
		CURRENT_DAY_AMOUNT

		FROM
		ACCOUNT A
		WHERE
		A.ID =:accountId AND
		A.COMPANY_ID
		=:companyId

	</sql-query>

	<sql-query name="getCashExpenseTotal">
		<query-param name="companyId" type="long" />
		<return-scalar column="CASH_EXPENSE_TOTAL" type="double" />

		SELECT
		SUM(T.TOTAL*T.CURRENCY_FACTOR) AS CASH_EXPENSE_TOTAL
		FROM
		TRANSACTION T
		WHERE
		T.T_TYPE = 26 AND
		T.SAVE_STATUS =203 AND
		T.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="getCreditCardExpenseTotal">
		<query-param name="companyId" type="long" />
		<return-scalar column="CREDIT_CARD_EXPENSE_TOTAL" type="double" />

		SELECT
		SUM(T.TOTAL*T.CURRENCY_FACTOR) AS CREDIT_CARD_EXPENSE_TOTAL
		FROM
		TRANSACTION T
		WHERE T.T_TYPE = 27 AND
		T.SAVE_STATUS =203 AND
		T.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="getEmployeeExpenseTotal">
		<query-param name="companyId" type="long" />
		<return-scalar column="EMPLOYEE_EXPENSE_TOTAL" type="double" />

		SELECT
		SUM(T.TOTAL*T.CURRENCY_FACTOR) AS EMPLOYEE_EXPENSE_TOTAL
		FROM
		TRANSACTION T
		WHERE
		T.T_TYPE = 28 AND
		T.SAVE_STATUS =203 AND
		T.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="getBrandingTheme">
		<query-param name="companyId" type="long" />
		<query-param name="themeName" type="encryptedstring" />
		<query-param name="id" type="long" />

		<return-scalar column="THEME_NAME" type="encryptedstring" />

		SELECT
		B.THEME_NAME AS THEME_NAME

		FROM
		BRANDING_THEME B

		WHERE
		B.THEME_NAME
		=:themeName AND
		B.ID !=:id AND B.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getWarehouse">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="id" type="Long" />
		<return-scalar column="NAME" type="encryptedstring" />

		SELECT
		W.NAME AS NAME

		FROM
		WAREHOUSE W

		WHERE
		W.NAME
		=:name AND
		W.COMPANY_ID=:companyId AND W.ID!=:id
	</sql-query>

	<sql-query name="canDeleteBrandingTheme">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="BRANDING_THEME_ID" type="long" />

		SELECT
		BT.ID AS BRANDING_THEME_ID

		FROM
		BRANDING_THEME BT

		WHERE
		BT.ID
		=:inputId AND BT.COMPANY_ID=:companyId LIMIT 2 OFFSET 1

		<!-- <return-scalar column="INVOICE_ID" type="long" /> <return-scalar column="CUSTOMER_CREDIT_MEMO_ID" 
			type="long" /> SELECT BT.ID AS BRANDING_THEME_ID, I.ID AS INVOICE_ID, CCM.ID 
			AS CUSTOMER_CREDIT_MEMO_ID FROM BRANDING_THEME BT LEFT OUTER JOIN INVOICE 
			I ON I.BRANDING_THEME_ID = BT.ID LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM 
			ON CCM.BRANDING_THEME_ID = BT.ID WHERE BT.ID = :inputId LIMIT 1 -->

	</sql-query>

	<sql-query name="canDeleteWarehouse">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="STOCK_TRANSFER_ID" type="long" />
		<return-scalar column="STOCK_ADJUSTMENT_ID" type="long" />

		SELECT
		C.ID AS COMPANY_ID,
		I.ID AS ITEM_ID,
		TI.ID AS TRANSACTION_ITEM_ID,
		ST.ID AS STOCK_TRANSFER_ID,
		SA.ID AS STOCK_ADJUSTMENT_ID

		FROM WAREHOUSE
		W
		LEFT OUTER JOIN COMPANY C ON C.DEFAULT_WAREHOUSE = W.ID
		LEFT OUTER
		JOIN ITEM I ON I.WAREHOUSE = W.ID
		LEFT OUTER JOIN TRANSACTION_ITEM TI
		ON TI.WARE_HOUSE = W.ID
		LEFT OUTER JOIN STOCK_TRANSFER ST ON
		ST.FROM_WAREHOUSE = W.ID
		OR ST.TO_WAREHOUSE = W.ID
		LEFT OUTER JOIN
		STOCK_ADJUSTMENT SA ON
		SA.WAREHOUSE = W.ID
		WHERE
		W.ID
		=:inputId AND
		W.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="canDeleteStockTransfer">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="ST_ID" type="long" />

		SELECT
		ST.ID AS ST_ID

		FROM STOCK_TRANSFER ST

		WHERE ST.ID IS NULL AND
		ST.ID=:inputId AND ST.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="canDeleteMeasurement">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />

		SELECT
		C.ID AS COMPANY_ID,
		I.ID AS ITEM_ID

		FROM MEASUREMENT M
		LEFT OUTER
		JOIN COMPANY C ON C.DEFAULT_MEASUREMENT = M.ID
		LEFT OUTER JOIN ITEM I
		ON I.MEASUREMENT = M.ID
		WHERE
		M.ID
		=:inputId AND
		M.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="canDeletePayTAX">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />

		SELECT
		PT.ID AS PT_ID

		FROM PAY_TAX PT
		LEFT JOIN TRANSACTION T ON
		T.ID=PT.ID

		WHERE PT.ID IS NULL AND
		PT.ID=:inputId AND
		T.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="canDeleteReceiveVAT">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />

		SELECT
		RV.ID AS RV_ID

		FROM RECEIVE_VAT RV
		LEFT JOIN TRANSACTION T ON
		T.ID=RV.ID

		WHERE RV.ID IS NULL AND
		RV.ID=:inputId AND
		T.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="canDeleteMakeDeposit">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />

		SELECT ES.ID AS ESTIMATE_ID FROM
		MAKE_DEPOSIT D LEFT JOIN
		TRANSACTION T
		ON T.ID=D.ID
		LEFT JOIN
		DEPOSIT_ESTIMATES DE ON DE.DEPOSIT_ID=D.ID
		LEFT
		JOIN ESTIMATE ES
		ON ES.ID=DE.ELT AND ES.USED_INVOICE IS NOT NULL
		WHERE
		D.ID=:inputId AND
		T.COMPANY_ID=:companyId
		LIMIT 1
	</sql-query>

	<sql-query name="canDeleteTAXReturn">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_PAY_ID" type="long" />
		<return-scalar column="TRANSACTION_RECEIVE_ID" type="long" />

		SELECT TPT.ID AS TRANSACTION_PAY_ID ,
		TRV.ID AS TRANSACTION_RECEIVE_ID
		FROM TRANSACTION T
		LEFT
		JOIN PAY_TAX PT ON PT.ID=T.ID
		LEFT JOIN RECEIVE_VAT RV 
		ON RV.ID=T.ID
		LEFT JOIN
		TRANSACTION_PAY_TAX TPT ON
		 TPT.PAY_TAX_ID=PT.ID
		LEFT JOIN TRANSACTION_RECEIVE_VAT TRV ON TRV.RECEIVE_VAT_ID=RV.ID
		WHERE (TPT.VAT_RETURN_ID=:inputId OR TRV.TAX_RETURN_ID=:inputId) AND T.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getAllUserActivities">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="timestamp" />
		<query-param name="endDate" type="timestamp" />
		<query-param name="logoutOrLogin" type="boolean" />
		<query-param name="preferences" type="boolean" />
		<query-param name="transactions" type="boolean" />
		<query-param name="budgets" type="boolean" />
		<query-param name="reconciliations" type="boolean" />
		<!-- <query-param name="recurringTransactions" type="boolean" /> -->

		<return-scalar column="ID" type="long" />


		SELECT
		AT.ID AS ID
		FROM
		ACTIVITY AT
		WHERE
		(CASE
		WHEN :logoutOrLogin
		THEN
		(AT.ACTIVITY_TYPE=0 OR AT.ACTIVITY_TYPE=1)
		END
		OR
		CASE
		WHEN
		:preferences
		THEN AT.ACTIVITY_TYPE=5
		END
		OR
		CASE
		WHEN :transactions
		THEN
		(AT.OBJECT_TYPE
		BETWEEN 1 AND 30)
		END
		OR
		CASE
		WHEN :budgets
		THEN
		AT.OBJECT_TYPE=81
		END
		OR
		CASE
		WHEN :reconciliations
		THEN
		AT.OBJECT_TYPE=82
		END)
		<!-- OR CASE WHEN :recurringTransactions THEN AT.OBJECT_TYPE=83 END -->
		AND
		(AT.TIME_STAMP BETWEEN :fromDate AND :endDate)
		AND
		AT.COMPANY_ID=:companyId
		ORDER BY
		AT.TIME_STAMP desc

	</sql-query>

	<sql-query name="getCountByCustomiseValues">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="timestamp" />
		<query-param name="endDate" type="timestamp" />
		<query-param name="logoutOrLogin" type="boolean" />
		<query-param name="preferences" type="boolean" />
		<query-param name="transactions" type="boolean" />
		<query-param name="budgets" type="boolean" />
		<query-param name="reconciliations" type="boolean" />
		<!-- <query-param name="recurringTransactions" type="boolean" /> -->

		<return-scalar column="COUNT" type="int" />

		SELECT
		COUNT(*) AS COUNT
		FROM
		ACTIVITY AT
		WHERE
		(CASE
		WHEN :logoutOrLogin
		THEN (AT.ACTIVITY_TYPE=0 OR AT.ACTIVITY_TYPE=1)
		END
		OR
		CASE
		WHEN
		:preferences
		THEN AT.ACTIVITY_TYPE=5
		END
		OR
		CASE
		WHEN :transactions
		THEN
		(AT.OBJECT_TYPE BETWEEN 1 AND 30)
		END
		OR
		CASE
		WHEN :budgets
		THEN
		AT.OBJECT_TYPE=81
		END
		OR
		CASE
		WHEN :reconciliations
		THEN
		AT.OBJECT_TYPE=82
		END)
		<!-- OR CASE WHEN :recurringTransactions THEN AT.OBJECT_TYPE=83 END -->
		AND
		(AT.TIME_STAMP BETWEEN :fromDate AND :endDate)
		AND
		AT.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="getCustomerStatement">
		<query-param name="companyId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TOTAL" type="double" />

		SELECT T.ID AS TRANSACTION_ID,
		T.T_DATE AS TRANSACTION_DATE,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_TOTAL

		FROM TRANSACTION T

		LEFT OUTER JOIN INVOICE I ON I.ID =
		T.ID
		LEFT OUTER JOIN CASH_SALES CS ON CS.ID = T.ID
		LEFT OUTER JOIN
		CUSTOMER_REFUND CR ON CR.ID = T.ID
		LEFT OUTER JOIN RECEIVE_PAYMENT RP
		ON RP.ID = T.ID
		LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP ON CP.ID = T.ID

		LEFT OUTER JOIN CUSTOMER C ON C.ID = I.CUSTOMER_ID
		OR C.ID =
		CS.CUSTOMER_ID
		OR C.ID = CP.CUSTOMER_ID
		OR C.ID = CR.CUSTOMER_ID
		OR C.ID
		= RP.CUSTOMER_ID


		WHERE T.T_TYPE IN (1,5,8,12,29)
		AND C.ID =:customerId
		AND T.T_DATE BETWEEN :fromDate AND :toDate
		AND T.SAVE_STATUS =203 AND
		T.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="getCustomerPreviousBalance">
		<query-param name="companyId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="fromDate" type="long" />

		<return-scalar column="TOTAL" type="double" />

		SELECT CASE WHEN (SELECT SUM(T.TOTAL) FROM TRANSACTION T

		LEFT OUTER
		JOIN INVOICE I ON I.ID = T.ID
		LEFT OUTER JOIN CASH_SALES CS ON CS.ID =
		T.ID
		LEFT OUTER JOIN CUSTOMER_REFUND CR ON CR.ID = T.ID
		LEFT OUTER JOIN
		JOURNAL_ENTRY JE ON JE.ID = T.ID


		LEFT OUTER JOIN CUSTOMER C ON C.ID =
		I.CUSTOMER_ID
		OR C.ID = CS.CUSTOMER_ID
		OR C.ID = CR.CUSTOMER_ID
		OR C.ID =
		(SELECT JEE.PAYEE_ID FROM JOURNAL_ENTRY JEE WHERE JEE.ID = T.ID
		AND
		JEE.PAYEE_ID IS NOT NULL)

		WHERE T.COMPANY_ID=:companyId AND C.ID
		=:customerId AND CASE WHEN
		T.T_TYPE != 16 THEN T.T_DATE
		&lt;:fromDate
		ELSE TRUE END
		GROUP BY C.ID)
		IS NOT NULL
		THEN (SELECT SUM(T.TOTAL) FROM
		TRANSACTION T
		LEFT OUTER JOIN
		INVOICE I ON I.ID = T.ID
		LEFT OUTER JOIN
		CASH_SALES CS ON CS.ID = T.ID
		LEFT OUTER JOIN CUSTOMER_REFUND CR ON
		CR.ID = T.ID
		LEFT OUTER JOIN
		JOURNAL_ENTRY JE ON JE.ID = T.ID

		LEFT OUTER
		JOIN CUSTOMER C ON C.ID =
		I.CUSTOMER_ID
		OR C.ID = CS.CUSTOMER_ID
		OR C.ID
		= CR.CUSTOMER_ID
		OR C.ID =
		(SELECT JEE.PAYEE_ID FROM JOURNAL_ENTRY JEE
		WHERE
		JEE.ID = T.ID
		AND
		JEE.PAYEE_ID IS NOT NULL)
		WHERE
		T.COMPANY_ID=:companyId AND C.ID =:customerId AND CASE WHEN
		T.T_TYPE !=
		16 THEN T.T_DATE
		&lt;:fromDate ELSE TRUE END
		GROUP BY C.ID)
		ELSE 0
		END -
		CASE WHEN (SELECT SUM(T.TOTAL) FROM TRANSACTION T
		LEFT OUTER
		JOIN
		CASH_SALES
		CS ON CS.ID = T.ID
		LEFT OUTER JOIN CUSTOMER_PREPAYMENT
		CP ON
		CP.ID =
		T.ID
		LEFT OUTER JOIN RECEIVE_PAYMENT RP ON RP.ID = T.ID

		LEFT
		OUTER JOIN
		CUSTOMER C ON C.ID = CS.CUSTOMER_ID
		OR C.ID =
		CP.CUSTOMER_ID
		OR C.ID =
		RP.CUSTOMER_ID

		WHERE T.COMPANY_ID=:companyId AND C.ID
		=:customerId AND
		T.T_DATE &lt;:fromDate

		GROUP BY C.ID) IS NOT NULL
		THEN
		(SELECT SUM(T.TOTAL)
		FROM TRANSACTION T

		LEFT OUTER JOIN CASH_SALES CS ON
		CS.ID = T.ID
		LEFT
		OUTER JOIN CUSTOMER_PREPAYMENT CP ON CP.ID = T.ID
		LEFT
		OUTER JOIN
		RECEIVE_PAYMENT RP ON RP.ID = T.ID

		LEFT OUTER JOIN CUSTOMER C
		ON C.ID =
		CS.CUSTOMER_ID
		OR C.ID = CP.CUSTOMER_ID
		OR C.ID =
		RP.CUSTOMER_ID

		WHERE
		T.COMPANY_ID=:companyId AND C.ID =:customerId AND
		T.T_DATE
		&lt;:fromDate
		GROUP BY C.ID)
		ELSE 0
		END AS TOTAL
	</sql-query>


	<sql-query name="getTransactionsOfAccount">
		<query-param name="companyId" type="long" />
		<query-param name="accountId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="openingBalanceAccount" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />

		SELECT AT.TRANSACTION_ID,
		CASE WHEN
		A.ACCOUNT_CURRENCY!=C.PRIMARY_CURRENCY THEN
		SUM(AT.AMOUNT/T.CURRENCY_FACTOR) ELSE
		SUM(AT.AMOUNT) END AS AMOUNT
		FROM

		ACCOUNT_TRANSACTION AT
		LEFT JOIN TRANSACTION T ON
		T.ID=AT.TRANSACTION_ID
		LEFT JOIN COMPANY C
		ON C.ID=AT.COMPANY_ID
		LEFT
		JOIN ACCOUNT A
		ON A.ID=AT.ACCOUNT_ID

		WHERE
		AT.ACCOUNT_ID=:accountId AND
		T.SAVE_STATUS
		=203 AND

		T.ID NOT IN(SELECT RI.TRANSACTION_ID FROM
		RECONCILIATION_ITEM
		RI
		LEFT JOIN
		RECONCILIATION R ON
		R.ID=RI.RECONCILIATION_ID WHERE
		R.ACCOUNT=:accountId GROUP BY
		RI.TRANSACTION_ID)

		AND
		AT.COMPANY_ID=:companyId AND

		T.T_DATE BETWEEN
		:startDate AND :endDate
		AND

		AT.TRANSACTION_ID NOT IN(SELECT
		TRANSACTION_ID FROM
		ACCOUNT_TRANSACTION ATT WHERE
		ATT.ACCOUNT_ID=:openingBalanceAccount)

		GROUP BY
		AT.TRANSACTION_ID,A.ID,T.ID,C.ID

		ORDER BY T.T_DATE;

	</sql-query>



	<sql-query name="getTAXRateCalculation.for.TaxReturn">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_AGENCY" type="long" />
		<return-scalar column="TAX_GROUP_ENTRY" type="boolean" />

		SELECT
		SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
		SUM(TRC.LINE_TOTAL) AS
		NET_AMOUNT,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS TRANSACTION_DATE,
		TAXI.ID AS TAX_ITEM_ID,
		TAXI.TAX_AGENCY AS
		TAX_AGENCY,
		TRC.VAT_GROUP_ENTRY AS TAX_GROUP_ENTRY

		FROM
		TAX_RATE_CALCULATION TRC
		LEFT JOIN TRANSACTION T ON
		TRC.TRANSACTION_ID=T.ID
		LEFT JOIN TAX_ITEM
		TAXI ON
		TRC.TAX_ITEM_ID=TAXI.ID


		WHERE
		TRC.TAX_ITEM_ID IS NOT NULL
		AND
		TRC.TRANSACTION_DATE BETWEEN :startDate
		AND :endDate
		AND
		TAXI.COMPANY_ID=:companyId
		AND TAXI.TAX_AGENCY=:taxAgency

		GROUP BY
		TAXI.ID, T.ID, TRC.VAT_GROUP_ENTRY

		ORDER BY TAXI.ID

	</sql-query>

	<sql-query name="getTAXRateCalculation.for.TaxReturn.vat200">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TAX_RATE" type="double" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		SELECT
		SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
		SUM(TRC.LINE_TOTAL) AS
		NET_AMOUNT,
		TAXI.TAX_RATE AS TAX_RATE,
		T.T_TYPE AS TRANSACTION_TYPE

		FROM
		TAX_RATE_CALCULATION TRC
		LEFT JOIN TRANSACTION T ON
		TRC.TRANSACTION_ID=T.ID
		LEFT JOIN TAX_ITEM
		TAXI ON
		TRC.TAX_ITEM_ID=TAXI.ID


		WHERE
		TRC.TAX_ITEM_ID IS NOT NULL
		AND
		TRC.TRANSACTION_DATE BETWEEN :startDate
		AND :endDate
		AND
		TAXI.COMPANY_ID=:companyId
		AND TAXI.TAX_AGENCY=:taxAgency

		GROUP BY
		TAXI.ID, T.ID, TRC.VAT_GROUP_ENTRY

		ORDER BY TAXI.ID

	</sql-query>

	<sql-query name="getTAXRateCalculation.for.TaxReturn.Exception">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_AGENCY" type="long" />
		<return-scalar column="TAX_GROUP_ENTRY" type="boolean" />

		SELECT
		SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
		SUM(TRC.LINE_TOTAL) AS
		NET_AMOUNT,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS TRANSACTION_DATE,
		TAXI.ID AS TAX_ITEM_ID,
		TAXI.TAX_AGENCY AS
		TAX_AGENCY,
		TRC.VAT_GROUP_ENTRY AS TAX_GROUP_ENTRY

		FROM
		TAX_RATE_CALCULATION TRC
		LEFT JOIN TRANSACTION T ON
		TRC.TRANSACTION_ID=T.ID
		LEFT JOIN TAX_ITEM TAXI ON
		TRC.TAX_ITEM_ID=TAXI.ID


		WHERE
		TRC.TAX_ITEM_ID IS NOT NULL
		AND
		TRC.TRANSACTION_DATE &lt;=
		(SELECT
		MAX(TR.END_DATE) FROM TAX_RETURN TR
		WHERE TR.TAX_AGENCY=:taxAgency)

		AND TAXI.COMPANY_ID=:companyId
		AND
		TAXI.TAX_AGENCY=:taxAgency
		AND
		TRC.TAX_RETURN IS NULL

		GROUP BY TAXI.ID,
		T.ID, TRC.VAT_GROUP_ENTRY

		ORDER BY TAXI.ID
	</sql-query>


	<sql-query name="getTAXRateCalculation.for.TaxReturn.for.reports">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_RATE" type="double" />

		SELECT
		SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
		SUM(TRC.LINE_TOTAL) AS
		NET_AMOUNT,
		T.ID AS TRANSACTION_ID,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS TRANSACTION_DATE,
		TAXI.ID AS
		TAX_ITEM_ID,
		TAXI.TAX_RATE AS TAX_RATE

		FROM
		TAX_RATE_CALCULATION TRC
		LEFT
		JOIN
		TRANSACTION T ON TRC.TRANSACTION_ID=T.ID
		LEFT JOIN TAX_ITEM
		TAXI ON
		TRC.TAX_ITEM_ID=TAXI.ID


		WHERE
		TRC.TAX_ITEM_ID IS NOT NULL
		AND
		TRC.TRANSACTION_DATE BETWEEN :startDate
		AND :endDate
		AND
		TAXI.COMPANY_ID=:companyId
		AND TAXI.TAX_AGENCY=:taxAgency

		GROUP BY
		TAXI.ID, T.ID

		ORDER BY TAXI.ID

	</sql-query>


	<sql-query name="getTAXRateCalculation.for.TaxReturn.Exception.for.reports">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_RATE" type="double" />

		SELECT
		SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
		SUM(TRC.LINE_TOTAL) AS
		NET_AMOUNT,
		T.ID AS TRANSACTION_ID,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS TRANSACTION_DATE,
		TAXI.ID AS
		TAX_ITEM_ID,
		TAXI.TAX_RATE AS TAX_RATE

		FROM
		TAX_RATE_CALCULATION TRC
		LEFT
		JOIN TRANSACTION T ON
		TRC.TRANSACTION_ID=T.ID
		LEFT JOIN TAX_ITEM TAXI ON
		TRC.TAX_ITEM_ID=TAXI.ID


		WHERE
		TRC.TAX_ITEM_ID IS NOT NULL
		AND
		TRC.TRANSACTION_DATE &lt;=
		(SELECT
		MAX(TR.END_DATE) FROM TAX_RETURN TR
		WHERE TR.TAX_AGENCY=:taxAgency)

		AND TAXI.COMPANY_ID=:companyId
		AND
		TAXI.TAX_AGENCY=:taxAgency
		AND
		TRC.TAX_RETURN IS NULL

		GROUP BY TAXI.ID,
		T.ID

		ORDER BY TAXI.ID
	</sql-query>

	<sql-query name="get.CompanyId.Tradingname.and.Country.of.supportUser">
		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="TRADING_NAME" type="string" />
		<return-scalar column="REGISTRED_COUNTRY" type="string" />
		SELECT
		B.COMPANY_ID AS COMPANY_ID,
		B.TRADING_NAME TRADING_NAME,
		B.REGISTRED_COUNTRY REGISTRED_COUNTRY
		FROM (
		SELECT C.ID AS COMPANY_ID,
		C.TRADING_NAME TRADING_NAME,
		C.REGISTRED_COUNTRY
		REGISTRED_COUNTRY,MAX(T.LAST_MODIFIED_DATE) T_DATE,COUNT(T) T_COUNT
		FROM
		COMPANY C LEFT JOIN TRANSACTION T ON T.COMPANY_ID=C.ID GROUP BY
		C.ID,C.TRADING_NAME,C.REGISTRED_COUNTRY
		) AS B GROUP BY
		COMPANY_ID,TRADING_NAME,REGISTRED_COUNTRY,T_DATE,T_COUNT ORDER BY
		T_COUNT=0,T_DATE DESC
	</sql-query>

	<sql-query name="get.CompanyId.Tradingname.and.Country.of.user">
		<query-param name="userIds" type="long" />
		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="TRADING_NAME" type="string" />
		<return-scalar column="REGISTRED_COUNTRY" type="string" />
		SELECT
		B.COMPANY_ID AS COMPANY_ID,
		B.TRADING_NAME TRADING_NAME,
		B.REGISTRED_COUNTRY REGISTRED_COUNTRY
		FROM (
		SELECT C.ID AS COMPANY_ID,
		C.TRADING_NAME TRADING_NAME,
		C.REGISTRED_COUNTRY REGISTRED_COUNTRY,
		MAX(T.LAST_MODIFIED_DATE) T_DATE,COUNT(T) T_COUNT FROM
		COMPANY C LEFT
		JOIN TRANSACTION T
		ON T.COMPANY_ID=C.ID LEFT JOIN USERS U ON
		U.COMPANY_ID=C.ID WHERE U.ID IN :userIds GROUP BY
		C.ID,T.ID,C.TRADING_NAME,C.REGISTRED_COUNTRY ORDER BY
		T_DATE DESC
		) AS B
		GROUP BY
		COMPANY_ID,TRADING_NAME,REGISTRED_COUNTRY
		ORDER BY
		MIN(T_COUNT)=0,MAX(T_DATE) desc

	</sql-query>

	<sql-query name="get.all.reconciliations.group.by.account.id">
		<query-param name="company_Id" type="long" />

		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_TYPE" type="int" />
		<return-scalar column="START_DATE" type="long" />
		<return-scalar column="END_DATE" type="long" />

		SELECT
		A.ID AS ACCOUNT_ID,
		A.NAME AS ACCOUNT_NAME,
		A.A_TYPE AS
		ACCOUNT_TYPE,
		MIN(START_DATE) AS START_DATE,
		MAX(END_DATE) AS END_DATE
		FROM
		RECONCILIATION R
		LEFT JOIN ACCOUNT A ON A.ID=R.ACCOUNT WHERE
		R.COMPANY_ID=:company_Id
		GROUP BY A.ID;
	</sql-query>
	<sql-query name="getAllTAXReturnEntries.groupby.transaction.id">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="IS_VOID" type="boolean" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TAX_ITEM" type="long" />

		SELECT
		T.ID AS TRANSACTION_ID,
		TRE.TRANSACTION_TYPE AS
		TRANSACTION_TYPE,
		TRE.TRANSACTION_DATE AS
		TRANSACTION_DATE,
		CASE
		WHEN(T.ID IS NOT NULL)
		THEN
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END
		ELSE TRUE
		END AS
		IS_VOID,
		SUM(TRE.TAX_AMOUNT) TAX_AMOUNT,
		SUM(TRE.NET_AMOUNT) AS
		NET_AMOUNT,
		TI.ID AS TAX_ITEM

		FROM
		TAX_RETURN_ENTRY TRE

		LEFT JOIN
		TRANSACTION T
		ON T.ID=TRE.TRANSACTION_ID
		LEFT JOIN TAX_ITEM TI
		ON
		TI.ID=TRE.TAXITEM_ID
		LEFT JOIN TAXAGENCY TA
		ON
		TA.ID=TRE.TAXAGENCY_ID

		WHERE
		TA.COMPANY_ID=:companyId AND
		TI.TAX_AGENCY=:taxAgency
		GROUP BY
		TI.ID,TRE.TRANSACTION_TYPE,TRE.TRANSACTION_DATE,T.ID;


	</sql-query>

	<sql-query name="get.reconciliations.by.accountId_by_dates">

		<query-param name="account_Id" type="long" />
		<query-param name="company_Id" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="RECONCILATION_ID" type="long" />
		<return-scalar column="BANKNAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />

		SELECT
		RI.ID AS RECONCILATION_ID,
		A.NAME AS BANKNAME,
		RI.TRANSACTION_TYPE AS TYPE,
		RI.TRANSACTION_NUMBER AS
		TRANSACTION_NUMBER,
		RI.TRANSACTION_DATE AS
		TRANSACTION_DATE,
		RI.TRANSACTION_ID AS
		TRANSACTION_ID,
		RI.AMOUNT AS AMOUNT
		FROM
		RECONCILIATION_ITEM RI LEFT JOIN
		RECONCILIATION R
		ON
		R.ID=RI.RECONCILIATION_ID LEFT JOIN ACCOUNT A ON
		A.ID=:account_Id
		WHERE
		RI.TRANSACTION_DATE BETWEEN :startDate
		AND :endDate
		AND
		R.ACCOUNT=:account_Id AND R.COMPANY_ID=:company_Id

	</sql-query>

	<sql-query name="getAllTAXReturnEntries.groupby.transaction.id.for.reports">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="IS_VOID" type="boolean" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TAX_ITEM" type="long" />
		<return-scalar column="TAX_ITEM_NAME" type="encryptedstring" />
		<return-scalar column="TAX_RATE" type="double" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		TRE.TRANSACTION_TYPE
		AS
		TRANSACTION_TYPE,
		TRE.TRANSACTION_DATE AS
		TRANSACTION_DATE,
		CASE WHEN(T.ID
		IS NOT NULL)
		THEN
		CASE
		WHEN T.SAVE_STATUS
		= 204
		THEN TRUE
		ELSE
		FALSE
		END
		ELSE TRUE
		END AS IS_VOID,
		SUM(TRE.TAX_AMOUNT)
		TAX_AMOUNT,
		SUM(TRE.NET_AMOUNT) AS
		NET_AMOUNT,
		TI.ID AS TAX_ITEM,
		TIG.NAME AS
		TAX_ITEM_NAME,
		TI.TAX_RATE AS
		TAX_RATE

		FROM TAX_RETURN_ENTRY
		TRE

		LEFT JOIN
		TRANSACTION T
		ON
		T.ID=TRE.TRANSACTION_ID
		LEFT JOIN TAX_ITEM
		TI
		ON
		TI.ID=TRE.TAXITEM_ID
		LEFT JOIN TAX_ITEM_GROUPS TIG
		ON TIG.ID=TI.ID
		LEFT
		JOIN TAXAGENCY TA
		ON
		TA.ID=TRE.TAXAGENCY_ID

		WHERE
		TA.COMPANY_ID=:companyId AND
		TI.TAX_AGENCY=:taxAgency
		GROUP BY
		T.ID,TI.ID,TIG.ID,TRE.TRANSACTION_TYPE,TRE.TRANSACTION_DATE;

	</sql-query>

	<sql-query name="update.primay.currency.in.company">
		<query-param name="companyId" type="long" />
		<query-param name="currencyId" type="long" />
		UPDATE TRANSACTION SET CURRENCY=:currencyId WHERE
		COMPANY_ID=:companyId;
		UPDATE ACCOUNT SET ACCOUNT_CURRENCY=:currencyId
		WHERE COMPANY_ID=:companyId;
	</sql-query>
	<sql-query
		name="getMostRecentTransactionCurrencyFactor.orderby.id.basedon.currency">
		<query-param name="companyId" type="long" />
		<query-param name="transactionDate" type="long" />
		<query-param name="currency" type="long" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		SELECT
		T.CURRENCY_FACTOR
		FROM TRANSACTION T
		WHERE
		T.COMPANY_ID=:companyId
		AND T.T_DATE
		&lt;=:transactionDate AND
		T.CURRENCY=:currency
		ORDER BY T.ID
		DESC
		LIMIT 1;
	</sql-query>

	<query name="getPortletPageConfiguration">
		<query-param name="pageName" type="string" />
		<query-param name="userId" type="long" />
		from com.vimukti.accounter.core.PortletPageConfiguration p where
		p.pageName=:pageName AND p.user.id=:userId
	</query>


	<sql-query name="getWhoIOweVendors">
		<query-param name="companyId" type="long" />
		SELECT p.id FROM PAYEE p WHERE p.BALANCE>0 AND p.TYPE=2 AND
		p.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getWhoOwesMeCustomers">
		<query-param name="companyId" type="long" />
		SELECT p.id FROM PAYEE p WHERE p.BALANCE>0 AND p.TYPE=1 AND
		p.COMPANY_ID=:companyId
	</sql-query>


	<query name="getCustomersOrderByName">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Customer c where c.company=:company
		and c.isActive=true
		order by c.name
	</query>
	<query name="getVendorsOrderByName">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Vendor c where c.company=:company
		order by c.name
	</query>

	<sql-query name="getRecentTransactionList">
		<query-param name="companyId" type="long" />
		<query-param name="limit" type="int" />

		<!-- SELECT a.ID FROM ACTIVITY a LEFT JOIN TRANSACTION T ON T.ID=a.OBJECT_ID 
			WHERE T.SAVE_STATUS=203 AND a.OBJECT_TYPE BETWEEN 1 AND 31 AND a.OBJECT_TYPE!=9 
			AND a.COMPANY_ID=:companyId AND a.ACTIVITY_TYPE IN(2,3) AND NOT EXISTS (select 
			1 from ACTIVITY where ID = a.ID and OBJECT_ID > a.OBJECT_ID) GROUP BY a.ID 
			ORDER by a.TRANSACTION_DATE DESC LIMIT :limit -->
		SELECT T.ID ,T.T_TYPE,T.TOTAL,C.FULL_NAME,T.T_DATE, T.CURRENCY FROM
		TRANSACTION T
		LEFT JOIN
		USERS U ON U.ID = T.LAST_MODIFIER
		LEFT JOIN
		CLIENT C ON C.ID=U.CLIENT_ID WHERE
		T.COMPANY_ID=:companyId
		AND
		T.SAVE_STATUS=203 ORDER by T.CREATED_DATE DESC LIMIT :limit

	</sql-query>



	<sql-query name="getAuditHistory">
		<query-param name="companyId" type="long" />
		<query-param name="objectType" type="int" />
		<query-param name="objectID" type="long" />
		<query-param name="activityID" type="long" />

		<return-scalar column="TIME" type="timestamp" />
		<return-scalar column="USER_NAME" type="encryptedstring" />
		<return-scalar column="AUDIT_HISTORY" type="text" />

		SELECT A.TIME_STAMP AS TIME,A.USER_NAME AS
		USER_NAME,A.AUDITHISTORY AS
		AUDIT_HISTORY FROM
		ACTIVITY A WHERE
		a.COMPANY_ID=:companyId AND
		a.OBJECT_TYPE=:objectType
		AND
		a.ID
		&lt;=:activityID AND
		a.OBJECT_ID=:objectID

	</sql-query>


	<query name="getTaxreturnByTransactionid">
		<query-param name="transaction" type="Transaction" />
		from com.vimukti.accounter.core.TAXReturnEntry tr where
		tr.transaction=:transaction
	</query>

	<sql-query name="getRecordExpensesAccounts">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		SELECT A.NAME,SUM(AT.AMOUNT) AS AMOUNT FROM ACCOUNT_TRANSACTION AT
		LEFT JOIN
		ACCOUNT A ON AT.ACCOUNT_ID=A.ID
		LEFT JOIN TRANSACTION T ON
		T.ID=AT.TRANSACTION_ID
		WHERE (A.A_TYPE=15 OR A.A_TYPE=16 OR
		A.A_TYPE=18)
		AND AT.COMPANY_ID=:companyId
		AND
		T.T_DATE
		BETWEEN :startDate
		AND :endDate
		GROUP BY
		A.NAME
		ORDER BY AMOUNT DESC
	</sql-query>

	<sql-query name="deleteCompany">
		<query-param name="companyId" type="long" />
		<return-scalar column="IS_DELETED" type="boolean" />
		IS_DELETED = call delete_company(:companyId)
	</sql-query>


	<sql-query name="createDeleteCompanyFunction">
		CREATE OR REPLACE FUNCTION delete_company(cid
		bigint) RETURNS boolean
		AS
		$BODY$begin

		SET CONSTRAINTS ALL DEFERRED;

		delete from company_fields where company_id=cid;
		delete from
		payee_fields using payee where payee_id=payee.id and
		payee.company_id=cid;

		delete from
		cheque_layout where company_id=cid;

		delete from attachments where company_id=cid;
		delete from
		message_or_task where company_id=cid;
		delete from account_amounts using
		account where account_id=account.id
		and account.company_id=cid;
		delete
		from account_transaction where
		company_id=cid;
		delete from
		adjustment_reason where company_id=cid;
		delete from adjustment_reason
		where company_id=cid;
		delete from
		reconciliation_item using
		reconciliation where
		reconciliation_id=reconciliation.id and
		reconciliation.company_id=cid;
		delete from reconciliation where
		company_id=cid;
		delete from
		bank_account using account where
		bank_account.id=account.id and
		account.company_id=cid;
		delete from bank
		where company_id=cid;
		delete
		from branding_theme where company_id=cid;
		delete from budgetitem where
		company_id=cid;
		delete from budget where
		company_id=cid;
		delete from
		cash_purchase using transaction where
		cash_purchase.id=transaction.id
		and transaction.company_id=cid;
		delete
		from cash_sales using
		transaction where cash_sales.id=transaction.id
		and
		transaction.company_id=cid;
		delete from credit_card_charges using
		transaction where
		credit_card_charges.id=transaction.id and
		transaction.company_id=cid;
		delete from creditrating where
		company_id=cid;

		delete from customer_credit_memo using transaction
		where
		customer_credit_memo.id=transaction.id and
		transaction.company_id=cid;
		delete from customer_group where
		company_id=cid;
		delete from customer_prepayment using transaction where
		customer_prepayment.id=transaction.id and transaction.company_id=cid;
		delete from customer_refund using transaction where
		customer_refund.id=transaction.id and transaction.company_id=cid;
		delete from customfield where company_id=cid;
		delete from depreciation
		where company_id=cid;
		delete from enter_bill using transaction where
		enter_bill.id=transaction.id
		and transaction.company_id=cid;
		delete from
		enterbill_estimates using estimate , transaction where
		enterbill_estimates.elt=estimate.id and transaction.id=estimate.id and
		transaction.company_id=cid;
		delete from fiscal_year where
		company_id=cid;
		delete from fixed_asset where company_id=cid;
		delete
		from fixed_asset_history where company_id=cid;
		delete from
		invoice_estimates
		using estimate , transaction where
		invoice_estimates.estimate_id=estimate.id and
		transaction.id=estimate.id and transaction.company_id=cid;
		delete from
		invoice_sales_orders using invoice , transaction where
		invoice_sales_orders.invoice_id=invoice.id and
		transaction.id=invoice.id and transaction.company_id=cid;
		delete from
		invoice using transaction where invoice.id=transaction.id and
		transaction.company_id=cid;
		delete from estimate using transaction
		where estimate.id=transaction.id and
		transaction.company_id=cid;

		delete
		from item_receipt using transaction where
		item_receipt.id=transaction.id and transaction.company_id=cid;
		delete
		from item_status using item where item_id=item.id and
		item.company_id=cid;

		delete from itemgroup where company_id=cid;
		delete
		from journal_entry using transaction where
		journal_entry.id=transaction.id and transaction.company_id=cid;
		delete
		from location where company_id=cid;
		delete from measurement where
		company_id=cid ;
		delete from pay_expense using account where
		account_id=account.id and
		account.company_id=cid;
		delete from
		payee_address using payee where
		payee_address.payee_id=payee.id
		and
		payee.company_id=cid;
		delete from
		payee_contact using payee where
		payee_contact.payee_id=payee.id
		and
		payee.company_id=cid;
		delete from
		payee_customfields using payee where
		payee_customfields.payee_id=payee.id and payee.company_id=cid;
		delete
		from paymentterms where company_id=cid;
		delete from pricelevel where
		company_id=cid;
		delete from purchase_order using transaction where
		purchase_order.id=transaction.id and transaction.company_id=cid;
		delete from recurring_transaction where company_id=cid;
		delete from
		reminder where company_id=cid;
		delete from
		sales_order using transaction
		where
		sales_order.id=transaction.id and
		transaction.company_id=cid;
		delete from sales_person where
		company_id=cid;
		delete from
		shippingmethod where company_id=cid;
		delete
		from shippingterms where
		company_id=cid;

		delete from stock_adjustment_item using
		stock_adjustment where
		stock_adjustment.id=stock_adjustment_item.stock_adjustment and
		stock_adjustment.company_id=cid;

		delete from stock_adjustment
		where
		company_id=cid;
		delete from inventory_assembly_item using
		inventory_assembly , item where item.id=inventory_assembly.id and
		inventory_assembly_item_id=inventory_assembly.id and
		item.company_id=cid;
		delete
		from inventory_assembly using
		item where
		inventory_assembly.id=item.id and
		item.company_id=cid;
		delete from item
		where company_id=cid;
		delete from
		stock_transfer where
		company_id=cid;
		delete from
		stock_transfer_item
		where company_id=cid;
		delete from
		tax_adjustment
		using transaction where
		tax_adjustment.id=transaction.id
		and
		transaction.company_id=cid;
		delete
		from tax_code where
		company_id=cid;
		delete from tax_group_tax_item
		using tax_group where
		tax_group_id=tax_group.id and
		tax_group.company_id=cid;
		delete from
		tax_group where company_id=cid;
		delete from tax_item where
		company_id=cid;
		delete from tax_item_groups
		where company_id=cid;
		delete
		from tax_rate_calculation using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;

		delete
		from transaction_pay_tax using
		tax_return , transaction where
		tax_return.id=transaction_pay_tax.vat_return_id and
		transaction.id=tax_return.id and
		transaction.company_id=cid;

		delete
		from
		tax_return using transaction where tax_return.id=transaction.id
		and
		transaction.company_id=cid;
		delete from tax_return_entry using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete from taxagency where company_id=cid;
		delete from taxrates where company_id=cid;
		delete from
		transaction_credits_and_payments using credits_and_payments ,
		transaction where
		transaction_credits_and_payments.credits_and_payments_id=credits_and_payments.id
		and credits_and_payments.transaction_id=transaction.id and
		transaction.company_id=cid;
		delete from credits_and_payments using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete from transaction_history using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;

		delete from transaction_item using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete from transaction_deposit_item using
		make_deposit, transaction where
		transaction_deposit_item.make_deposit_id = make_deposit.id and
		transaction.id=make_deposit.id and transaction.company_id=cid;
		delete
		from make_deposit using transaction where
		make_deposit.id=transaction.id and transaction.company_id=cid;
		delete
		from transfer_fund using transaction where
		transfer_fund.id=transaction.id and transaction.company_id=cid;
		delete
		from transaction_make_deposit_entries using transaction where
		transaction_id=transaction.id and transaction.company_id=cid;
		delete
		from transaction_pay_tax using pay_tax , transaction where
		pay_tax_id=pay_tax.id and transaction.id=pay_tax.id and
		transaction.company_id=cid;
		delete from pay_tax using transaction where
		pay_tax.id=transaction.id and
		transaction.company_id=cid;
		delete from
		transaction_paybill using pay_bill , transaction where
		paybill_id=pay_bill.id and transaction.id=pay_bill.id and
		transaction.company_id=cid;
		delete from pay_bill using transaction
		where pay_bill.id=transaction.id and
		transaction.company_id=cid;
		delete
		from
		transaction_credits_and_payments using
		transaction_receive_payment, transaction where
		transaction_receive_payment.id=transaction_credits_and_payments.transaction_receive_payment_id
		and transaction_receive_payment.transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from transaction_receive_payment
		using transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from receive_payment using
		transaction where
		receive_payment.id=transaction.id and
		transaction.company_id=cid;
		delete from transaction_receive_vat using
		receive_vat, transaction
		where
		transaction_receive_vat.receive_vat_id=receive_vat.id and
		transaction.id=receive_vat.id and transaction.company_id=cid;
		delete
		from receive_vat using transaction where
		receive_vat.id=transaction.id
		and transaction.company_id=cid;
		delete from unit where company_id=cid;
		delete from unit_of_measure where company_id=cid;
		delete from
		nominal_code_range where company_id=cid;
		delete from vatreturnbox where
		company_id=cid;
		delete from vendor where company_id=cid;
		delete from
		vendor_credit_memo using transaction where
		vendor_credit_memo.id=transaction.id and transaction.company_id=cid;
		delete from vendor_group where company_id=cid;
		delete from warehouse
		where company_id=cid;
		delete from write_checks using transaction where
		write_checks.id=transaction.id and transaction.company_id=cid;
		delete
		from customer where company_id=cid;
		delete from
		PORTLET_CONFIGURATION_PORTLETDATA using
		portlet_configuration,portlet_page_configuration, users
		where
		portlet_configuration.id=PORTLET_CONFIGURATION_PORTLETDATA.id and
		portlet_configuration.portlet_config_id=portlet_page_configuration.id
		and portlet_page_configuration.user_id=users.id and
		users.company_id=cid;
		delete from portlet_configuration
		using
		portlet_page_configuration, users
		where
		portlet_configuration.portlet_config_id=portlet_page_configuration.id
		and portlet_page_configuration.user_id=users.id and
		users.company_id=cid;
		delete from portlet_page_configuration using
		users where user_id=users.id
		and users.company_id=cid;

		delete from
		account where company_id=cid;
		delete from transaction where
		company_id=cid;
		delete from accounter_class where company_id=cid;
		delete from payee where company_id=cid;
		delete from users where
		company_id=cid;
		delete from activity where company_id=cid;
		delete from
		currency where company_id=cid;

		delete from company where id=cid;

		return
		true;

		delete from account_amounts using account where
		account_id=account.id
		and
		account.company_id=cid;
		delete from
		account_transaction where
		company_id=cid;
		delete from adjustment_reason
		where company_id=cid;
		delete from adjustment_reason where
		company_id=cid;
		delete from
		reconciliation_item using reconciliation
		where
		reconciliation_id=reconciliation.id and
		reconciliation.company_id=cid;
		delete from reconciliation where
		company_id=cid;
		delete from
		bank_account using account where
		bank_account.id=account.id and
		account.company_id=cid;
		delete from bank
		where company_id=cid;
		delete
		from branding_theme where company_id=cid;
		delete from budgetitem where
		company_id=cid;
		delete from budget where
		company_id=cid;
		delete from
		cash_purchase using transaction where
		cash_purchase.id=transaction.id
		and transaction.company_id=cid;
		delete
		from cash_sales using
		transaction where cash_sales.id=transaction.id
		and
		transaction.company_id=cid;
		delete from credit_card_charges using
		transaction where
		credit_card_charges.id=transaction.id and
		transaction.company_id=cid;
		delete from creditrating where
		company_id=cid;

		delete from customer_credit_memo using transaction
		where
		customer_credit_memo.id=transaction.id and
		transaction.company_id=cid;
		delete from customer_group where
		company_id=cid;
		delete from customer_prepayment using transaction where
		customer_prepayment.id=transaction.id and transaction.company_id=cid;
		delete from customer_refund using transaction where
		customer_refund.id=transaction.id and transaction.company_id=cid;
		delete from customfield where company_id=cid;
		delete from depreciation
		where company_id=cid;
		delete from enter_bill using transaction where
		enter_bill.id=transaction.id
		and transaction.company_id=cid;
		delete from
		enterbill_estimates using estimate , transaction where
		enterbill_estimates.elt=estimate.id and transaction.id=estimate.id and
		transaction.company_id=cid;
		delete from fiscal_year where
		company_id=cid;
		delete from fixed_asset where company_id=cid;
		delete
		from fixed_asset_history where company_id=cid;
		delete from
		fixed_asset_note where company_id=cid;
		delete from invoice_estimates
		using estimate , transaction where
		invoice_estimates.estimate_id=estimate.id and
		transaction.id=estimate.id and transaction.company_id=cid;
		delete from
		invoice_sales_orders using invoice , transaction where
		invoice_sales_orders.invoice_id=invoice.id and
		transaction.id=invoice.id and transaction.company_id=cid;
		delete from
		invoice using transaction where invoice.id=transaction.id and
		transaction.company_id=cid;
		delete from estimate using transaction
		where estimate.id=transaction.id and
		transaction.company_id=cid;
		delete
		from issuepayment using transaction where
		issuepayment.id=transaction.id and transaction.company_id=cid;

		delete
		from item_receipt using transaction where
		item_receipt.id=transaction.id and transaction.company_id=cid;
		delete
		from item_status using item where item_id=item.id and
		item.company_id=cid;

		delete from itemgroup where company_id=cid;
		delete
		from journal_entry using transaction where
		journal_entry.id=transaction.id and transaction.company_id=cid;
		delete
		from location where company_id=cid;
		delete from measurement where
		company_id=cid;
		delete from pay_expense using account where
		account_id=account.id and
		account.company_id=cid;
		delete from
		pay_tax_entries using transaction where
		pay_tax_entries.transaction_id=transaction.id and
		transaction.company_id=cid;
		delete from payee_address using payee where
		payee_address.payee_id=payee.id
		and payee.company_id=cid;
		delete from
		payee_contact using payee where payee_contact.payee_id=payee.id
		and
		payee.company_id=cid;
		delete from payee_customfields using payee where
		payee_customfields.payee_id=payee.id and payee.company_id=cid;
		delete
		from paymentterms where company_id=cid;
		delete from pricelevel where
		company_id=cid;
		delete from purchase_order using transaction where
		purchase_order.id=transaction.id and transaction.company_id=cid;
		delete from recurring_transaction where company_id=cid;
		delete from
		sales_order using transaction where
		sales_order.id=transaction.id and
		transaction.company_id=cid;
		delete from sales_person where
		company_id=cid;
		delete from shippingmethod where company_id=cid;
		delete
		from shippingterms where company_id=cid;
		delete from stock_adjustment
		where company_id=cid;

		delete from stock_adjustment_item using
		stock_adjustment where
		stock_adjustment.id=stock_adjustment_item.stock_adjustment and
		stock_adjustment.company_id=cid;

		delete from item where company_id=cid;
		delete from stock_transfer where
		company_id=cid;
		delete from
		stock_transfer_item where company_id=cid;
		delete from tax_adjustment
		using transaction where
		tax_adjustment.id=transaction.id and
		transaction.company_id=cid;
		delete
		from tax_code where company_id=cid;
		delete from tax_group_tax_item
		using tax_group where
		tax_group_id=tax_group.id and
		tax_group.company_id=cid;
		delete from
		tax_group where company_id=cid;
		delete from tax_item where
		company_id=cid;
		delete from tax_item_groups
		where company_id=cid;
		delete
		from tax_rate_calculation using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from tax_return using transaction
		where tax_return.id=transaction.id
		and transaction.company_id=cid;
		delete from tax_return_entry using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from taxagency where company_id=cid;
		delete from taxrates where
		company_id=cid;

		delete from
		transaction_credits_and_payments using credits_and_payments ,
		transaction where
		transaction_credits_and_payments.credits_and_payments_id=credits_and_payments.id
		and credits_and_payments.transaction_id=transaction.id and
		transaction.company_id=cid;

		delete from
		transaction_credits_and_payments using transaction_paybill where
		transaction_paybill.id=transaction_credits_and_payments.transaction_paybill_id
		and transaction_paybill.company_id=cid;

		delete from
		credits_and_payments using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from transaction_history using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from transaction_issue_payment using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from transaction_item using
		transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from transfer_fund using transaction where
		transfer_fund.id=transaction.id and transaction.company_id=cid;
		delete
		from transaction_make_deposit_entries using transaction where
		transaction_id=transaction.id and transaction.company_id=cid;
		delete
		from transaction_pay_tax using pay_tax , transaction where
		pay_tax_id=pay_tax.id and transaction.id=pay_tax.id and
		transaction.company_id=cid;

		delete from pay_tax using transaction where
		pay_tax.id=transaction.id and
		transaction.company_id=cid;
		delete from
		transaction_paybill using
		pay_bill , transaction where
		paybill_id=pay_bill.id and
		transaction.id=pay_bill.id and
		transaction.company_id=cid;
		delete from
		pay_bill using transaction
		where
		pay_bill.id=transaction.id and
		transaction.company_id=cid;
		delete
		from
		transaction_receive_payment
		using transaction where
		transaction_id=transaction.id and
		transaction.company_id=cid;
		delete
		from receive_payment using
		transaction where
		receive_payment.id=transaction.id and
		transaction.company_id=cid;
		delete from transaction_receive_vat using
		receive_vat, transaction
		where
		transaction_receive_vat.receive_vat_id=receive_vat.id and
		transaction.id=receive_vat.id and transaction.company_id=cid;
		delete
		from receive_vat using transaction where
		receive_vat.id=transaction.id
		and transaction.company_id=cid;
		delete from unit where company_id=cid;
		delete from unit_of_measure where company_id=cid;
		delete from
		nominal_code_range where company_id=cid;
		delete from vatreturnbox where
		company_id=cid;
		delete from vendor where company_id=cid;
		delete from
		vendor_credit_memo using transaction where
		vendor_credit_memo.id=transaction.id and transaction.company_id=cid;
		delete from vendor_group where company_id=cid;
		delete from warehouse
		where company_id=cid;
		delete from write_checks using transaction where
		write_checks.id=transaction.id and transaction.company_id=cid;
		delete
		from customer where company_id=cid;
		delete from portlet_configuration
		using portlet_page_configuration, users
		where
		portlet_configuration.portlet_config_id=portlet_page_configuration.id
		and portlet_page_configuration.user_id=users.id and
		users.company_id=cid;
		delete from portlet_page_configuration using
		users where user_id=users.id
		and users.company_id=cid;

		delete from
		account where
		company_id=cid;
		delete
		from transaction where
		company_id=cid;
		delete from
		accounter_class where
		company_id=cid;
		delete
		from payee where
		company_id=cid;
		delete from
		users where
		company_id=cid;
		delete from
		activity where company_id=cid;
		delete from
		currency where
		company_id=cid;

		delete from company where
		id=cid;

		return
		true;

		end;$BODY$
		LANGUAGE plpgsql VOLATILE;

	</sql-query>


	<!-- To generate the Invoices List which includes Cash Sales, Customer Credit 
		Memos, Invoices and Write Checks -->
	<sql-query name="getInvoicesListByPayee">
		<query-param name="companyId" type="long" />
		<query-param name="payeeId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		SELECT
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN
		I.BALANCE_DUE
		ELSE
		0.0
		END AS BALANCE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN
		TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CASH_SALES CS
		ON T.ID=CS.ID
		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		OR
		C.ID =
		CS.CUSTOMER_ID
		OR C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE
		IN(1,4,8) AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN :fromDate AND :toDate AND
		I.CUSTOMER_ID=:payeeId
		ORDER BY
		DUE_DATE
	</sql-query>



	<sql-query name="getInvoicesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.CURRENCY AS CURRENCY_ID,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN
		I.BALANCE_DUE
		ELSE
		0.0
		END AS BALANCE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=8
		AND T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN :fromDate AND :toDate AND
		C.ID=:customerId
		ORDER BY DUE_DATE
	</sql-query>

	<sql-query name="getOpenInvoicesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.CURRENCY AS CURRENCY_ID,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN
		I.BALANCE_DUE
		ELSE
		0.0
		END AS BALANCE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=8
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN :fromDate AND :toDate AND
		C.ID=:customerId AND I.BALANCE_DUE >
		0
		ORDER BY DUE_DATE
	</sql-query>

	<sql-query name="getDraftInvoicesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.CURRENCY AS CURRENCY_ID,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN
		I.BALANCE_DUE
		ELSE
		0.0
		END AS BALANCE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=8
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN :fromDate AND :toDate AND
		C.ID=:customerId AND
		T.SAVE_STATUS=201
		ORDER BY DUE_DATE
	</sql-query>

	<sql-query name="getOverdueInvoicesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="currentDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.CURRENCY AS CURRENCY_ID,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.T_TYPE = 8
		THEN
		I.BALANCE_DUE
		ELSE
		0.0
		END AS BALANCE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.SAVE_STATUS &lt;&gt; 204 AND T.T_TYPE=8
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN
		:fromDate AND :toDate AND
		I.DUE_DATE &lt;= :currentDate AND
		C.ID=:customerId
		ORDER BY DUE_DATE
	</sql-query>


	<sql-query name="getCashSalesByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		null AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		0.0 AS
		BALANCE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN
		TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		CASH_SALES CS
		ON
		T.ID=CS.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CS.CUSTOMER_ID
		LEFT
		OUTER
		JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE
		T.T_TYPE=1 AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN
		:fromDate AND
		:toDate AND C.ID=:customerId
	</sql-query>

	<sql-query name="getDraftCashSalesByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		null AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		0.0 AS
		BALANCE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN
		TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		CASH_SALES CS
		ON
		T.ID=CS.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CS.CUSTOMER_ID
		LEFT
		OUTER
		JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE
		T.T_TYPE=1 AND
		T.COMPANY_ID=:companyId AND
		T.SAVE_STATUS=201 AND
		T.SAVE_STATUS
		!= 202 AND
		T.T_DATE BETWEEN
		:fromDate AND
		:toDate AND
		C.ID=:customerId
	</sql-query>

	<sql-query name="getAllCustomerCreditMemosByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		T.TOTAL AS
		TOTAL_PRICE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		NULL AS DUE_DATE,
		0.0 AS BALANCE,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO
		CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=4
		AND T.SAVE_STATUS
		!=
		202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN :fromDate AND
		:toDate
		and
		C.ID=:customerId
	</sql-query>


	<sql-query name="getOpendCustomerCreditMemosByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		T.TOTAL AS
		TOTAL_PRICE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		NULL AS DUE_DATE,
		0.0 AS BALANCE,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO
		CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=4
		AND T.STATUS=101 AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN
		:fromDate AND :toDate and
		C.ID=:customerId
	</sql-query>

	<sql-query name="getDraftCustomerCreditMemosByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		T.TOTAL AS
		TOTAL_PRICE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		NULL AS DUE_DATE,
		0.0 AS BALANCE,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO
		CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=4
		AND T.SAVE_STATUS=201
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN
		:fromDate AND :toDate
		and
		C.ID=:customerId
	</sql-query>

	<sql-query name="getAllReceivePaymentsByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />

		SELECT
		NULL AS DUE_DATE,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS IS_VOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		RP.CHECK_NUMBER
		AS
		CHECK_NUMBER,
		T.CURRENCY AS
		CURRENCY
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		RECEIVE_PAYMENT RP
		ON
		T.ID=RP.ID
		LEFT OUTER JOIN
		CUSTOMER_PREPAYMENT CP
		ON
		T.ID = CP.ID
		LEFT OUTER
		JOIN
		CUSTOMER C
		ON
		(C.ID =
		RP.CUSTOMER_ID OR
		C.ID=CP.CUSTOMER_ID)
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE
		(T.T_TYPE=12 OR T.T_TYPE=29)
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN :fromDate AND :toDate and
		C.ID=:customerId
	</sql-query>

	<sql-query name="getReceivePaymentsbyTypeByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="paymentmethod" type="encryptedstring" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />

		SELECT
		NULL AS DUE_DATE,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS IS_VOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		RP.CHECK_NUMBER
		AS
		CHECK_NUMBER,
		T.CURRENCY AS
		CURRENCY
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		RECEIVE_PAYMENT RP
		ON
		T.ID=RP.ID
		LEFT OUTER JOIN
		CUSTOMER_PREPAYMENT CP
		ON
		CP.ID=T.ID
		LEFT OUTER
		JOIN
		CUSTOMER C
		ON
		(C.ID =
		RP.CUSTOMER_ID OR C.ID =
		CP.CUSTOMER_ID)
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE (T.T_TYPE=12 OR
		T.T_TYPE= 29)
		AND
		T.PAYMENT_METHOD
		LIKE
		:paymentmethod AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN :fromDate
		AND
		:toDate and
		C.ID=:customerId
	</sql-query>

	<sql-query name="getAllCustomerRefundsByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		T.TOTAL AS
		TOTAL_PRICE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		NULL AS
		DUE_DATE,
		0.0 AS BALANCE,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CUSTOMER_REFUND CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=5 AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId
		AND T.T_DATE
		BETWEEN
		:fromDate AND :toDate and
		C.ID=:customerId
	</sql-query>

	<sql-query name="getDraftCustomerRefundsByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		T.TOTAL AS
		TOTAL_PRICE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		NULL AS
		DUE_DATE,
		0.0 AS BALANCE,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CUSTOMER_REFUND CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=5 AND
		T.SAVE_STATUS=201 AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN
		:fromDate AND :toDate and
		C.ID=:customerId
	</sql-query>

	<sql-query name="getCustomerRefundsByTypeByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="paymentmethod" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		T.TOTAL AS
		TOTAL_PRICE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		NULL AS
		DUE_DATE,
		0.0 AS BALANCE,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CUSTOMER_REFUND CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=5 AND
		T.PAYMENT_METHOD
		LIKE
		:paymentmethod AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN
		:fromDate
		AND :toDate and
		C.ID=:customerId
	</sql-query>

	<sql-query name="getAllTransactionsByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />

		SELECT
		T.NUMBER AS
		TRANSACTION_NUMBER,
		CASE
		WHEN T.T_TYPE = 8
		THEN
		I.DUE_DATE
		ELSE
		null
		END
		AS DUE_DATE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.MEMO AS
		TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_DATE AS TRANSACTION_DATE,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.TOTAL AS TRANSACTION_NET_AMOUNT,
		T.CURRENCY AS
		CURRENCY
		FROM
		TRANSACTION T
		LEFT JOIN
		INVOICE I ON I.ID=T.ID
		LEFT JOIN
		CASH_SALES CS ON
		CS.ID=T.ID
		LEFT JOIN
		CUSTOMER_CREDIT_MEMO CCM
		ON
		CCM.ID=T.ID
		LEFT
		JOIN CUSTOMER_REFUND CR ON
		CR.ID=T.ID
		LEFT JOIN
		ESTIMATE E
		ON
		E.ID=T.ID
		LEFT JOIN
		RECEIVE_PAYMENT RP ON RP.ID=T.ID
		LEFT JOIN
		CUSTOMER_PREPAYMENT CP ON CP.ID=T.ID
		LEFT
		JOIN PAYEE P
		ON
		P.ID=I.CUSTOMER_ID OR
		P.ID=CS.CUSTOMER_ID
		OR
		P.ID=CCM.CUSTOMER_ID OR
		P.ID=CR.CUSTOMER_ID OR
		P.ID=E.CUSTOMER_ID OR

		P.ID=RP.CUSTOMER_ID OR
		P.ID=CP.CUSTOMER_ID
		WHERE
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN
		:fromDate AND
		:toDate and
		P.ID=:customerId
	</sql-query>




	<sql-query name="getCustomerCreditMemos">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		SELECT
		T.SAVE_STATUS AS SAVE_STATUS,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		T.TOTAL AS
		TOTAL_PRICE,
		CASE
		WHEN T.SAVE_STATUS =
		204
		THEN TRUE
		ELSE
		FALSE
		END AS
		ISVOIDED,
		NULL AS DUE_DATE,
		0.0 AS BALANCE,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT
		OUTER JOIN
		CUSTOMER_CREDIT_MEMO
		CCM
		ON
		T.ID = CCM.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CCM.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=4
		AND
		CASE
		WHEN
		3=:viewType
		THEN
		(T.SAVE_STATUS =204)
		WHEN 4=:viewType
		THEN
		(T.SAVE_STATUS
		=201)
		ELSE true
		END
		AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN
		:fromDate AND
		:toDate
	</sql-query>
	<sql-query name="getInvoicesOnly">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="todayDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		SELECT
		T.SAVE_STATUS AS SAVE_STATUS,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		I.DUE_DATE
		AS
		DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		I.BALANCE_DUE
		AS BALANCE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		INVOICE I
		ON
		T.ID=I.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		I.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=8 AND
		CASE
		WHEN
		1=:viewType THEN
		(I.BALANCE_DUE
		&gt;0.0 AND T.STATUS != 2 AND
		T.SAVE_STATUS !=204 AND
		T.SAVE_STATUS!=201)
		WHEN 2=:viewType
		THEN
		(I.BALANCE_DUE &gt;0.0 AND
		I.DUE_DATE &lt; :todayDate AND
		T.SAVE_STATUS
		!=204 AND
		T.SAVE_STATUS!=201)
		WHEN 3=:viewType
		THEN
		(T.SAVE_STATUS =204)
		WHEN
		4=:viewType
		THEN
		(T.SAVE_STATUS =201)
		ELSE true
		END
		AND  T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN :fromDate AND :toDate
		ORDER
		BY DUE_DATE
	</sql-query>
	<sql-query name="getCashSalesList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		SELECT
		T.SAVE_STATUS AS SAVE_STATUS,
		T.CURRENCY AS CURRENCY_ID,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		null AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		0.0 AS
		BALANCE,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN
		TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		CASH_SALES CS
		ON T.ID=CS.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID =
		CS.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=1 AND
		CASE
		WHEN 3=:viewType
		THEN
		(T.SAVE_STATUS =204)
		WHEN
		4=:viewType
		THEN
		(T.SAVE_STATUS =201)
		ELSE true
		END
		AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN
		:fromDate AND
		:toDate
	</sql-query>
	<sql-query name="getCustomerReceivePaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="string" />
		<return-scalar column="CURRENCY" type="long" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
		T.TOTAL AS
		AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS IS_VOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		RP.CHECK_NUMBER
		AS
		CHECK_NUMBER,
		T.CURRENCY AS CURRENCY

		FROM
		TRANSACTION T
		LEFT OUTER JOIN
		RECEIVE_PAYMENT
		RP
		ON
		T.ID=RP.ID
		LEFT OUTER
		JOIN
		CUSTOMER C
		ON
		C.ID
		= RP.CUSTOMER_ID
		LEFT
		OUTER
		JOIN
		PAYEE P
		ON
		P.ID =
		C.ID

		WHERE
		T.T_TYPE=12 AND
		CASE
		WHEN 2=:viewType
		THEN
		(T.SAVE_STATUS != 204)
		WHEN 3=:viewType
		THEN
		T.SAVE_STATUS = 204
		ELSE
		true
		END
		AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN :fromDate
		AND :toDate
	</sql-query>
	<sql-query name="getCustomerPrepaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER AS TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
		T.TOTAL AS
		AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS IS_VOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		CP.CHECK_NUMBER
		AS
		CHECK_NUMBER,
		T.CURRENCY AS CURRENCY

		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		CUSTOMER_PREPAYMENT CP
		ON
		T.ID=CP.ID
		LEFT OUTER
		JOIN
		CUSTOMER C
		ON
		C.ID =
		CP.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID

		WHERE T.T_TYPE=29 AND
		CASE
		WHEN 2=:viewType
		THEN
		(T.SAVE_STATUS != 204)
		WHEN 3=:viewType
		THEN
		T.SAVE_STATUS = 204
		ELSE
		true
		END
		AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN
		:fromDate AND :toDate
	</sql-query>

	<sql-query name="getTDSPayBillTransactionsList">
		<query-param name="companyId" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="TDS_TOTAL" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		SELECT PB.VENDOR_ID AS VENDOR_ID,
		PB.TDS_TOTAL AS TDS_TOTAL,
		T.TOTAL AS
		TOTAL,
		T.T_DATE AS TRANSACTION_DATE,
		T.ID AS TRANSACTION_ID
		FROM PAY_BILL
		PB LEFT JOIN
		TRANSACTION T ON T.ID=PB.ID
		LEFT OUTER JOIN
		TDSTRANSACTIONITEM TTI ON TTI.TRANSACTION_ID = T.ID
		WHERE
		PB.TDS_TOTAL!=0 AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND TTI IS NULL
	</sql-query>

	<sql-query name="getTDSReceivePaymentTransactionsList">
		<query-param name="companyId" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="TDS_TOTAL" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		SELECT RP.CUSTOMER_ID AS CUSTOMER_ID,
		RP.TDS_TOTAL AS TDS_TOTAL,
		T.TOTAL AS TOTAL,
		T.T_DATE AS TRANSACTION_DATE,
		T.ID AS TRANSACTION_ID
		FROM RECEIVE_PAYMENT RP LEFT JOIN
		TRANSACTION T ON T.ID=RP.ID
		LEFT OUTER
		JOIN TDSTRANSACTIONITEM TTI ON TTI.TRANSACTION_ID = T.ID
		WHERE
		RP.TDS_TOTAL!=0 AND T.SAVE_STATUS !=
		202 AND 
		T.COMPANY_ID=:companyId AND TTI IS NULL
	</sql-query>

	<sql-query name="getCashPurchaseListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		CP.PAYFROM_ACCOUNT_ID AS
		TRANSACTION_ACCOUNT,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		LEFT
		OUTER
		JOIN
		VENDOR V
		on V.ID =
		CP.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =2
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN
		:fromDate AND :toDate AND V.ID =:vendorId

	</sql-query>

	<sql-query name="getDraftCashPurchaseListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		CP.PAYFROM_ACCOUNT_ID AS
		TRANSACTION_ACCOUNT,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		LEFT
		OUTER
		JOIN
		VENDOR V
		on V.ID =
		CP.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =2
		AND T.SAVE_STATUS=201
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId

	</sql-query>

	<sql-query name="getBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		EB.DUE_DATE AS DUE_DATE ,
		T.NUMBER
		AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		ENTER_BILL EB
		on
		T.ID=EB.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		EB.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =6
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND
		:toDate AND
		V.ID =:vendorId

	</sql-query>

	<sql-query name="getOpenBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		EB.DUE_DATE AS DUE_DATE ,
		T.NUMBER
		AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		ENTER_BILL EB
		on
		T.ID=EB.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		EB.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =6 AND T.SAVE_STATUS
		!= 202 AND EB.BALANCE_DUE
		&gt;0.0
		AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN :fromDate AND
		:toDate AND
		V.ID =:vendorId

	</sql-query>

	<sql-query name="getDraftBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		EB.DUE_DATE AS DUE_DATE ,
		T.NUMBER
		AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		ENTER_BILL EB
		on
		T.ID=EB.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		EB.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =6 AND
		T.SAVE_STATUS=201
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId
		AND T.T_DATE BETWEEN
		:fromDate AND
		:toDate AND
		V.ID =:vendorId

	</sql-query>

	<sql-query name="getOverDueBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<query-param name="currentDate" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		EB.DUE_DATE AS DUE_DATE ,
		T.NUMBER
		AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		ENTER_BILL EB
		on
		T.ID=EB.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		EB.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =6 AND T.SAVE_STATUS
		!= 202 AND EB.BALANCE_DUE
		&gt;0.0
		AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN :fromDate AND
		:toDate AND
		EB.DUE_DATE &lt; :currentDate
		AND V.ID =:vendorId

	</sql-query>


	<sql-query name="getAllPayBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		PB.PAYFROM_ID as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		PB.BILL_DUE_ONORBEFORE AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		PAY_BILL PB
		on
		T.ID=PB.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		PB.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =11
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND
		T.T_DATE BETWEEN :fromDate
		AND :toDate AND V.ID =:vendorId

	</sql-query>


	<sql-query name="getAllChequesListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		WC.ACCOUNT_ID as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		WRITE_CHECKS WC
		on
		T.ID=WC.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		WC.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =15
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getDraftChequesListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		WC.ACCOUNT_ID as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		WRITE_CHECKS WC
		on
		T.ID=WC.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		WC.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =15
		AND
		T.SAVE_STATUS=201
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId
		AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getPurchaseOrderListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		PO.DUE_DATE AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		PURCHASE_ORDER PO
		on
		T.ID=PO.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		PO.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =22
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>


	<sql-query name="getOpenPurchaseOrderListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		PO.DUE_DATE AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		PURCHASE_ORDER PO
		on
		T.ID=PO.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		PO.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =22
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getDraftPurchaseOrderListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		PO.DUE_DATE AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		PURCHASE_ORDER PO
		on
		T.ID=PO.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		PO.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =22
		AND
		T.SAVE_STATUS=201 AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId
		AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getAllTransactionsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		CASE
		WHEN T.T_TYPE =2
		THEN
		CP.PAYFROM_ACCOUNT_ID
		WHEN
		T.T_TYPE =15
		THEN
		WC.ACCOUNT_ID
		WHEN
		T.T_TYPE =27
		THEN
		CCC.PAYFROM_ACCOUNT_ID
		WHEN
		T.T_TYPE =11
		THEN
		PB.PAYFROM_ID ELSE
		null END
		AS TRANSACTION_ACCOUNT,
		CASE
		WHEN T.T_TYPE =2
		THEN
		CP.DELIVERY_DATE
		WHEN
		T.T_TYPE =27
		THEN
		CCC.DELIVERY_DATE
		WHEN T.T_TYPE =6
		THEN
		EB.DUE_DATE
		WHEN
		T.T_TYPE =11
		THEN
		PB.BILL_DUE_ONORBEFORE ELSE null END AS DUE_DATE,
		0 AS
		EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT
		JOIN
		WRITE_CHECKS WC
		on
		T.ID=WC.ID
		LEFT
		JOIN
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		LEFT
		JOIN
		CREDIT_CARD_CHARGES CCC
		on
		T.ID=CCC.ID
		LEFT
		JOIN
		PAY_BILL PB
		on
		T.ID=PB.ID
		LEFT JOIN
		ENTER_BILL EB
		on
		T.ID =EB.ID
		LEFT JOIN VENDOR_CREDIT_MEMO VCM
		on T.ID
		=VCM.ID
		LEFT JOIN
		VENDOR V
		on V.ID =
		WC.VENDOR_ID OR V.ID =CP.VENDOR_ID OR
		V.ID=CCC.VENDOR_ID OR
		V.ID =PB.VENDOR_ID OR
		V.ID =EB.VENDOR_ID OR V.ID
		=VCM.VENDOR_ID
		WHERE T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId
		AND
		T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>


	<sql-query name="getAllCreditMemosByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER
		AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		VENDOR_CREDIT_MEMO VCM
		on
		T.ID=VCM.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		VCM.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =14
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getDraftCreditMemosByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		null as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER
		AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		VENDOR_CREDIT_MEMO VCM
		on
		T.ID=VCM.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		VCM.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =14
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.SAVE_STATUS= 201 AND
		T.COMPANY_ID=:companyId
		AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getAllExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		CCC.DELIVERY_DATE AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS TRANSACTION_DATE,
		0 AS EXPENSE_STATUS,
		CASE
		WHEN
		T.T_TYPE =26 THEN
		CP.PAYFROM_ACCOUNT_ID
		WHEN T.T_TYPE=27 THEN
		CCC.PAYFROM_ACCOUNT_ID ELSE NULL END
		AS TRANSACTION_ACCOUNT,
		CASE
		WHEN
		T.T_TYPE =26 THEN
		CP.DELIVERY_DATE ELSE NULL
		END AS DUE_DATE
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		CREDIT_CARD_CHARGES CCC
		on
		T.ID=CCC.ID
		LEFT
		OUTER
		JOIN
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		CCC.VENDOR_ID OR V.ID =CP.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE IN (27,26)
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN :fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>


	<sql-query name="getAllCreditExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		CCC.DELIVERY_DATE AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS TRANSACTION_DATE,
		0 AS EXPENSE_STATUS,
		CCC.PAYFROM_ACCOUNT_ID
		AS TRANSACTION_ACCOUNT,
		null AS DUE_DATE
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		CREDIT_CARD_CHARGES CCC
		on
		T.ID=CCC.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		CCC.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID =
		V.ID
		WHERE
		T.T_TYPE =27
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getDraftCreditExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		CCC.DELIVERY_DATE AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS TRANSACTION_DATE,
		0 AS EXPENSE_STATUS,
		CCC.PAYFROM_ACCOUNT_ID
		AS TRANSACTION_ACCOUNT,
		null AS DUE_DATE
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		CREDIT_CARD_CHARGES CCC
		on
		T.ID=CCC.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		CCC.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID =
		V.ID
		WHERE
		T.T_TYPE =27
		AND T.SAVE_STATUS=201 AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId
		AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getAllCashExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS,
		CP.PAYFROM_ACCOUNT_ID
		AS
		TRANSACTION_ACCOUNT,
		NULL AS DUE_DATE
		FROM
		TRANSACTION T

		LEFT OUTER
		JOIN
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		CP.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE=26
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="getDraftCashExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS,
		CP.PAYFROM_ACCOUNT_ID
		AS
		TRANSACTION_ACCOUNT,
		NULL AS DUE_DATE
		FROM
		TRANSACTION T

		LEFT OUTER
		JOIN
		CASH_PURCHASE CP
		on
		T.ID=CP.ID
		LEFT
		OUTER JOIN
		VENDOR V
		on V.ID =
		CP.VENDOR_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE=26
		AND
		T.SAVE_STATUS = 201 AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:vendorId
	</sql-query>

	<sql-query name="update.TaxReturnEntry.make.Transaction.null">
		<query-param name="transactionId" type="long" />

		UPDATE TAX_RETURN_ENTRY SET TRANSACTION_ID=NULL WHERE
		TRANSACTION_ID=:transactionId

	</sql-query>

	<sql-query name="getIncomeExpensePortletInfo">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<return-scalar column="INCOME_AMOUNT" type="double" />
		<return-scalar column="EXPENSE_AMOUNT" type="double" />
		SELECT SUM(CASE WHEN A.A_TYPE=14 THEN AT.AMOUNT END)AS INCOME_AMOUNT,
		SUM(CASE WHEN A.A_TYPE=16 THEN AT.AMOUNT END)AS EXPENSE_AMOUNT
		FROM
		ACCOUNT_TRANSACTION AT LEFT JOIN ACCOUNT A ON A.ID=AT.ACCOUNT_ID
		LEFT
		JOIN TRANSACTION T ON T.ID=AT.TRANSACTION_ID
		WHERE (T.T_DATE BETWEEN
		:startDate AND :endDate) AND T.COMPANY_ID=:companyId

	</sql-query>

	<sql-query name="getCustomersBySales">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />
		<return-scalar column="CUSTOMER" type="encryptedstring" />
		<return-scalar column="TRANSACTIONS" type="int" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		SELECT C.NAME AS CUSTOMER,COUNT(T.TOTAL) AS TRANSACTIONS,SUM(T.TOTAL)
		AS
		TOTAL,C.CURRENCY AS CURRENCY
		FROM TRANSACTION T LEFT JOIN
		INVOICE I ON
		I.ID=T.ID LEFT JOIN
		CASH_SALES CS
		ON CS.ID=T.ID LEFT JOIN
		PAYEE C ON
		(C.ID=I.CUSTOMER_ID OR
		C.ID =
		CS.CUSTOMER_ID) WHERE C.ID IS
		NOT NULL AND
		T.T_DATE BETWEEN
		:startDate
		AND :endDate AND T.COMPANY_ID
		=:companyId
		GROUP BY C.ID,C.NAME,C.CURRENCY ORDER BY TOTAL DESC LIMIT
		:limit

	</sql-query>

	<sql-query name="getVendorsBySales">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />
		<return-scalar column="VENDOR" type="encryptedstring" />
		<return-scalar column="TRANSACTIONS" type="int" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		SELECT C.NAME AS VENDOR,COUNT(T.TOTAL) AS TRANSACTIONS,SUM(T.TOTAL)
		AS
		TOTAL,C.CURRENCY AS CURRENCY FROM TRANSACTION T LEFT JOIN ENTER_BILL
		EB ON EB.ID=T.ID LEFT
		JOIN CASH_PURCHASE CP ON CP.ID=T.ID LEFT JOIN
		CREDIT_CARD_CHARGES CC
		ON CC.ID=T.ID LEFT JOIN PAYEE C ON
		(C.ID=EB.VENDOR_ID OR C.ID =
		CP.VENDOR_ID OR C.ID =CC.VENDOR_ID) WHERE
		C.ID IS NOT NULL AND
		T.T_DATE BETWEEN :startDate AND :endDate AND
		T.COMPANY_ID =:companyId
		GROUP BY
		C.ID,C.NAME,C.CURRENCY ORDER BY TOTAL
		DESC LIMIT :limit

	</sql-query>

	<sql-query name="getIncomeAccounts">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		SELECT A.NAME AS NAME,SUM(AT.AMOUNT) AS AMOUNT FROM ACCOUNT_TRANSACTION AT
		LEFT JOIN ACCOUNT A ON AT.ACCOUNT_ID=A.ID LEFT JOIN TRANSACTION T ON
		T.ID=AT.TRANSACTION_ID WHERE (A.A_TYPE=14 OR A.A_TYPE=17) AND
		AT.COMPANY_ID=:companyId
		AND
		T.T_DATE BETWEEN :startDate AND :endDate
		GROUP BY A.NAME ORDER BY
		AMOUNT
		DESC
	</sql-query>

	<sql-query name="getItemsBySalesQuantity">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />
		<return-scalar column="ITEM" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		SELECT I.NAME AS ITEM,
		SUM(CASE
		WHEN T.T_TYPE IN (1,4,5,7,8,12,21,29)
		THEN
		TI.QTY_VALUE
		ELSE 0 END) AS QUANTITY
		FROM ITEM I LEFT JOIN
		TRANSACTION_ITEM TI ON
		TI.ITEM_ID=I.ID LEFT JOIN
		TRANSACTION T ON
		T.ID=TI.TRANSACTION_ID
		WHERE
		I.IS_SELL_ITEM=TRUE AND
		I.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:startDate AND :endDate
		GROUP BY I.ID,I.NAME ORDER BY QUANTITY DESC LIMIT :limit

	</sql-query>

	<sql-query name="getItemsByPurchaseQuantity">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />
		<return-scalar column="ITEM" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		SELECT I.NAME,
		SUM(CASE
		WHEN T.T_TYPE IN (2,3,6,9,11,14,22,23,26,27,28)
		THEN TI.QTY_VALUE
		ELSE 0 END)
		FROM ITEM I LEFT JOIN TRANSACTION_ITEM
		TI
		ON TI.ITEM_ID=I.ID LEFT JOIN
		TRANSACTION T ON
		T.ID=TI.TRANSACTION_ID
		WHERE I.IS_BUY_ITEM=TRUE AND
		I.COMPANY_ID=:companyId AND
		T.T_DATE
		BETWEEN :startDate AND :endDate
		GROUP BY I.ID,I.NAME ORDER BY QUANTITY
		DESC
		LIMIT :limit

	</sql-query>

	<sql-query name="getAccountBalances">
		<query-param name="companyId" type="long" />
		<query-param name="accountId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<return-scalar column="ACCOUNT" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		SELECT A.NAME AS ACCOUNT, SUM(CASE WHEN AT.ID IS NOT NULL THEN
		AT.AMOUNT
		ELSE 0 END) AS AMOUNT FROM ACCOUNT A LEFT JOIN
		ACCOUNT_TRANSACTION AT ON
		AT.ACCOUNT_ID =A.ID LEFT JOIN TRANSACTION T
		ON T.ID=AT.TRANSACTION_ID
		WHERE A.COMPANY_ID =:companyId AND (CASE WHEN
		T.ID IS NOT NULL THEN T.T_DATE
		BETWEEN :startDate AND :endDate ELSE
		TRUE END) AND A.ID=:accountId GROUP BY A.ID,A.NAME
	</sql-query>

	<sql-query name="getAllQuotesByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="estimateType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		NULL
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		ESTIMATE E
		ON
		T.ID=E.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		E.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=7 AND T.SAVE_STATUS
		!= 202 AND
		AND
		E.ESTIMATETYPE =:estimateType
		AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN :fromDate AND :toDate
		AND
		C.ID=:customerId

	</sql-query>

	<sql-query name="getDraftQuotesByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="estimateType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />

		SELECT
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS
		TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.T_DATE AS
		TRANSACTION_DATE,
		T.NUMBER
		TRANSACTION_NUMBER,
		P.NAME AS
		CUSTOMER_NAME,
		T.NET_AMOUNT AS
		TRANSACTION_NET_AMOUNT,
		NULL
		AS DUE_DATE,
		T.TOTAL AS TOTAL_PRICE,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		ESTIMATE E
		ON
		T.ID=E.ID
		LEFT OUTER JOIN
		CUSTOMER C
		ON
		C.ID
		=
		E.CUSTOMER_ID
		LEFT
		OUTER JOIN
		PAYEE P
		ON
		P.ID =
		C.ID
		WHERE T.T_TYPE=7 T.SAVE_STATUS
		!= 202 AND
		AND
		E.ESTIMATETYPE =:estimateType
		AND T.SAVE_STATUS=201 AND
		T.COMPANY_ID=:companyId AND T.T_DATE
		BETWEEN
		:fromDate AND :toDate
		AND
		C.ID=:customerId

	</sql-query>

	<sql-query name="getAllChequesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		WC.ACCOUNT_ID as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		WRITE_CHECKS WC
		on
		T.ID=WC.ID
		LEFT
		OUTER JOIN
		CUSTOMER V
		on V.ID =
		WC.CUSTOMER_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =15
		AND
		T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:customerId
	</sql-query>

	<sql-query name="getDraftChequesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />

		SELECT
		WC.ACCOUNT_ID as TRANSACTION_ACCOUNT,
		T.MEMO AS TRANSACTION_MEMO,
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		null AS DUE_DATE ,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		P.NAME
		AS
		VENDOR_NAME ,
		T.TOTAL AS
		TRANSACTION_NET_AMOUNT,
		CASE
		WHEN T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE
		AS
		TRANSACTION_DATE,
		0 AS EXPENSE_STATUS
		FROM
		TRANSACTION T
		LEFT OUTER
		JOIN
		WRITE_CHECKS WC
		on
		T.ID=WC.ID
		LEFT
		OUTER JOIN
		CUSTOMER V
		on V.ID =
		WC.CUSTOMER_ID
		LEFT OUTER
		JOIN
		PAYEE P
		ON P.ID = V.ID
		WHERE
		T.T_TYPE =15
		AND
		T.SAVE_STATUS=201
		AND T.SAVE_STATUS
		!= 202 AND
		T.COMPANY_ID=:companyId
		AND T.T_DATE BETWEEN
		:fromDate AND :toDate AND
		V.ID =:customerId
	</sql-query>

	<sql-query name="getClientByCompany">
		<query-param name="clientEmail" type="string" />
		<query-param name="companyName" type="string" />

		select c.id
		from client c left join users u on u.client_id=c.id
		left
		join company com on com.id=u.company_id
		where c.email_id=:clientEmail
		and LOWER(com.trading_name)=:companyName
		limit 1;

	</sql-query>

	<sql-query name="getPurchaseLineItems">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DESCRIPTION" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TAX_CODE" type="encryptedstring" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="string" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		<return-scalar column="LINE_NUMBER" type="long" />

		SELECT V.NAME AS NAME, T.T_DATE AS
		TRANSACTION_DATE, T.NUMBER AS
		TRANSACTION_NUMBER, I.SALES_DESCRIPTION
		AS DESCRIPTION,
		CASE WHEN
		(T.AMOUNTS_INCLUDE_VAT) THEN
		TI.LINE_TOTAL-TI.VAT_FRACTION ELSE
		TI.LINE_TOTAL END AS TOTAL,
		TC.NAME
		AS TAX_CODE, TI.VAT_FRACTION AS
		TAX_AMOUNT,
		CUR.FORMAL_NAME AS
		CURRENCY,T.CURRENCY_FACTOR AS
		CURRENCY_FACTOR,
		TI.IDX AS LINE_NUMBER
		FROM TRANSACTION_ITEM TI
		LEFT JOIN
		ITEM I ON I.ID =TI.ITEM_ID
		LEFT JOIN TRANSACTION T ON T.ID =
		TI.TRANSACTION_ID
		LEFT JOIN ENTER_BILL EB ON EB.ID=T.ID
		LEFT JOIN
		CASH_PURCHASE CP ON CP.ID=T.ID
		LEFT JOIN CREDIT_CARD_CHARGES CCC ON
		CCC.ID= T.ID
		LEFT JOIN PAYEE V ON (V.ID =EB.VENDOR_ID OR V.ID =
		CP.VENDOR_ID OR V.ID = CCC.VENDOR_ID)
		LEFT JOIN TAX_CODE TC ON TC.ID =
		TI.TAX_CODE
		LEFT JOIN CURRENCY CUR ON CUR.ID = T.CURRENCY
		WHERE
		I.IS_BUY_ITEM AND I.ID IS NOT NULL AND (T.T_DATE BETWEEN :startDate
		AND :endDate) AND I.COMPANY_ID=:companyId ORDER BY T.T_DATE

	</sql-query>

	<sql-query name="getSupplyLineItems">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DESCRIPTION" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TAX_CODE" type="encryptedstring" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="string" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		<return-scalar column="COUNTRY" type="encryptedstring" />
		<return-scalar column="LINE_NUMBER" type="long" />

		SELECT C.NAME AS NAME, T.T_DATE AS
		TRANSACTION_DATE, T.NUMBER AS
		TRANSACTION_NUMBER, I.SALES_DESCRIPTION
		AS DESCRIPTION,
		CASE WHEN
		(T.AMOUNTS_INCLUDE_VAT) THEN
		TI.LINE_TOTAL-TI.VAT_FRACTION ELSE
		TI.LINE_TOTAL END AS TOTAL,
		TC.NAME
		AS TAX_CODE, TI.VAT_FRACTION AS
		TAX_AMOUNT, T.CURRENCY AS CURRENCY,
		T.CURRENCY_FACTOR AS
		CURRENCY_FACTOR, PA.COUNTRY AS COUNTRY,
		TI.IDX AS LINE_NUMBER
		FROM
		TRANSACTION_ITEM TI
		LEFT JOIN ITEM I ON I.ID =TI.ITEM_ID
		LEFT JOIN
		TRANSACTION T ON T.ID = TI.TRANSACTION_ID
		LEFT JOIN INVOICE INV ON
		INV.ID=T.ID
		LEFT JOIN ESTIMATE E ON E.ID=T.ID
		LEFT JOIN CASH_SALES CS ON
		CS.ID= T.ID
		LEFT JOIN PAYEE C ON (C.ID =INV.CUSTOMER_ID OR C.ID =
		E.CUSTOMER_ID OR
		C.ID = CS.CUSTOMER_ID)
		LEFT JOIN PAYEE_ADDRESS PA ON
		PA.PAYEE_ID = C.ID
		LEFT JOIN TAX_CODE TC ON TC.ID = TI.TAX_CODE
		WHERE
		I.IS_SELL_ITEM =true AND C.ID IS NOT NULL AND (T.T_DATE BETWEEN
		:startDate AND :endDate) AND I.COMPANY_ID=:companyId ORDER BY T.T_DATE

	</sql-query>

	<sql-query name="getGLLineItems">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="ACCOUNT_ID" type="string" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DESC" type="encryptedstring" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="CREDIT" type="double" />
		<return-scalar column="DEBIT" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />

		SELECT T.T_DATE AS TRANSACTION_DATE, A.A_NUMBER AS
		ACCOUNT_ID, A.NAME
		AS ACCOUNT_NAME, T.MEMO AS TRANSACTION_DESC,P.NAME
		AS NAME, T.ID AS
		TRANSACTION_ID,
		CASE WHEN AT.AMOUNT &gt; 0 THEN AT.AMOUNT ELSE 0 END AS
		CREDIT, CASE WHEN
		AT.AMOUNT &lt; 0 THEN AT.AMOUNT ELSE 0 END AS DEBIT,
		A.TOTAL_BALANCE AS
		BALANCE,
		T.NUMBER AS TRANSACTION_NUMBER,T.T_TYPE AS
		TRANSACTION_TYPE

		FROM ACCOUNT_TRANSACTION AT
		LEFT JOIN ACCOUNT A ON A.ID
		= AT.ACCOUNT_ID
		LEFT JOIN TRANSACTION T ON T.ID = AT.TRANSACTION_ID

		LEFT JOIN CASH_PURCHASE CP ON CP.ID = T.ID
		LEFT JOIN CASH_SALES CS ON
		CS.ID = T.ID
		LEFT JOIN CUSTOMER_CREDIT_MEMO CCM ON CCM.ID = T.ID
		LEFT
		JOIN CUSTOMER_PREPAYMENT CPP ON CPP.ID = T.ID
		LEFT JOIN CUSTOMER_REFUND
		CR ON CR.ID = T.ID
		LEFT JOIN INVOICE I ON I.ID = T.ID
		LEFT JOIN
		ENTER_BILL EB ON EB.ID = T.ID
		LEFT JOIN CREDIT_CARD_CHARGES CCC ON
		CCC.ID = T.ID
		LEFT JOIN PAY_BILL PB ON PB.ID = T.ID
		LEFT JOIN
		RECEIVE_PAYMENT RP ON RP.ID = T.ID
		LEFT JOIN TAX_ADJUSTMENT TA ON TA.ID
		= T.ID
		LEFT JOIN TAX_RETURN TR ON TR.ID = T.ID
		LEFT JOIN
		VENDOR_CREDIT_MEMO VCM ON VCM.ID = T.ID
		LEFT JOIN WRITE_CHECKS WC ON
		WC.ID = T.ID
		LEFT JOIN PAY_TAX PT ON PT.ID = T.ID
		LEFT JOIN RECEIVE_VAT
		RV ON RV.ID = T.ID

		LEFT JOIN PAYEE P ON (P.ID = CP.VENDOR_ID OR P.ID =
		CS.CUSTOMER_ID OR P.ID
		= CCM.CUSTOMER_ID OR P.ID = CPP.CUSTOMER_ID OR
		P.ID = CR.CUSTOMER_ID
		OR P.ID = I.CUSTOMER_ID
		OR P.ID = EB.VENDOR_ID OR
		P.ID = CCC.VENDOR_ID OR P.ID = PB.VENDOR_ID OR
		P.ID = RP.CUSTOMER_ID OR
		P.ID = TA.TAX_AGENCY_ID OR P.ID =
		TR.TAX_AGENCY OR P.ID = VCM.VENDOR_ID
		OR P.ID = WC.CUSTOMER_ID OR P.ID = WC.VENDOR_ID OR P.ID =
		WC.TAX_AGENCY_ID)

		WHERE T.T_DATE BETWEEN :startDate AND :endDate AND
		AT.COMPANY_ID = :companyId ORDER BY A.ID,T.T_DATE;

	</sql-query>

	<sql-query name="getTAXReturnObj">
		<query-param name="taxreturnID" type="long" />
		<return-scalar column="id" type="long" />

		select * from tax_return where id=:taxreturnID


	</sql-query>

	<sql-query name="getTAXReturnObjByTaxAgency">
		<query-param name="taxAgencyID" type="long" />
		<return-scalar column="id" type="long" />

		select * from tax_return where tax_agency=:taxAgencyID


	</sql-query>

	<sql-query name="delete.Estimate.from.drafts">
		<query-param name="estimateId" type="long" />
		delete from invoice_estimates where estimate_id=:estimateId
	</sql-query>

	<sql-query name="getPayeeWriteChecks">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="payeeType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.T_DATE AS
		PAYMENT_DATE,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.STATUS AS
		TRANSACTION_STATUS,
		T.T_DATE AS ISSUE_DATE,
		WC.IN_FAVOUR_OF AS NAME,
		T.PAYMENT_METHOD AS PAYMENT_METHOD,
		T.TOTAL AS AMOUNT_PAID,
		CASE WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		WC.CHECK_NUMBER
		AS CHECK_NUMBER,
		T.CURRENCY AS CURRENCY

		FROM WRITE_CHECKS WC
		LEFT JOIN
		TRANSACTION T ON T.ID = WC.ID
		LEFT JOIN PAYEE
		P ON
		(P.ID=(CASE WHEN
		:payeeType = 1 THEN WC.CUSTOMER_ID
		WHEN
		:payeeType = 2 THEN WC.VENDOR_ID
		 ELSE 0
		END))

		WHERE T.COMPANY_ID=:companyId AND
		CASE
		WHEN
		0=:viewType THEN
		((T.STATUS=0
		OR
		T.STATUS=1 )AND T.SAVE_STATUS != 204
		AND
		T.SAVE_STATUS!=201)
		WHEN
		2=:viewType THEN
		(T.STATUS=2
		AND
		T.SAVE_STATUS !=
		204 AND
		T.SAVE_STATUS!=201)
		WHEN 3=:viewType THEN
		(T.SAVE_STATUS = 204)
		WHEN
		4=:viewType THEN
		(T.SAVE_STATUS = 201)
		ELSE
		true
		END
		AND T.SAVE_STATUS
		!=
		202
		AND :payeeType= WC.PAY_TO_TYPE AND
		T.T_DATE
		BETWEEN
		:fromDate AND :toDate
	</sql-query>


	<sql-query name="getDepositsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="IN_ACCOUNT" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="long" />

		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_DATE AS TRANSACTION_DATE,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.NUMBER AS TRANSACTION_NUMBER,
		A.NAME AS IN_ACCOUNT,
		T.TOTAL AS AMOUNT,
		T.CURRENCY AS CURRENCY

		FROM MAKE_DEPOSIT MD LEFT JOIN
		TRANSACTION T ON T.ID = MD.ID LEFT JOIN
		ACCOUNT A ON A.ID =
		MD.DEPOSIT_TO

		WHERE
		T.COMPANY_ID= :companyId AND
		CASE
		WHEN
		0=:viewType THEN
		((T.STATUS=0 OR
		T.STATUS=1 )AND T.SAVE_STATUS !=
		204
		AND
		T.SAVE_STATUS!=201)
		WHEN
		2=:viewType THEN
		(T.STATUS=2
		AND
		T.SAVE_STATUS !=
		204 AND
		T.SAVE_STATUS!=201)
		WHEN 3=:viewType THEN
		(T.SAVE_STATUS = 204)
		WHEN
		4=:viewType THEN
		(T.SAVE_STATUS = 201)
		ELSE
		true
		END
		AND T.SAVE_STATUS
		!= 202
		AND
		T.T_DATE
		BETWEEN
		:fromDate AND :toDate
	</sql-query>

	<sql-query name="getTransfersList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="payeeType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="IN_ACCOUNT" type="encryptedstring" />
		<return-scalar column="FROM_ACCOUNT" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="long" />

		SELECT
		T.ID AS TRANSACTION_ID,
		T.T_DATE AS TRANSACTION_DATE,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.NUMBER AS TRANSACTION_NUMBER,
		A1.NAME AS IN_ACCOUNT,
		A2.NAME AS FROM_ACCOUNT,
		T.TOTAL AS AMOUNT,
		T.CURRENCY AS CURRENCY

		FROM
		TRANSFER_FUND TF LEFT JOIN TRANSACTION T ON T.ID = TF.ID LEFT JOIN
		ACCOUNT A1 ON A1.ID = TF.DEPOSIT_IN_ID
		LEFT JOIN ACCOUNT A2 ON A2.ID =
		TF.DEPOSIT_FROM_ID

		WHERE
		T.COMPANY_ID= :companyId AND
		CASE
		WHEN
		0=:viewType THEN
		((T.STATUS=0 OR
		T.STATUS=1 )AND T.SAVE_STATUS != 204
		AND
		T.SAVE_STATUS!=201)
		WHEN
		2=:viewType THEN
		(T.STATUS=2
		AND
		T.SAVE_STATUS
		!= 204 AND
		T.SAVE_STATUS!=201)
		WHEN 3=:viewType THEN
		(T.SAVE_STATUS =
		204)
		WHEN
		4=:viewType THEN
		(T.SAVE_STATUS = 201)
		ELSE
		true
		END
		AND T.SAVE_STATUS
		 != 202
		AND
		T.T_DATE
		BETWEEN
		:fromDate AND :toDate
	</sql-query>
	
	<sql-query name="createInventoryItemHistory">
		CREATE OR REPLACE VIEW 
		INVENTORY_ITEM_HISTORY_VIEW AS
		SELECT
		T.COMPANY_ID as
		COMPANY_ID,
		T.ID as
		TRANSACTION_ID,
		TI.ID as TRANSACTION_ITEM_ID,
		TI.UNIT_PRICE as UNIT_PRICE,
		TI.QTY_VALUE AS QUANTITY, 
		TI.QTY_UNIT as QTY_UNIT,
		IT.ID as ITEM_ID,
		T.T_DATE AS TRANSACTION_DATE
		
		FROM
		TRANSACTION_ITEM TI
		LEFT OUTER JOIN
		TRANSACTION T
		ON T.ID=TI.TRANSACTION_ID
		LEFT OUTER JOIN 
		ITEM IT ON TI.TYPE=1 AND IT.TYPE IN (2,4) AND
		IT.ID=TI.ITEM_ID  
		
		WHERE T.SAVE_STATUS != 201 AND T.SAVE_STATUS != 202
		AND (T.T_TYPE IN (2,6,14,26,27) OR CASE WHEN T.T_TYPE=36 THEN TI.QTY_VALUE &gt;= 0 ELSE FALSE END) ;

	</sql-query>
	
	<sql-query name="getPurchasesOfItem.for.LIFO">
		<query-param name="inventoryId" type="long"/>
		
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="QUANTITY_VALUE" type="double" />
		<return-scalar column="QUANTITY_UNIT" type="long" />
		<return-scalar column="COST" type="double" />
		SELECT 
		TRANSACTION_ITEM_ID,
		QUANTITY AS QUANTITY_VALUE,
		QTY_UNIT AS QUANTITY_UNIT,
		UNIT_PRICE AS COST
		
		FROM INVENTORY_ITEM_HISTORY_VIEW IHV
		WHERE IHV.ITEM_ID= :inventoryId
		ORDER BY TRANSACTION_DATE DESC,TRANSACTION_ITEM_ID DESC;
	</sql-query>
	
	<sql-query name="getPurchasesOfItem">
		<query-param name="inventoryId" type="long"/>
		
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="QUANTITY_VALUE" type="double" />
		<return-scalar column="QUANTITY_UNIT" type="long" />
		<return-scalar column="COST" type="double" />
		SELECT 
		TRANSACTION_ITEM_ID,
		QUANTITY AS QUANTITY_VALUE,
		QTY_UNIT AS QUANTITY_UNIT,
		UNIT_PRICE AS COST
		
		FROM INVENTORY_ITEM_HISTORY_VIEW IHV
		WHERE IHV.ITEM_ID= :inventoryId
		ORDER BY TRANSACTION_DATE,TRANSACTION_ITEM_ID;
	</sql-query>
	
	<sql-query name="getAverageCost.of.Item">
		<query-param name="inventoryId" type="long"/>
		<return-scalar column="COST" type="double"/>
		
		SELECT 
		((SUM(QUANTITY*UNIT_PRICE))/SUM(QUANTITY)) as COST

		FROM INVENTORY_ITEM_HISTORY_VIEW IHV
		WHERE IHV.ITEM_ID= :inventoryId
		
	</sql-query>
	
	<sql-query name="getAssetValueOfAllInventory">
		<query-param name="companyId" type="long" />
	
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ASSET_VALUE" type="double" />
		SELECT 
		IT.ID AS ITEM_ID, 
		SUM(AT.AMOUNT) AS ASSET_VALUE
		
		FROM ACCOUNT_TRANSACTION AT 
		LEFT JOIN TRANSACTION T ON AT.TRANSACTION_ID=T.ID 
		LEFT JOIN TRANSACTION_ITEM TI ON TI.TYPE=1 AND TI.TRANSACTION_ID=T.ID 
		LEFT JOIN STOCK_ADJUSTMENT SA ON SA.ID=T.ID 
		LEFT JOIN STOCK_ADJUSTMENT_ITEM SAI ON SAI.STOCK_ADJUSTMENT=SA.ID
		LEFT JOIN ITEM IT ON IT.TYPE IN (2,4) AND (IT.ID=TI.ITEM_ID OR IT.ID=SAI.ITEM)
		
		 WHERE AT.ACCOUNT_ID=IT.ASSETS_ACCOUNT_ID
		 AND AT.COMPANY_ID=:companyId AND T.COMPANY_ID=:companyId AND IT.COMPANY_ID=:companyId
				 
		 GROUP BY IT.ID;
	
	</sql-query>

	<sql-query name="getInventoryHistoryView">
		CREATE OR REPLACE VIEW INVENTORY_HISTORY_VIEW AS 
		SELECT T.ID AS TRANSACTION_ID,
		IT.ID AS TRANSACTION_ITEM_ID,
		T.COMPANY_ID AS COMPANY,
		IT.ID AS ITEM_ID,
		T.T_DATE AS TRANSACTION_DATE,
		T.T_TYPE AS TRANSACTION_TYPE,
		T.NUMBER AS
		TRANSACTION_NUMBER,
		CASE WHEN
		T.T_TYPE IN (1,4,7,8) THEN -TI.QTY_VALUE ELSE
		TI.QTY_VALUE END AS QTY_VALUE,
		TI.QTY_UNIT,
		TI.UNIT_PRICE AS COST,
		TI.DESCRIPTION AS DESCRIPTION,
		IT.NAME AS ITEM_NAME,
		IT.ON_HAND_QTY_VALUE AS
		ITEM_TOTAL_QUANTITY,
		IT.PREFFERED_VENDOR AS
		PREFFERED_VENDOR,
		IT.SALES_PRICE AS ITEM_SALE_PRICE,
		P.ID AS
		PAYEE_ID,
		P.NAME AS PAYEE_NAME


		FROM
		TRANSACTION_ITEM TI
		LEFT JOIN TRANSACTION T ON
		TI.TRANSACTION_ID=T.ID
		LEFT JOIN INVOICE I ON I.ID=T.ID
		LEFT JOIN
		CASH_SALES CS ON CS.ID=T.ID
		LEFT JOIN CUSTOMER_CREDIT_MEMO CCM ON
		CCM.ID=T.ID
		LEFT JOIN ENTER_BILL
		EB ON EB.ID=T.ID
		LEFT JOIN
		VENDOR_CREDIT_MEMO VCM ON VCM.ID=T.ID
		LEFT
		JOIN CASH_PURCHASE CP ON
		CP.ID=T.ID
		LEFT JOIN CREDIT_CARD_CHARGES CC ON
		CC.ID=T.ID

		LEFT JOIN
		CUSTOMER C
		ON C.ID=CS.CUSTOMER_ID OR C.ID=CCM.CUSTOMER_ID OR C.ID=I.CUSTOMER_ID
		LEFT JOIN VENDOR V
		ON V.ID= CP.VENDOR_ID OR V.ID=VCM.VENDOR_ID OR V.ID=EB.VENDOR_ID OR
		(V.ID=CC.VENDOR_ID AND
		CC.VENDOR_ID IS NOT NULL)
		LEFT JOIN PAYEE P ON
		P.ID =C.ID OR P.ID =V.ID

		LEFT JOIN ITEM IT ON TI.TYPE=1 AND IT.TYPE
		IN (2,4) AND
		TI.ITEM_ID=IT.ID
		WHERE T.T_TYPE IN (1,2,4,6,7,8,14,26,27)
		ORDER BY
		T.T_DATE,T.ID;
	</sql-query>

	<sql-query name="getInventoryValutionDetails">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemID" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="long" />
		<return-scalar column="QTY_UNIT" type="long" />
		<return-scalar column="COST" type="double" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="long" />
		<return-scalar column="ITEM_NAME" type="string" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="PAYEE_NAME" type="string" />
		<return-scalar column="PAYEE_ID" type="long" />
		SELECT TRANSACTION_ID,
		TRANSACTION_DATE,
		TRANSACTION_TYPE,
		TRANSACTION_NUMBER,
		QTY_UNIT,
		COST,
		ITEM_TOTAL_QUANTITY,
		ITEM_NAME,
		ITEM_ID,
		PAYEE_NAME,
		PAYEE_ID
		FROM
		INVENTORY_HISTORY_VIEW V WHERE
		V.COMPANY=:companyId
		AND
		(V.TRANSACTION_DATE BETWEEN :fromDate
		AND :toDate)
		AND
		CASE
		WHEN
		0=:itemID THEN
		TRUE
		ELSE
		(V.ITEM_ID=:itemID)
		END;
	</sql-query>
	<sql-query name="getInventoryValutionSummary">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<return-scalar column="ITEM_NAME" type="string" />
		<return-scalar column="DESCRIPTION" type="string" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="long" />
		<return-scalar column="COST" type="double" />
		<return-scalar column="ITEM_SALE_PRICE" type="double" />
		<return-scalar column="ITEM_ID" type="long" />
		SELECT ITEM_NAME,
		DESCRIPTION,
		ITEM_TOTAL_QUANTITY,
		COST,
		ITEM_SALE_PRICE,
		ITEM_ID
		FROM
		INVENTORY_HISTORY_VIEW V WHERE
		V.COMPANY=:companyId
		AND
		(V.TRANSACTION_DATE BETWEEN :fromDate
		AND :toDate);
	</sql-query>
	<sql-query name="getInventoryStockStatusByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<return-scalar column="ITEM_NAME" type="string" />
		<return-scalar column="DESCRIPTION" type="string" />
		<return-scalar column="PREFFERED_VENDOR" type="long" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		SELECT
		ITEM_NAME,
		DESCRIPTION,
		PREFFERED_VENDOR,
		ITEM_TOTAL_QUANTITY,
		ITEM_ID
		FROM
		INVENTORY_HISTORY_VIEW V WHERE
		V.COMPANY=:companyId
		AND
		(V.TRANSACTION_DATE BETWEEN :fromDate
		AND :toDate);
	</sql-query>
	<sql-query name="getInventoryStockStatusByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<return-scalar column="ITEM_NAME" type="string" />
		<return-scalar column="DESCRIPTION" type="string" />
		<return-scalar column="PREFFERED_VENDOR" type="long" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		SELECT
		ITEM_NAME,
		DESCRIPTION,
		PREFFERED_VENDOR,
		ITEM_TOTAL_QUANTITY,
		ITEM_ID
		FROM
		INVENTORY_HISTORY_VIEW V WHERE
		V.COMPANY=:companyId
		AND
		(V.TRANSACTION_DATE BETWEEN :fromDate
		AND :toDate);
	</sql-query>
	<!-- //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->

</hibernate-mapping>

