<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
                "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.vimukti.accounter.core"
	default-access="field">
	<sql-query name="transactionsCreatedCountTrigger">
	<![CDATA[ 
	DROP TRIGGER  IF EXISTS  transactionsCreatedCount ON TRANSACTION ;
	 
	CREATE OR REPLACE FUNCTION transactionsCreatedCount() RETURNS trigger AS $transactionsCreatedCount$
	DECLARE
		       userId         bigint;
		       clientId       bigint;
	BEGIN
	    userId=NEW.CREATED_BY;
		clientId=(select client_id from users u where u.id=userId);
        IF (TG_OP ='INSERT') THEN
           UPDATE CLIENT SET TRANSACTIONS_CREATED=TRANSACTIONS_CREATED +1  WHERE id = clientId;
		   RETURN NEW;
        END IF;
           RETURN NULL;
	END;
		$transactionsCreatedCount$ LANGUAGE plpgsql;
   
	CREATE TRIGGER transactionsCreatedCount AFTER INSERT  ON TRANSACTION FOR each	ROW EXECUTE PROCEDURE transactionsCreatedCount();
   ]]>
	</sql-query>

	<sql-query name="transactionsUpdateCountTrigger">
	<![CDATA[ 
	DROP TRIGGER  IF EXISTS  transactionsUpdateCount ON TRANSACTION ;
	 
	CREATE OR REPLACE FUNCTION transactionsUpdateCount() RETURNS trigger AS $transactionsUpdateCount$
	DECLARE
		       userId         bigint;
		       clientId       bigint;
	BEGIN
	     userId=NEW.CREATED_BY;
		 clientId=(select client_id from users u where u.id=userId);
        IF (TG_OP ='UPDATE') THEN
         UPDATE CLIENT SET TRANSACTIONS_UPDATE=TRANSACTIONS_UPDATE +1  WHERE id = clientId;
		 RETURN NEW;
        END IF;
         RETURN NULL;
	END;
		$transactionsUpdateCount$ LANGUAGE plpgsql;
   
	CREATE TRIGGER transactionsUpdateCount BEFORE  UPDATE  ON TRANSACTION FOR each	ROW EXECUTE PROCEDURE transactionsUpdateCount();
   ]]>
	</sql-query>
	<sql-query name="companiesCountTrigger">
	<![CDATA[ 
	            DROP TRIGGER  IF EXISTS  companiesCount ON COMPANY;
				CREATE OR REPLACE FUNCTION companiesCount() RETURNS trigger AS $companiesCount$
				 DECLARE
				       userID          bigint;
				       clientID        bigint;
				BEGIN 
				IF (TG_OP ='INSERT') THEN
					  userID=NEW.CREATED_BY;
					  clientID=(select client_id from users  u where u.id=userID);
					  UPDATE CLIENT SET COMPANIES=COMPANIES +1  WHERE id = clientID;
					  RETURN NEW;
			    END IF;
                RETURN NULL;
				END;
				$companiesCount$ LANGUAGE plpgsql;
				CREATE TRIGGER companiesCount AFTER INSERT  ON COMPANY FOR each ROW EXECUTE PROCEDURE companiesCount();
			]]>
	</sql-query>

	<sql-query name="lastClientUpDateTrigger">
	<![CDATA[
				DROP TRIGGER  IF EXISTS  lastClientUpDate ON CLIENT; 
				CREATE OR REPLACE FUNCTION lastClientUpDate() RETURNS trigger AS $lastClientUpDate$
				BEGIN
				IF(TG_OP = 'UPDATE') THEN
						NEW.UPDATE_DATE = (SELECT  CURRENT_TIMESTAMP);
						RETURN NEW;
				END IF;
				  RETURN NULL;
				END;
				$lastClientUpDate$ LANGUAGE plpgsql;
				CREATE TRIGGER lastClientUpDate BEFORE UPDATE ON CLIENT FOR each ROW EXECUTE PROCEDURE lastClientUpDate();
			]]>
	</sql-query>

	<sql-query name="changedPasswordCountTrigger">
	<![CDATA[
				DROP TRIGGER  IF EXISTS  changedPasswordCount ON CLIENT; 
				CREATE OR REPLACE FUNCTION changedPasswordCount() RETURNS trigger AS $changedPasswordCount$
				 DECLARE
				 total integer;
				BEGIN
				IF(TG_OP = 'UPDATE') THEN
					IF ( OLD.PASSWORD != NEW.PASSWORD) THEN
						total=NEW.CHANGED_PASSWORD;
		                NEW.CHANGED_PASSWORD =total+1;
		                RETURN NEW;
	                END IF;
                END IF;
                 RETURN NULL;
				END;
				$changedPasswordCount$ LANGUAGE plpgsql;
				CREATE TRIGGER changedPasswordCount AFTER UPDATE ON CLIENT FOR each ROW EXECUTE PROCEDURE changedPasswordCount();
			]]>
	</sql-query>
	<sql-query name="noOfUsersPerCompanyCountTrigger">
	<![CDATA[
				DROP TRIGGER  IF EXISTS  noOfUsersPerCompanyCount ON USERS; 
				CREATE OR REPLACE FUNCTION noOfUsersPerCompanyCount() RETURNS trigger AS $noOfUsersPerCompanyCount$
				 DECLARE
				  totalCompanies bigint;
				   companyId  bigint;
				BEGIN
				 IF(TG_OP = 'INSERT') THEN
				     companyId=NEW.COMPANY_ID;
					 totalCompanies = (SELECT COUNT(*) FROM USERS WHERE COMPANY_ID=companyId);
					 UPDATE COMPANY SET NUMBER_OF_USERS= totalCompanies WHERE ID=companyId;
					 RETURN NEW;
			     END IF;
                 RETURN NULL;
				END;
				$noOfUsersPerCompanyCount$ LANGUAGE plpgsql;
				CREATE TRIGGER noOfUsersPerCompanyCount AFTER INSERT ON USERS FOR each ROW EXECUTE PROCEDURE noOfUsersPerCompanyCount();
			]]>
	</sql-query>

	<sql-query name="noOfTRansactionPerCompanyCountTrigger">
	<![CDATA[
	 			 DROP TRIGGER  IF EXISTS  noOfTransactionPerCompanyCount ON TRANSACTION; 
				 CREATE OR REPLACE FUNCTION noOfTransactionPerCompanyCount() RETURNS trigger AS $noOfTransactionPerCompanyCount$
				 DECLARE
					  totalTransactions bigint;
					  companyId  bigint;
				 BEGIN
				 IF(TG_OP = 'INSERT') THEN
					 companyId=NEW.COMPANY_ID;
					 totalTransactions = (SELECT COUNT(*) FROM TRANSACTION WHERE COMPANY_ID=companyId);
					 UPDATE COMPANY SET TRANSACTIONS_COUNT= totalTransactions WHERE ID=companyId;
                     RETURN NEW;
                  END IF;
                 RETURN NULL;
				END;
				$noOfTransactionPerCompanyCount$ LANGUAGE plpgsql;
				CREATE TRIGGER noOfTransactionPerCompanyCount AFTER INSERT ON TRANSACTION FOR each ROW EXECUTE PROCEDURE noOfTransactionPerCompanyCount();
			]]>
	</sql-query>
	<sql-query name="premiumCompaniesCountTrigger">
	<![CDATA[
				DROP TRIGGER  IF EXISTS  premiumCompaniesCount ON USERS; 
				CREATE OR REPLACE FUNCTION premiumCompaniesCount() RETURNS trigger AS $premiumCompaniesCount$
				DECLARE
					  companyId    bigint;
					  companyType  integer;
					  clientid      bigint;
					  
				BEGIN
				companyId=NEW.COMPANY_ID;
				clientid=NEW.CLIENT_ID;
				companyType=(SELECT TYPE FROM SUBSCRIPTION WHERE ID=(SELECT SUBSCRIPTION_ID FROM  CLIENT_SUBSCRIPTION WHERE ID= (SELECT CLIENT_SUBSCRIPTION FROM CLIENT WHERE ID=(SELECT CLIENT_ID FROM USERS WHERE ID=(SELECT CREATED_BY FROM COMPANY WHERE ID=companyId)))));
				IF(companyType=3) THEN 
						 UPDATE CLIENT SET PREMIUM_COMPANIES=PREMIUM_COMPANIES +1  WHERE id = clientid;
					     RETURN NEW;
				END IF;
				 RETURN NULL;
				END;
				$premiumCompaniesCount$ LANGUAGE plpgsql;
				CREATE TRIGGER premiumCompaniesCount AFTER INSERT ON USERS FOR each ROW EXECUTE PROCEDURE premiumCompaniesCount();
			]]>
	</sql-query>
</hibernate-mapping>
	