<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field"
	package="com.vimukti.accounter.core">


	<query name="getCompany.by.CompanyID">
		<query-param name="companyID" type="string" />
		from com.vimukti.accounter.core.Company c where c.companyID=:companyID
	</query>

	<query name="getuser.from.emailid.and.password">
		<query-param name="emailid" type="string" />
		<query-param name="password" type="string" />
		from com.vimukti.accounter.core.User user where user.email=:emailid
		and
		user.passwordSha1Hash =:password
	</query>

	<query name="getuser.by.email">
		<query-param name="email" type="string" />
		from com.vimukti.accounter.core.User user where user.email=:email
	</query>
	<!-- <sql-query name="getDataSize"> SELECT SUM(CI.IDENTITYDATASIZE)+SUM(WS.DATA_SIZE) 
		AS TOTAL_DATA_SIZE FROM COLLABERIDENTITY CI LEFT OUTER JOIN IDENTITY_SPACES 
		IDS ON CI.ID=IDS.IDENTITY_ID LEFT OUTER JOIN WORKSPACE WS ON WS.SPACE_ID=IDS.SPACE_ID 
		</sql-query> -->

	<query name="get.all.companies">
		from com.vimukti.accounter.core.Company
	</query>

	<query name="get.admin.users">
		from com.vimukti.accounter.core.User user where
		user.userRole='Admin'
	</query>


	<query name="get.canVoidOrEditTransaction.from.transactionID">
		select t.canVoidOrEdit from
		com.vimukti.accounter.core.Transaction t where t.id=?
	</query>

	<query name="getdistnct.from.traction.by.date">
		select distinct(t.transactionDate) from
		com.vimukti.accounter.core.Transaction t where
		t.transactionDate &gt;=
		(select
		c.preferences.depreciationStartDate
		from
		com.vimukti.accounter.core.Company c where c.id is not
		null) and
		t.transactionDate &lt;= (select max(d.depreciateTo) from
		com.vimukti.accounter.core.Depreciation d where d.status=?) order by
		t.transactionDate
	</query>

	<query name="getFixedAsset.from.id">
		select f from
		com.vimukti.accounter.core.FixedAsset f
		where f.id=?
	</query>

	<query name="getEntry.from.journalEntryType">
		select je from
		com.vimukti.accounter.core.Entry e
		inner join
		e.journalEntry je where
		e.journalEntryType=3 order by je.id
	</query>

	<query name="getTransactionNumber.from.typeandId">
		select t.number from
		com.vimukti.accounter.core.Transaction t where
		t.type
		=? and
		t.id=?
	</query>


	<query name="getEntry.orderedby.id">
		select je from com.vimukti.accounter.core.Entry e
		inner join
		e.journalEntry je where
		e.customer.id=? order by je.id
	</query>

	<query name="getFiscalYear.by.check.isCurrentFiscalYearistrue">
		select f.startDate from
		com.vimukti.accounter.core.FiscalYear f where
		f.isCurrentFiscalYear=true
	</query>

	<query name="getEntry.by.debitand.balanceDue.orderbyid">
		select je from
		com.vimukti.accounter.core.Entry e
		inner join
		e.journalEntry je where
		e.debit!=0.0 and
		je.balanceDue>0.0
		order
		by
		je.id
	</query>

	<query name="getEntry.by.vendorId.creditand.balanceDue.orderbyid">
		select je from
		com.vimukti.accounter.core.Entry e
		inner join
		e.journalEntry je where
		e.vendor.id=? and e.credit!=0.0 and
		je.balanceDue>0.0 order by
		je.id
	</query>

	<query name="getEntry.by.customerId.debitand.balanceDue.orderbyid">
		select je from
		com.vimukti.accounter.core.Entry e
		inner join
		e.journalEntry je where
		e.customer.id=? and e.debit !=0.0 and
		je.balanceDue>0.0
		order
		by je.id
	</query>


	<query name="getVATReturn.checkingby.taxagencyidand.dates">
		select min(v.VATperiodStartDate),
		max(v.VATperiodEndDate) from
		com.vimukti.accounter.core.VATReturn v
		where v.taxAgency.id
		=? group by v.taxAgency.id
	</query>

	<query name="get.name.fromAccount.byId">
		select a.name from
		com.vimukti.accounter.core.Account
		a where a.id=?
	</query>

	<query name="getDepreciation.from.depreciateFrom.byFixedassetId">
		select d from com.vimukti.accounter.core.Depreciation
		d inner join
		d.fixedAsset where d.depreciateFrom >=? and d.status=? and
		d.fixedAsset.id=?
	</query>

	<query name="update.merge.Payee.mergeoldbalance.tonewbalance">
		<query-param name="id" type="long" />
		<query-param name="status" type="boolean" />
		<query-param name="balance" type="double" />
		update com.vimukti.accounter.core.Payee set balance=:balance,
		isActive=:status where
		id=:id
	</query>

	<query name="update.merge.invoice.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.Invoice set customer.id=:toID where
		customer.id=:fromID
	</query>
	<query name="update.merge.cashsale.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CashSales set customer.id=:toID
		where
		customer.id=:fromID
	</query>

	<query name="update.merge.salesOrder.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.SalesOrder set customer.id=:toID
		where
		customer.id=:fromID
	</query>

	<query name="update.merge.customercreditmemo.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CustomerCreditMemo set
		customer.id=:toID where
		customer.id=:fromID
	</query>

	<query name="update.merge.Entry.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="memo" type="String" />

		update com.vimukti.accounter.core.Entry set memo=:memo,
		customer.id=:toID where
		customer.id=:fromID
	</query>

	<query name="update.merge.CustomerPrePayment.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CustomerPrePayment set
		customer.id=:toID where
		customer.id=:fromID
	</query>

	<query name="update.merge.CustomerRefund.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CustomerRefund set payTo.id=:toID
		where
		payTo.id=:fromID
	</query>
	<query name="update.merge.Estimate.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.Estimate set customer.id=:toID
		where
		customer.id=:fromID
	</query>
	<query name="update.merge.ReceivePayment.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.ReceivePayment set customer.id=:toID
		where
		customer.id=:fromID
	</query>

	<query name="delete.entry.old">
		<query-param name="from" type="long" />
		delete from com.vimukti.accounter.core.Entry where customer.id=:from
	</query>

	<query name="delete.Payee.old">
		<query-param name="from" type="long" />
		delete from com.vimukti.accounter.core.Payee where id=:from
	</query>

	<query name="delete.customer.old">
		<query-param name="fromid" type="long" />
		delete from com.vimukti.accounter.core.Customer where id=:from
	</query>



	<query name="update.mergeVendor.Payee.mergeoldbalance.tonewbalance">
		<query-param name="id" type="long" />
		<query-param name="balance" type="double" />
		update com.vimukti.accounter.core.Payee set balance=:balance where
		id=:id
	</query>

	<query name="update.mergeVendor.PurchaseOrder.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.PurchaseOrder set vendor.id=:toID
		where
		vendor.id=:fromID
	</query>


	<query name="update.mergeVendor.CashPurchase.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CashPurchase set vendor.id=:toID
		where
		vendor.id=:fromID
	</query>

	<query name="update.mergeVendor.CreditCardCharge.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CreditCardCharge set vendor.id=:toID
		where
		vendor.id=:fromID
	</query>

	<query name="update.mergeVendor.EnterBill.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.EnterBill set vendor.id=:toID
		where
		vendor.id=:fromID
	</query>

	<query name="update.mergeVendor.ItemReceipt.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.ItemReceipt set vendor.id=:toID
		where
		vendor.id=:fromID
	</query>
	<query name="update.mergeVendor.PayBill.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.PayBill set vendor.id=:toID
		where
		vendor.id=:fromID
	</query>

	<query name="delete.vendorentry.old">
		<query-param name="from" type="long" />
		delete from com.vimukti.accounter.core.Entry where vendor.id=:from
	</query>

	<query name="update.mergeItem.oldcost.tonewcost">
		<query-param name="from" type="long" />
		<query-param name="price" type="double" />
		update com.vimukti.accounter.core.Item set salesPrice=:price
		where
		id=:from
	</query>


	<query name="update.merge.Account.oldBalance.tonew">
		<query-param name="from" type="long" />
		<query-param name="balance" type="double" />
		update com.vimukti.accounter.core.Account set openingBalance=:balance
		where
		id=:from
	</query>

	<query name="delete.account.old">
		<query-param name="from" type="long" />
		delete from com.vimukti.accounter.core.AccountTransaction where
		account.id=:from
	</query>

	<query name="delete.account.entry.old">
		<query-param name="from" type="long" />
		delete from com.vimukti.accounter.core.Entry where account.id=:from
	</query>
	<query name="update.Entry.oldNameTo.newName">
		<query-param name="newName" type="string" />
		<query-param name="oldName" type="string" />
		update com.vimukti.accounter.core.Entry set memo=:newName where
		memo=:oldName
	</query>

	<query name="get.TransactionDate.from.TransactionbyDate">
		<query-param name="date" type="com.vimukti.accounter.core.LongUseType" />
		select t.transactionDate from com.vimukti.accounter.core.Transaction t
		where t.transactionDate
		&lt;:date
	</query>


	<query name="getFisaclId.andSum.fromAccountTransaction">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		select at.account.id as accountId, sum(at.amount) as amount from
		com.vimukti.accounter.core.AccountTransaction at where at.account.type
		in (14,15,16,17,18) and
		at.transaction.transactionDate between
		:startDate and :endDate group
		by at.account.id
	</query>

	<query name="getDepreciation.byFixedAsset.andWithDetails">
		select d from com.vimukti.accounter.core.Depreciation
		d inner join
		d.fixedAsset where d.depreciateFrom >= ? and d.status=?
		and
		d.fixedAsset.id=? group by d.fixedAsset.id
	</query>


	<query name="getEntry.byId.andMax">
		select e.voucherNumber from
		com.vimukti.accounter.core.Entry e where
		e.id = (select max(e1.id) from
		com.vimukti.accounter.core.Entry e1 )
	</query>

	<query name="getCustomerNumber.byId.andOrder">
		select c.number from
		com.vimukti.accounter.core.Customer c order by c.id
	</query>
	<query name="getCustomerNumber.orderBy.customerNumber">
		select c.number from
		com.vimukti.accounter.core.Customer c order by c.number
	</query>
	<query name="getVendorNumber.byId.andOrder">
		select v.vendorNumber from
		com.vimukti.accounter.core.Vendor v order by v.id
	</query>

	<query name="getassestNumber.from.FixedAsset">
		select f.assetNumber from
		com.vimukti.accounter.core.FixedAsset f
	</query>

	<query name="getTransactionNumber.by.type">
		<query-param name="transactionType" type="int" />
		select t.number from com.vimukti.accounter.core.Transaction t where
		t.type =:transactionType
	</query>

	<query name="getPayeename.from.PayeebyId">
		<query-param name="id" type="long" />
		select p.name from com.vimukti.accounter.core.Payee p where p.id=:id
	</query>


	<query name="getFlow.by.Id.from.Account">
		select a.flow from com.vimukti.accounter.core.Account
		a where a.id= (select max(a1.id) from
		com.vimukti.accounter.core.Account a1 where a1.parent is null)
	</query>

	<query name="getCount.from.Account.and.parent">
		<query-param name="parentId" type="long" />
		select count(*) from com.vimukti.accounter.core.Account a where
		a.parent.id=:parentId
	</query>


	<query name="getAllUsers">
		from com.vimukti.accounter.core.User user
	</query>

	<query name="getPayBill.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.PayBill pst where pst.payFrom.id
		=:accountId and pst.isVoid=false and pst.status =:status
	</query>

	<query name="getPayVAT.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.PayVAT pv where pv.payFrom.id
		=:accountId and pv.isVoid=false and pv.status =:status
	</query>

	<query name="getReceiveVAT.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.ReceiveVAT rv where rv.depositIn.id
		=:accountId and rv.isVoid=false and rv.status =:status
	</query>

	<query name="getCreditCardCharge.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.CreditCardCharge pst where
		pst.payFrom.id =:accountId and pst.isVoid=false and pst.status
		=:status
	</query>

	<query name="getCashPurchase.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.CashPurchase pst where pst.payFrom.id
		=:accountId and pst.isVoid=false and pst.status =:status
	</query>

	<query name="getCustomerPrePayment.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.CustomerPrePayment cpp where
		cpp.depositIn.id =:accountId and cpp.isVoid=false and cpp.status
		=:status
	</query>

	<query name="getCashPurchase.form.status">
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.CashPurchase cc where cc.status
		=:status
	</query>

	<query name="getCreditCardCharge.form.status">
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.CreditCardCharge cc where
		cc.status=:status
	</query>

	<query name="getPayBill.form.status">
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.PayBill pb where pb.status =:status
	</query>

	<query name="getFlowList.form.Account.byId">
		<query-param name="parentId" type="long" />
		<query-param name="flow" type="string" />
		from com.vimukti.accounter.core.Account a where a.parent.id=:parentId
		and
		a.flow !=:flow order by a.id
	</query>

	<query name="getListofNames.from.customerGroup">
		from com.vimukti.accounter.core.CustomerGroup C where
		C.name=?
	</query>

	<query name="getNameofBank.from.Bank">
		from com.vimukti.accounter.core.Bank B where B.name=?
	</query>

	<query name="getMaxDepreciation.from.Depreciation.byStatus">
		from com.vimukti.accounter.core.Depreciation d where
		d.id=((select max(d1.id) from com.vimukti.accounter.core.Depreciation
		d1 where d1.depreciationFor = ? and d1.status=?))
	</query>

	<query name="getDepreciation.from.DepreciationFom.andStatus">
		from com.vimukti.accounter.core.Depreciation d where
		d.depreciateFrom >= ? and d.status=?
	</query>

	<query name="getTransaction.by.Transactiondates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.Transaction t where t.transactionDate
		between :startDate and :endDate
	</query>

	<query name="getFisacalyear.by.Startdate">
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.FiscalYear f order by f.startDate
	</query>

	<query name="getFiscalyear.byId.andDates">
		<query-param name="status" type="int" />
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.FiscalYear f where f.id !=:id and
		f.startDate &lt; :startDate order by f.startDate desc
	</query>

	<query name="getDepreciation.byDepreciationForm.andStatus">
		from com.vimukti.accounter.core.Depreciation d where
		d.depreciateFrom >= ? and d.status=?
	</query>

	<query name="getItem.by.Name">
		from com.vimukti.accounter.core.Item I where I.name=?
	</query>

	<query name="getNameofAccount.by.Name">
		from com.vimukti.accounter.core.Account a where
		a.name = ?
	</query>

	<query name="get.Entry">
		from com.vimukti.accounter.core.Entry e
	</query>

	<query name="getPaymentTerms.by.Name">
		from com.vimukti.accounter.core.PaymentTerms P where
		P.name=?
	</query>

	<query name="getName.by.SalesPerson">
		from com.vimukti.accounter.core.SalesPerson S where
		S.firstName=?
	</query>

	<query name="getShippingmethod.by.Name">
		from com.vimukti.accounter.core.ShippingMethod S
		where S.name=?
	</query>

	<query name="getShippingTerms.by.Name">
		from com.vimukti.accounter.core.ShippingTerms S where
		S.name=?
	</query>

	<query name="getTaxAgency.by.Name">
		from com.vimukti.accounter.core.TAXAgency V where
		V.name=?
	</query>

	<query name="getTaxCode.by.id">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.TAXCode t where t.id =:id
	</query>

	<query name="getTaxACode.inTaxitem.by.id">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.TAXCode t where t.id =:id
	</query>

	<query name="getTaxrate.by.TransactioId.and.Vatreturn">
		from com.vimukti.accounter.core.TAXRateCalculation vr
		where vr.transactionItem.transaction.id=? and vr.vatReturn is not null
	</query>

	<query name="getTaxAdjustment.by.dates">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.transactionDate between :fromDate and :toDate and v.isFiled = false
	</query>

	<query name="getTaxrateCalc.by.taxitem.and.details">
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="vatAgency" type="long" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where vr.taxItem
		is not null and vr.taxAgency.id=:vatAgency and vr.transactionDate
		&lt;= :toDate and vr.vatReturn is null
	</query>

	<query name="getTaxrateCalc.by.vatitem.and.details">
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="vatAgency" type="long" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where vr.taxItem
		is not null and vr.taxItem.taxAgency.id=:vatAgency and
		vr.transactionDate &gt; :toDate and vr.vatReturn is null
	</query>

	<query name="gettransaction.by.dateand.AccountNumber">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.AccountTransaction at where
		at.transaction.transactionDate
		between :startDate and :endDate order by
		at.account.number
	</query>

	<query name="getVendor.by.name">
		from com.vimukti.accounter.core.Vendor V where
		V.name=?
	</query>

	<query name="getVendorGroup.by.name">
		from com.vimukti.accounter.core.VendorGroup V where
		V.name=?
	</query>

	<query name="getFixedAsset.by.statusAnd.purchaseDate">
		from com.vimukti.accounter.core.FixedAsset f where
		f.status = 2 and f.purchaseDate &lt;= ?
	</query>

	<query name="getAccount.by.idInAccountList">
		from com.vimukti.accounter.core.Account a where a.id
		in (:accountsList)
	</query>

	<query name="getDepreciation.by.ToandStatus">
		from com.vimukti.accounter.core.Depreciation d where
		d.depreciateTo >= ? and d.status=?
	</query>

	<query name="getAccount.by.id">
		from com.vimukti.accounter.core.Account a where a.id
		=?
	</query>

	<query name="getTaxCalc.by.TaxAgencyId.and.withOtherDetails">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxAgency" type="long" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where
		vr.taxItem.taxAgency.id=:taxAgency and
		vr.taxItem is not null and
		vr.transactionDate between :fromDate and :toDate
		group by
		vr.id,vr.transactionItem,vr.taxItem order by
		vr.transactionItem,vr.taxItem
	</query>

	<query name="getTaxrateCalc.by.TaxAgencyandItem.and.Dates">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where
		vr.taxItem
		is not null and vr.transactionDate between :fromDate and :toDate
		group
		by vr.id,vr.transactionItem,vr.taxItem order by
		vr.transactionItem,vr.taxItem
	</query>

	<query name="getTaxadjustment.by.allDetails.withOrder">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxAgency" type="long" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.taxAgency.id=:taxAgency and v.transactionDate between
		:fromDate and :toDate order by v.taxItem
	</query>

	<query name="getTaxadjustment.by.betweenDates">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.transactionDate between :fromDate and :toDate order by v.taxItem
	</query>

	<query name="getVat.by.taxAgency.and.VatPeriod">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxAgency" type="long" />
		from com.vimukti.accounter.core.VATReturn v where
		v.taxAgency.id=:taxAgency and v.VATperiodEndDate between :fromDate and
		:toDate
	</query>

	<query name="getVat.by.BetweenendDates">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.VATReturn v where v.VATperiodEndDate
		between :fromDate and :toDate
	</query>

	<!-- <query name="getTaxAgency.by.liabilityAccountId"> from com.vimukti.accounter.core.TAXAgency 
		ta where ta.liabilityAccount.id = ? </query> -->

	<query name="getAccount.by.name.and.type">
		from com.vimukti.accounter.core.Account a where
		a.name =? and a.type =?
	</query>

	<query name="getAccount.by.id.and.type">
		from com.vimukti.accounter.core.Account a where a.id
		= ?
		and a.type = ?
	</query>

	<query name="getcreditandPayments.by.Payieeid.and.balance">
		from com.vimukti.accounter.core.CreditsAndPayments cp
		where cp.payee.id =
		? and cp.balance > 0.0
	</query>

	<query name="getFisacalyear">
		from com.vimukti.accounter.core.FiscalYear fs
	</query>

	<query name="getFisacalyear.by.id.and.Startdate">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.FiscalYear f where f.id !=:id and
		f.startDate>=:startDate order by f.startDate
	</query>


	<!-- <query name="getCashsales.by.CompanyId"> <query-param name="id" type="long" 
		/> <query-param name="companyID" type="long" /> from com.vimukti.accounter.core.CashSales 
		cs where cs.id =:id and cs.company.id =:companyID </query> -->

	<query name="getTAXAdjustments.by.taxAgencyIdand.Date">
		<query-param name="vatAgency" type="int" />
		<query-param name="fromDate" type="LongUseType" />
		<query-param name="toDate" type="LongUseType" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.taxAgency.id=:vatAgency and v.transactionDate between
		:fromDate and :toDate and v.isFiled = false
	</query>


	<query name="getTAXRateCalculations.by.taxAgencyIdand.Date">
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="vatAgency" type="int" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where vr.taxItem
		is not null and vr.taxItem.taxAgency.id=:vatAgency and
		vr.transactionDate &lt;= :toDate and vr.vatReturn is null
	</query>


	<query name="getDepreciation">
		from com.vimukti.accounter.core.Depreciation d where
		d.id =(select
		min(d1.id) from com.vimukti.accounter.core.Depreciation
		d1)
	</query>

	<query name="getTransactionItem.by.id">
		<query-param name="id" type="String" />
		from com.vimukti.accounter.core.TransactionItem ti
		where ti.taxCode.id
		=:id
	</query>

	<query name="getTransactionDate.by.dates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.Transaction t where t.type in
		(4,5,8,10) and t.transactionDate between :startDate and :endDate
	</query>

	<query name="getDepreciation.by.depreciateFrom">
		from com.vimukti.accounter.core.Depreciation d where
		d.depreciateFrom >= ? and d.status=?
	</query>

	<query name="getWriteCheck.by.status">
		from com.vimukti.accounter.core.WriteCheck wc where
		wc.status = ?
	</query>

	<query name="getWriteCheck.by.bankacountIdandstatus">
		from com.vimukti.accounter.core.WriteCheck wc where
		wc.bankAccount.id = ? and wc.isVoid=false and wc.status = ?
	</query>

	<query name="getCustomerRefund.by.isvoidandstatus">
		from com.vimukti.accounter.core.CustomerRefund cr
		where cr.isVoid=false and cr.status=?
	</query>

	<query name="getPaySalesTax.by.status">
		from com.vimukti.accounter.core.PaySalesTax pst where
		pst.status = ?
	</query>

	<query name="getCustomerRefund.by.payFromand.isvoid.status">
		from com.vimukti.accounter.core.CustomerRefund cr
		where cr.payFrom.id = ? and cr.isVoid=false and cr.status=?
	</query>

	<query name="getPaySalesTax.by.payFromand.isvoid.status">
		from com.vimukti.accounter.core.PaySalesTax pst where
		pst.payFrom.id = ? and pst.isVoid=false and pst.status = ?
	</query>

	<query name="getCreditsAndPayments.by.check.payeeidandbalanceid">
		from com.vimukti.accounter.core.CreditsAndPayments cp
		where cp.payee.id = ? and cp.balance > 0.0
	</query>

	<query name="getCustomerRefund">
		from com.vimukti.accounter.core.CustomerRefund cr
	</query>

	<query name="getWriteCheck.by.payToType">
		from com.vimukti.accounter.core.WriteCheck wc where
		wc.payToType=?
	</query>

	<query name="getFixedAsset.by.checkStatusand.purchaseDate">
		from com.vimukti.accounter.core.FixedAsset f where
		f.status = 2 and f.purchaseDate &lt;= ?
	</query>

	<query name="getDepreciation.by.check.idandStatus.depreciationFor">
		from com.vimukti.accounter.core.Depreciation d where
		d.id=((select max(d1.id) from com.vimukti.accounter.core.Depreciation
		d1 where d1.depreciationFor = ? and d1.status=?))
	</query>

	<query
		name="getTAXRateCalculation.by.check.taxItemandDates.orderBy.transactionItem">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation v
		where v.taxItem is
		not null and v.transactionDate between :startDate
		and :endDate and
		v.transactionItem.taxCode.isECSalesEntry = true group
		by v.id,
		v.transactionItem order by v.transactionItem
	</query>

	<query name="getTAXRateCalculation.by.check.taxItemandDates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation v where v.taxItem
		is not null and v.transactionDate between :startDate and :endDate and
		v.transactionItem.taxCode.isECSalesEntry = true group by v.id,
		v.transactionItem
	</query>

	<query name="getCashPurchase.by.employeeNmae.expenseStatusandtype">
		<query-param name="employeeName" type="String" />
		<query-param name="type" type="int" />
		<query-param name="expenseStatus" type="int" />
		from com.vimukti.accounter.core.CashPurchase cp where
		cp.employee.fullName=:employeeName and cp.expenseStatus=:expenseStatus
		and
		cp.type=:type and cp.isVoid=false
	</query>

	<query name="getCashPurchase.by.expenseStatusandtype">
		<query-param name="type" type="int" />
		<query-param name="expenseStatus" type="int" />
		from com.vimukti.accounter.core.CashPurchase cp where
		cp.expenseStatus=:expenseStatus and cp.type=:type and cp.isVoid=false
	</query>


	<query name="getEntry.by.id">
		from com.vimukti.accounter.core.Entry e inner join
		e.journalEntry je
		where
		je.id =?
	</query>

	<query name="getEstimate">
		from com.vimukti.accounter.core.Estimate e
	</query>

	<query name="getEstimate.by.check.id.status">
		from com.vimukti.accounter.core.Estimate e where
		e.customer.id = ? and e.status = 0
	</query>

	<query name="getFiscalYear.by.check.status.startDate">
		from com.vimukti.accounter.core.FiscalYear fy where
		fy.status = 1 order by fy.startDate
	</query>

	<query name="getFixedAsset.by.status">
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.FixedAsset f where
		f.status = :status
	</query>

	<query name="getTransaction.by.check.type.number.id">
		from com.vimukti.accounter.core.Transaction t where
		t.type =? and
		t.number =? and t.id !=?
	</query>


	<query name="getJournalEntry">
		from com.vimukti.accounter.core.JournalEntry j
	</query>

	<query name="getJournalEntry.by.id">
		from com.vimukti.accounter.core.JournalEntry j where
		j.id = ?
	</query>

	<query name="getFinanceLogger.orderby.id.desc">
		from com.vimukti.accounter.core.FinanceLogger order
		by id desc
	</query>

	<query name="getFinanceLogger.by.checkidwith.lowerrangeandupperrange">
		from com.vimukti.accounter.core.FinanceLogger f where
		f.id &gt;:lowerRange and f.id &lt;=:upperRange order by f.id desc
	</query>

	<query name="getTAXRateCalculation.by.check.idandvatReturn">
		from com.vimukti.accounter.core.TAXRateCalculation vr
		where
		vr.transactionItem.transaction.id=? and vr.vatReturn is not null
	</query>

	<query name="getVATReturn.by.check.BalanceGraterThanzero">
		from com.vimukti.accounter.core.VATReturn v where
		v.balance &gt;0
	</query>

	<query name="getVATReturn.by.check.BalancelessThanzero">
		from com.vimukti.accounter.core.VATReturn v where
		v.balance &lt;0
	</query>

	<query name="getVATReturn.by.taxagencyandenddate">
		<query-param name="taxAgency" type="int" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.VATReturn vt where
		vt.taxAgency.id=:taxAgency and vt.VATperiodEndDate=:endDate
	</query>

	<query name="getVATReturn.by.enddate">
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.VATReturn v where v.VATperiodEndDate =
		:endDate
	</query>

	<query name="getItem.by.check.isIBuyThisItemisTrue">
		from com.vimukti.accounter.core.Item item where
		item.isIBuyThisItem =
		true
	</query>

	<query name="getTAXRateCalculation.by.datesand.orderby.transactionItem">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation v
		where v.taxItem is
		not null and v.transactionDate between :startDate
		and :endDate group by
		v.id, v.transactionItem order by
		v.transactionItem
	</query>

	<query name="getItem.by.checkisISellThisItemisTrue">
		from com.vimukti.accounter.core.Item item where
		item.isISellThisItem =
		true
	</query>

	<query name="getFixedAsset.by.checkingstatus">
		from com.vimukti.accounter.core.FixedAsset f where
		f.status = 3
	</query>

	<query name="getAccount">
		from com.vimukti.accounter.core.Account a where
		a.type not in (?,?,?)
	</query>

	<query name="getTransactionMakeDeposit.by.id">
		from
		com.vimukti.accounter.core.TransactionMakeDeposit tmd where tmd.id =
		?)
	</query>


	<query name="getTransactionMakeDeposit.by.checking.isDepositedandisVoid">
		from
		com.vimukti.accounter.core.TransactionMakeDepositEntries at where
		at.transaction.isDeposited = 'false' and at.transaction.isVoid =
		'false'
	</query>

	<query
		name="getTAXRateCalculation.checkingby.salesLiabilityAccountName.taxDue">
		from com.vimukti.accounter.core.TAXRateCalculation
		pst where
		pst.taxAgency.salesLiabilityAccount.name != 'Un Deposited
		Funds' and
		pst.transactionItem.transaction != null and pst.taxDue != 0
		order by
		pst.taxAgency.id
	</query>

	<query
		name="getTAXAdjustment.checkingby.salesLiabilityAccount.nameandbalanceDue">
		from com.vimukti.accounter.core.TAXAdjustment t where
		t.taxAgency.salesLiabilityAccount.name != 'Un Deposited Funds' and
		t.journalEntry.balanceDue != 0 order by t.taxAgency.id
	</query>

	<query name="getTAXAdjustment.checkingby.transactionDate">
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.transactionDate &lt;=:endDate
	</query>

	<query name="getTAXAdjustment.checkingby.VATperiodEndDate">
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.VATReturn v where v.VATperiodEndDate
		&lt;= :endDate
	</query>

	<query name="getTAXRateCalculation.by.datesand.vatReturn">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation v where v.taxItem
		is not null and v.transactionDate between :startDate and :endDate and
		v.vatReturn is null order by v.taxItem
	</query>



	<query name="getTAXRateCalculation.by.dates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation v where v.taxItem
		is not null and v.transactionDate between :startDate and :endDate
		order by v.taxItem
	</query>


	<query name="getTAXAdjustment.by.taxAgencyidanddates">
		<query-param name="taxAgency" type="long" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.taxAgency.id=:taxAgency and v.transactionDate between
		:fromDate and :toDate and v.isFiled = false order by v.taxItem
	</query>

	<query
		name="getTAXAdjustment.by.dates.orderby.taxItemNameand.TransactionDate">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.transactionDate between :startDate and :endDate order by
		v.taxItem.name, v.journalEntry.transactionDate
	</query>

	<query name="getTAXRateCalculation.by.dates.groupedByIdtransactionItem">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation v where
		v.taxItem.name=:taxItemName and v.transactionDate between :startDate
		and :endDate group by v.id, v.transactionItem order by
		v.transactionItem
	</query>


	<query name="getTAXRateCalculation.by.dates.orderbytaxItem.name">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXRateCalculation v where v.taxItem
		is not null and (v.isVATGroupEntry = true and v.taxItem != 4 and
		v.taxItem != 12 and
		v.taxItem != 14) or (v.isVATGroupEntry = false) and
		v.transactionDate between
		:startDate and :endDate group by v.id,
		v.transactionItem order by
		v.taxItem.name
	</query>

	<query name="getFixedAsset.by.purchaseDate">
		from com.vimukti.accounter.core.FixedAsset fa where
		fa.purchaseDate &lt;=?
	</query>

	<query name="getFiscalYearf">
		from com.vimukti.accounter.core.FiscalYear f
	</query>

	<!-- <query name="getentiy"> from ? entiy </query> -->

	<query name="deleteTAXCode">
		delete from com.vimukti.accounter.core.TAXCode t
		where t.id=?
	</query>

	<query name="get.entityObject.from.Account">
		from com.vimukti.accounter.core.Account entity

	</query>

	<query name="get.entityObject.from.Vendor">
		from com.vimukti.accounter.core.Vendor entity
	</query>

	<query name="get.entityObject.from.TAXAgency">
		from com.vimukti.accounter.core.TAXAgency entity
	</query>

	<query name="get.entityObject.from.Customer">
		from com.vimukti.accounter.core.Customer entity
	</query>

	<query name="get.entityObject.from.Item">
		from com.vimukti.accounter.core.Item entity
	</query>

	<query name="get.entityObject.from.TAXGroup">
		from com.vimukti.accounter.core.TAXGroup entity
	</query>

	<query name="get.entityObject.from.TaxItemGroup">
		from com.vimukti.accounter.core.TAXItemGroup entity
	</query>

	<!-- <query name="get.entityObject.from.Box1099"> from com.vimukti.accounter.core.Box1099 
		entity </query> -->

	<query name="get.entityObject.from.TAXCode">
		from com.vimukti.accounter.core.TAXCode entity
	</query>

	<query name="get.entityObject.from.TAXItem">
		from com.vimukti.accounter.core.TAXItem entity
	</query>

	<!-- <query name="get.entityObject.from.ItemTax"> from com.vimukti.accounter.core.ItemTax 
		entity </query> -->

	<query name="get.entityObject.from.CustomerGroup">
		from com.vimukti.accounter.core.CustomerGroup
		entity
	</query>

	<query name="get.entityObject.from.VendorGroup">
		from com.vimukti.accounter.core.VendorGroup entity
	</query>

	<query name="get.entityObject.from.PaymentTerms">
		from com.vimukti.accounter.core.PaymentTerms entity
	</query>

	<query name="get.entityObject.from.ShippingMethod">
		from com.vimukti.accounter.core.ShippingMethod
		entity
	</query>

	<query name="get.entityObject.from.ShippingTerms">
		from com.vimukti.accounter.core.ShippingTerms
		entity
	</query>

	<query name="get.entityObject.from.PriceLevel">
		from com.vimukti.accounter.core.PriceLevel entity
	</query>

	<query name="get.entityObject.from.ItemGroup">
		from com.vimukti.accounter.core.ItemGroup entity
	</query>

	<query name="get.entityObject.from.SalesPerson">
		from com.vimukti.accounter.core.SalesPerson entity
	</query>

	<query name="get.entityObject.from.Payee">
		from com.vimukti.accounter.core.Payee entity
	</query>

	<query name="get.entityObject.from.CreditRating">
		from com.vimukti.accounter.core.CreditRating entity
	</query>

	<query name="get.entityObject.from.Company">
		from com.vimukti.accounter.core.Company entity
	</query>

	<query name="get.entityObject.from.Transaction">
		from com.vimukti.accounter.core.Transaction entity
	</query>

	<!-- <query name="get.entityObject.from.Address"> from com.vimukti.accounter.core.Address 
		entity </query> -->

	<query name="get.entityObject.from.Bank">
		from com.vimukti.accounter.core.Bank entity
	</query>

	<!-- <query name="get.entityObject.from.CompanyPreferences"> from com.vimukti.accounter.core.CompanyPreferences 
		entity </query> -->
	<!-- <query name="get.entityObject.from.Contact"> from com.vimukti.accounter.core.Contact 
		entity </query> -->

	<query name="get.entityObject.from.CreditsAndPayments">
		from com.vimukti.accounter.core.CreditsAndPayments
		entity
	</query>

	<query name="get.entityObject.from.Currency">
		from com.vimukti.accounter.core.Currency entity
	</query>

	<!-- <query name="get.entityObject.from.Email"> from com.vimukti.accounter.core.Email 
		entity </query> -->

	<query name="get.entityObject.from.Entry">
		from com.vimukti.accounter.core.Entry entity
	</query>

	<!-- <query name="get.entityObject.from.Fax"> from com.vimukti.accounter.core.Fax 
		entity </query> -->

	<query name="get.entityObject.from.PaySalesTaxEntries">
		from com.vimukti.accounter.core.PaySalesTaxEntries
		entity
	</query>

	<!-- <query name="get.entityObject.from.Phone"> from com.vimukti.accounter.core.Phone 
		entity </query> -->

	<query name="get.entityObject.from.TaxRates">
		from com.vimukti.accounter.core.TaxRates entity
	</query>

	<query name="get.entityObject.from.UnitOfMeasure">
		from com.vimukti.accounter.core.UnitOfMeasure
		entity
	</query>


	<query name="get.entityObject.from.TransactionMakeDeposit">
		from
		com.vimukti.accounter.core.TransactionMakeDeposit entity
	</query>

	<query name="get.entityObject.from.Invoice">
		from com.vimukti.accounter.core.Invoice entity
	</query>

	<query name="get.entityObject.from.CashPurchase">
		from com.vimukti.accounter.core.CashPurchase entity
	</query>

	<query name="get.entityObject.from.CashSales">
		from com.vimukti.accounter.core.CashSales entity
	</query>

	<query name="get.entityObject.from.CustomerCreditMemo">
		from com.vimukti.accounter.core.CustomerCreditMemo
		entity
	</query>

	<query name="get.entityObject.from.CustomerPrePayment">
		from com.vimukti.accounter.core.CustomerPrePayment
		entity
	</query>

	<query name="get.entityObject.from.EnterBill">
		from com.vimukti.accounter.core.EnterBill entity
	</query>

	<query name="get.entityObject.from.IssuePayment">
		from com.vimukti.accounter.core.IssuePayment entity
	</query>

	<query name="get.entityObject.from.PayBill">
		from com.vimukti.accounter.core.PayBill entity
	</query>

	<query name="get.entityObject.from.PaySalesTax">
		from com.vimukti.accounter.core.PaySalesTax entity
	</query>

	<query name="get.entityObject.from.PurchaseOrder">
		from com.vimukti.accounter.core.PurchaseOrder
		entity
	</query>

	<query name="get.entityObject.from.ReceivePayment">
		from com.vimukti.accounter.core.ReceivePayment
		entity
	</query>

	<query name="get.entityObject.from.SalesOrder">
		from com.vimukti.accounter.core.SalesOrder entity
	</query>

	<query name="get.entityObject.from.TransferFund">
		from com.vimukti.accounter.core.TransferFund entity
	</query>

	<query name="get.entityObject.from.VendorCreditMemo">
		from com.vimukti.accounter.core.VendorCreditMemo
		entity
	</query>

	<query name="get.entityObject.from.WriteCheck">
		from com.vimukti.accounter.core.WriteCheck entity
	</query>

	<query name="get.entityObject.from.MakeDeposit">
		from com.vimukti.accounter.core.MakeDeposit entity
	</query>

	<query name="get.entityObject.from.CreditCardCharge">
		from com.vimukti.accounter.core.CreditCardCharge
		entity
	</query>

	<query name="get.entityObject.from.User">
		from com.vimukti.accounter.core.User entity
	</query>

	<query name="get.entityObject.from.FiscalYear">
		from com.vimukti.accounter.core.FiscalYear entity
	</query>

	<query name="get.entityObject.from.CommodityCode">
		from com.vimukti.accounter.core.CommodityCode
		entity
	</query>

	<query name="get.entityObject.from.TransactionMakeDepositEntries">
		from
		com.vimukti.accounter.core.TransactionMakeDepositEntries entity
	</query>

	<query name="get.entityObject.from.AccountTransaction">
		from com.vimukti.accounter.core.AccountTransaction
		entity
	</query>

	<query name="get.entityObject.from.VATReturn">
		from com.vimukti.accounter.core.VATReturn
		entity
	</query>

	<query name="get.entityObject.from.Budget">
		from com.vimukti.accounter.core.Budget
		entity
	</query>

	<query name="get.entityObject.from.ItemReceipt">
		from com.vimukti.accounter.core.ItemReceipt
		entity
	</query>

	<query name="get.entityObject.from.Expense">
		from com.vimukti.accounter.core.Expense
		entity
	</query>

	<query name="get.entityObject.from.PayExpense">
		from com.vimukti.accounter.core.PayExpense
		entity

	</query>
	<query name="get.entityObject.from.FixedAssetNote">
		from com.vimukti.accounter.core.FixedAssetNote
		entity
	</query>

	<query name="get.entityObject.from.FixedAssetHistory">
		from com.vimukti.accounter.core.FixedAssetHistory
		entity
	</query>

	<query name="get.entityObject.from.CustomerRefund">
		from com.vimukti.accounter.core.CustomerRefund
		entity
	</query>

	<query name="get.entityObject.from.FixedAsset">
		from com.vimukti.accounter.core.FixedAsset
		entity
	</query>

	<query name="get.entityObject.from.Box">
		from com.vimukti.accounter.core.Box
		entity
	</query>

	<query name="get.entityObject.from.PayVAT">
		from com.vimukti.accounter.core.PayVAT
		entity
	</query>

	<query name="get.entityObject.from.ItemBackUp">
		from com.vimukti.accounter.core.ItemBackUp
		entity
	</query>

	<query name="get.entityObject.from.TransactionCreditsAndPayments">
		from
		com.vimukti.accounter.core.TransactionCreditsAndPayments
		entity
	</query>

	<query name="get.entityObject.from.TransactionReceivePayment">
		from
		com.vimukti.accounter.core.TransactionReceivePayment
		entity
	</query>

	<query name="get.entityObject.from.TransactionPayBill">
		from com.vimukti.accounter.core.TransactionPayBill
		entity

	</query>
	<query name="get.entityObject.from.VATReturnBox">
		from com.vimukti.accounter.core.VATReturnBox
		entity

	</query>

	<query name="get.entityObject.from.Depreciation">
		from com.vimukti.accounter.core.Depreciation
		entity
	</query>

	<query name="get.entityObject.from.TAXRateCalculation">
		from com.vimukti.accounter.core.TAXRateCalculation
		entity
	</query>

	<query name="get.entityObject.from.FinanceLogger">
		from com.vimukti.accounter.core.FinanceLogger
		entity
	</query>

	<query name="get.entityObject.from.ReceiveVAT">
		from com.vimukti.accounter.core.ReceiveVAT
		entity
	</query>

	<query name="get.entityObject.from.TAXAdjustment">
		from com.vimukti.accounter.core.TAXAdjustment
		entity
	</query>

	<query name="get.entityObject.from.BrandingTheme">
		from com.vimukti.accounter.core.BrandingTheme
		entity
	</query>

	<!-- <query name="get.entityObject.from.EmployeeDetail"> from com.vimukti.accounter.core.EmployeeDetail 
		entity </query> -->

	<query name="get.entityObject.from.StockTransfer">
		from com.vimukti.accounter.core.StockTransfer
		entity
	</query>

	<query name="get.developer.by.client">
		<query-param name="client" type="com.vimukti.accounter.core.Client" />
		from com.vimukti.accounter.core.Developer d where d.client =:client
	</query>

	<query name="get.developer.by.id">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.Developer d where d.id=:id
	</query>

	<query name="get.developer.by.apiKey">
		<query-param name="apiKey" type="String" />
		from com.vimukti.accounter.core.Developer d where d.apiKey=:apiKey
	</query>

	<query name="get.ServerCompany.by.companyId.and.client">
		<query-param name="id" type="Long" />
		<query-param name="client" type="com.vimukti.accounter.core.Client" />
		from com.vimukti.accounter.core.ServerCompany sc left join sc.clients
		c where sc.id=:id and c=:client
	</query>


	<sql-query name="create.schema">
		CREATE SCHEMA ?
	</sql-query>

	<sql-query name="drop.schema">
		DROP SCHEMA ?
	</sql-query>

	<query name="get.All.Units">
		from com.vimukti.accounter.core.Unit
	</query>

	<query name="adminUserForEmailId">
		<query-param name="emailid" type="string" />
		from com.vimukti.accounter.core.User user where user.email=:emailid
		and user.isAdmin =true
	</query>

	<query name="getTAXAdjustment.by.dates.and.taxItemName">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxItemName" type="String" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.name=:taxItemName and v.transactionDate between :startDate
		and :endDate order by v.taxItem.name, v.journalEntry.transactionDate
	</query>

	<query name="getTAXCode.for.TAXItemGroup">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.TAXCode t where
		t.TAXItemGrpForSales.id=:id
	</query>

</hibernate-mapping>
